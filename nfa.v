//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Mon Jan 21 23:17:46 2013
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Feb  7 00:18:39 2014
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 60
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [24 x i8] c"q < nfa_get_states(nfa)\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'b0}
// @.str1 = private unnamed_addr constant [6 x i8] c"nfa.c\00"

`define TAG_g__str1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g__str1_a {`TAG_g__str1, 23'b0}
// @__PRETTY_FUNCTION__.nfa_add_initial = private unnamed_addr constant [39 x i8] c"void nfa_add_initial(nfa_t *, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_add_initial `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g___PRETTY_FUNCTION___nfa_add_initial_a {`TAG_g___PRETTY_FUNCTION___nfa_add_initial, 23'b0}
// @__PRETTY_FUNCTION__.nfa_remove_initial = private unnamed_addr constant [42 x i8] c"void nfa_remove_initial(nfa_t *, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_remove_initial `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g___PRETTY_FUNCTION___nfa_remove_initial_a {`TAG_g___PRETTY_FUNCTION___nfa_remove_initial, 23'b0}
// @__PRETTY_FUNCTION__.nfa_is_initial = private unnamed_addr constant [45 x i8] c"_Bool nfa_is_initial(const nfa_t *, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_is_initial `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g___PRETTY_FUNCTION___nfa_is_initial_a {`TAG_g___PRETTY_FUNCTION___nfa_is_initial, 23'b0}
// @__PRETTY_FUNCTION__.nfa_add_final = private unnamed_addr constant [37 x i8] c"void nfa_add_final(nfa_t *, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_add_final `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g___PRETTY_FUNCTION___nfa_add_final_a {`TAG_g___PRETTY_FUNCTION___nfa_add_final, 23'b0}
// @__PRETTY_FUNCTION__.nfa_remove_final = private unnamed_addr constant [40 x i8] c"void nfa_remove_final(nfa_t *, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_remove_final `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g___PRETTY_FUNCTION___nfa_remove_final_a {`TAG_g___PRETTY_FUNCTION___nfa_remove_final, 23'b0}
// @__PRETTY_FUNCTION__.nfa_is_final = private unnamed_addr constant [43 x i8] c"_Bool nfa_is_final(const nfa_t *, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_is_final `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g___PRETTY_FUNCTION___nfa_is_final_a {`TAG_g___PRETTY_FUNCTION___nfa_is_final, 23'b0}
// @.str2 = private unnamed_addr constant [28 x i8] c"state < nfa_get_states(nfa)\00"

`define TAG_g__str2 `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g__str2_a {`TAG_g__str2, 23'b0}
// @__PRETTY_FUNCTION__.nfa_get_sucessors = private unnamed_addr constant [69 x i8] c"void nfa_get_sucessors(const nfa_t *, state_t, symbol_t, bitset_t *)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_get_sucessors `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g___PRETTY_FUNCTION___nfa_get_sucessors_a {`TAG_g___PRETTY_FUNCTION___nfa_get_sucessors, 23'b0}
// @.str3 = private unnamed_addr constant [27 x i8] c"sym < nfa_get_symbols(nfa)\00"

`define TAG_g__str3 `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g__str3_a {`TAG_g__str3, 23'b0}
// @__PRETTY_FUNCTION__.nfa_get_predecessors = private unnamed_addr constant [72 x i8] c"void nfa_get_predecessors(const nfa_t *, state_t, symbol_t, bitset_t *)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_get_predecessors `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g___PRETTY_FUNCTION___nfa_get_predecessors_a {`TAG_g___PRETTY_FUNCTION___nfa_get_predecessors, 23'b0}
// @.str5 = private unnamed_addr constant [25 x i8] c"a < nfa_get_symbols(nfa)\00"

`define TAG_g__str5 `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g__str5_a {`TAG_g__str5, 23'b0}
// @__PRETTY_FUNCTION__.nfa_add_transition = private unnamed_addr constant [61 x i8] c"void nfa_add_transition(nfa_t *, state_t, state_t, symbol_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_add_transition `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g___PRETTY_FUNCTION___nfa_add_transition_a {`TAG_g___PRETTY_FUNCTION___nfa_add_transition, 23'b0}
// @.str6 = private unnamed_addr constant [25 x i8] c"q0 < nfa_get_states(nfa)\00"

`define TAG_g__str6 `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g__str6_a {`TAG_g__str6, 23'b0}
// @.str7 = private unnamed_addr constant [25 x i8] c"q1 < nfa_get_states(nfa)\00"

`define TAG_g__str7 `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g__str7_a {`TAG_g__str7, 23'b0}
// @__PRETTY_FUNCTION__.nfa_remove_transition = private unnamed_addr constant [64 x i8] c"void nfa_remove_transition(nfa_t *, state_t, state_t, symbol_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_remove_transition `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a {`TAG_g___PRETTY_FUNCTION___nfa_remove_transition, 23'b0}
// @__PRETTY_FUNCTION__.nfa_merge_states = private unnamed_addr constant [49 x i8] c"void nfa_merge_states(nfa_t *, state_t, state_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_merge_states `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g___PRETTY_FUNCTION___nfa_merge_states_a {`TAG_g___PRETTY_FUNCTION___nfa_merge_states, 23'b0}
// @.str8 = private unnamed_addr constant [25 x i8] c"q2 < nfa_get_states(nfa)\00"

`define TAG_g__str8 `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g__str8_a {`TAG_g__str8, 23'b0}
// @.str9 = private unnamed_addr constant [34 x i8] c"indices[i] < sample_buffer_length\00"

`define TAG_g__str9 `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g__str9_a {`TAG_g__str9, 23'b0}
// @__PRETTY_FUNCTION__.nfa_accept_any_sample = private unnamed_addr constant [120 x i8] c"_Bool nfa_accept_any_sample(const nfa_t *, const symbol_t *, const size_t, const size_t, const index_t *, const size_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample_a {`TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample, 23'b0}
// @__PRETTY_FUNCTION__.nfa_accept_all_samples = private unnamed_addr constant [121 x i8] c"_Bool nfa_accept_all_samples(const nfa_t *, const symbol_t *, const size_t, const size_t, const index_t *, const size_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples_a {`TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples, 23'b0}
// @__PRETTY_FUNCTION__.nfa_accept_samples = private unnamed_addr constant [115 x i8] c"int nfa_accept_samples(const nfa_t *, const symbol_t *, const size_t, const size_t, const index_t *, const size_t)\00"

`define TAG_g___PRETTY_FUNCTION___nfa_accept_samples `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_g___PRETTY_FUNCTION___nfa_accept_samples_a {`TAG_g___PRETTY_FUNCTION___nfa_accept_samples, 23'b0}
// @.str11 = private unnamed_addr constant [2 x i8] c"I\00"

`define TAG_g__str11 `MEMORY_CONTROLLER_TAG_SIZE'd25
`define TAG_g__str11_a {`TAG_g__str11, 23'b0}
// @.str12 = private unnamed_addr constant [1 x i8] zeroinitializer

`define TAG_g__str12 `MEMORY_CONTROLLER_TAG_SIZE'd26
`define TAG_g__str12_a {`TAG_g__str12, 23'b0}
// @.str13 = private unnamed_addr constant [2 x i8] c"F\00"

`define TAG_g__str13 `MEMORY_CONTROLLER_TAG_SIZE'd27
`define TAG_g__str13_a {`TAG_g__str13, 23'b0}
//   %1 = alloca i8, align 1
`define TAG_nfa_merge_states_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd28
`define TAG_nfa_merge_states_0_1_a {`TAG_nfa_merge_states_0_1, 23'b0}
//   %2 = alloca i8, align 1
`define TAG_nfa_merge_states_0_2 `MEMORY_CONTROLLER_TAG_SIZE'd29
`define TAG_nfa_merge_states_0_2_a {`TAG_nfa_merge_states_0_2, 23'b0}
//   %3 = alloca i8, align 1
`define TAG_nfa_merge_states_0_3 `MEMORY_CONTROLLER_TAG_SIZE'd30
`define TAG_nfa_merge_states_0_3_a {`TAG_nfa_merge_states_0_3, 23'b0}
//   %4 = alloca i8, align 1
`define TAG_nfa_merge_states_0_4 `MEMORY_CONTROLLER_TAG_SIZE'd31
`define TAG_nfa_merge_states_0_4_a {`TAG_nfa_merge_states_0_4, 23'b0}
//   %5 = alloca i8, align 1
`define TAG_nfa_merge_states_0_5 `MEMORY_CONTROLLER_TAG_SIZE'd32
`define TAG_nfa_merge_states_0_5_a {`TAG_nfa_merge_states_0_5, 23'b0}
//   %6 = alloca i8, align 1
`define TAG_nfa_merge_states_0_6 `MEMORY_CONTROLLER_TAG_SIZE'd33
`define TAG_nfa_merge_states_0_6_a {`TAG_nfa_merge_states_0_6, 23'b0}
//   %bs = alloca %struct._bitset_t, align 4
`define TAG_nfa_merge_states_0_bs `MEMORY_CONTROLLER_TAG_SIZE'd34
`define TAG_nfa_merge_states_0_bs_a {`TAG_nfa_merge_states_0_bs, 23'b0}
//   %i = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_i `MEMORY_CONTROLLER_TAG_SIZE'd35
`define TAG_nfa_merge_states_0_i_a {`TAG_nfa_merge_states_0_i, 23'b0}
//   %7 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_7 `MEMORY_CONTROLLER_TAG_SIZE'd36
`define TAG_nfa_merge_states_0_7_a {`TAG_nfa_merge_states_0_7, 23'b0}
//   %8 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_8 `MEMORY_CONTROLLER_TAG_SIZE'd37
`define TAG_nfa_merge_states_0_8_a {`TAG_nfa_merge_states_0_8, 23'b0}
//   %9 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_9 `MEMORY_CONTROLLER_TAG_SIZE'd38
`define TAG_nfa_merge_states_0_9_a {`TAG_nfa_merge_states_0_9, 23'b0}
//   %10 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_10 `MEMORY_CONTROLLER_TAG_SIZE'd39
`define TAG_nfa_merge_states_0_10_a {`TAG_nfa_merge_states_0_10, 23'b0}
//   %i1 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_i1 `MEMORY_CONTROLLER_TAG_SIZE'd40
`define TAG_nfa_merge_states_0_i1_a {`TAG_nfa_merge_states_0_i1, 23'b0}
//   %11 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_11 `MEMORY_CONTROLLER_TAG_SIZE'd41
`define TAG_nfa_merge_states_0_11_a {`TAG_nfa_merge_states_0_11, 23'b0}
//   %12 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_12 `MEMORY_CONTROLLER_TAG_SIZE'd42
`define TAG_nfa_merge_states_0_12_a {`TAG_nfa_merge_states_0_12, 23'b0}
//   %13 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_13 `MEMORY_CONTROLLER_TAG_SIZE'd43
`define TAG_nfa_merge_states_0_13_a {`TAG_nfa_merge_states_0_13, 23'b0}
//   %14 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_merge_states_0_14 `MEMORY_CONTROLLER_TAG_SIZE'd44
`define TAG_nfa_merge_states_0_14_a {`TAG_nfa_merge_states_0_14, 23'b0}
//   %next = alloca %struct._bitset_t, align 4
`define TAG_nfa_accept_sample_0_next `MEMORY_CONTROLLER_TAG_SIZE'd45
`define TAG_nfa_accept_sample_0_next_a {`TAG_nfa_accept_sample_0_next, 23'b0}
//   %current = alloca %struct._bitset_t, align 4
`define TAG_nfa_accept_sample_0_current `MEMORY_CONTROLLER_TAG_SIZE'd46
`define TAG_nfa_accept_sample_0_current_a {`TAG_nfa_accept_sample_0_current, 23'b0}
//   %tmp = alloca %struct._bitset_t, align 4
`define TAG_nfa_accept_sample_0_tmp `MEMORY_CONTROLLER_TAG_SIZE'd47
`define TAG_nfa_accept_sample_0_tmp_a {`TAG_nfa_accept_sample_0_tmp, 23'b0}
//   %j = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_accept_sample_0_j `MEMORY_CONTROLLER_TAG_SIZE'd48
`define TAG_nfa_accept_sample_0_j_a {`TAG_nfa_accept_sample_0_j, 23'b0}
//   %1 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_accept_sample_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd49
`define TAG_nfa_accept_sample_0_1_a {`TAG_nfa_accept_sample_0_1, 23'b0}
//   %2 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_accept_sample_0_2 `MEMORY_CONTROLLER_TAG_SIZE'd50
`define TAG_nfa_accept_sample_0_2_a {`TAG_nfa_accept_sample_0_2, 23'b0}
//   %3 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_accept_sample_0_3 `MEMORY_CONTROLLER_TAG_SIZE'd51
`define TAG_nfa_accept_sample_0_3_a {`TAG_nfa_accept_sample_0_3, 23'b0}
//   %1 = alloca i8, align 1
`define TAG_nfa_print_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd52
`define TAG_nfa_print_0_1_a {`TAG_nfa_print_0_1, 23'b0}
//   %2 = alloca i8, align 1
`define TAG_nfa_print_0_2 `MEMORY_CONTROLLER_TAG_SIZE'd53
`define TAG_nfa_print_0_2_a {`TAG_nfa_print_0_2, 23'b0}
//   %suc = alloca %struct._bitset_t, align 4
`define TAG_nfa_print_0_suc `MEMORY_CONTROLLER_TAG_SIZE'd54
`define TAG_nfa_print_0_suc_a {`TAG_nfa_print_0_suc, 23'b0}
//   %suc2 = alloca %struct._bitset_t, align 4
`define TAG_nfa_print_0_suc2 `MEMORY_CONTROLLER_TAG_SIZE'd55
`define TAG_nfa_print_0_suc2_a {`TAG_nfa_print_0_suc2, 23'b0}
//   %qt = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_print_0_qt `MEMORY_CONTROLLER_TAG_SIZE'd56
`define TAG_nfa_print_0_qt_a {`TAG_nfa_print_0_qt, 23'b0}
//   %3 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_print_0_3 `MEMORY_CONTROLLER_TAG_SIZE'd57
`define TAG_nfa_print_0_3_a {`TAG_nfa_print_0_3, 23'b0}
//   %4 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_print_0_4 `MEMORY_CONTROLLER_TAG_SIZE'd58
`define TAG_nfa_print_0_4_a {`TAG_nfa_print_0_4, 23'b0}
//   %5 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_print_0_5 `MEMORY_CONTROLLER_TAG_SIZE'd59
`define TAG_nfa_print_0_5_a {`TAG_nfa_print_0_5, 23'b0}
//   %6 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_print_0_6 `MEMORY_CONTROLLER_TAG_SIZE'd60
`define TAG_nfa_print_0_6_a {`TAG_nfa_print_0_6, 23'b0}
//   %7 = alloca %struct._bitset_iterator_t, align 1
`define TAG_nfa_print_0_7 `MEMORY_CONTROLLER_TAG_SIZE'd61
`define TAG_nfa_print_0_7_a {`TAG_nfa_print_0_7, 23'b0}
`define CPU_ACCEL_PORT 32'h01000000
`timescale 1 ns / 1 ns
module nfa_accept_sample_top
	(
		csi_clockreset_clk,
		csi_clockreset_reset,
		//Slave interface to talk to processor
		//Inputs
		avs_s1_address,
		avs_s1_read,
		avs_s1_write,
		avs_s1_writedata,
		//Outputs
		//Memory
		avs_s1_readdata,
		avm_ACCEL_readdata,
		avm_ACCEL_waitrequest,
		avm_ACCEL_address,
		avm_ACCEL_writedata,
		avm_ACCEL_write,
		avm_ACCEL_read	);

input csi_clockreset_clk;
input csi_clockreset_reset;
input [2:0]avs_s1_address;
input avs_s1_read;
input avs_s1_write;
input [31:0] avs_s1_writedata;
output reg [31:0] avs_s1_readdata;
input [127:0] avm_ACCEL_readdata;
output [127:0] avm_ACCEL_writedata;
input avm_ACCEL_waitrequest;
output wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avm_ACCEL_address;
output wire avm_ACCEL_write;
output wire avm_ACCEL_read;
wire finish;
wire [0:0] return_val_wire;
reg [0:0] return_val;
wire clk;
wire reset;
wire start;
wire memory_controller_waitrequest;
reg start_reg;
reg finish_reg;
reg done;
wire read_data_asserted_lo;
wire read_status_asserted;
reg [1:0] memory_controller_state;
localparam MEMORY_ACCESS_LATENCY = 2;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_address_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_address_reg_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_enable_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
wire [1:0] memory_controller_size_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_reg_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_reg_reg_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_from_memory_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_to_memory_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_from_memory_reg_a;
reg sdram_data_ready_a;
wire flag_to_sdram_a;
wire enable_a;
wire write_enable_a;
wire gnt_a;
//shift register to indicate whether to take data from main memory or block RAM
reg [MEMORY_ACCESS_LATENCY - 1:0] SDRAM_shiftreg_a;
reg [MEMORY_ACCESS_LATENCY - 1:0] BRAM_shiftreg_a;
reg [MEMORY_ACCESS_LATENCY - 1:0] SDRAM_shiftreg_changed_a;
reg [MEMORY_ACCESS_LATENCY - 1:0] BRAM_shiftreg_changed_a;
reg [MEMORY_ACCESS_LATENCY - 1:0] doubleSDRAM_shiftreg_a;
reg [MEMORY_ACCESS_LATENCY - 1:0] doubleSDRAM_shiftreg_changed_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_address_b;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_address_reg_b;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_enable_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
wire [1:0] memory_controller_size_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_reg_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_reg_reg_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_from_memory_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_to_memory_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_from_memory_reg_b;
reg sdram_data_ready_b;
wire flag_to_sdram_b;
wire enable_b;
wire write_enable_b;
wire gnt_b;
//shift register to indicate whether to take data from main memory or block RAM
reg [MEMORY_ACCESS_LATENCY - 1:0] SDRAM_shiftreg_b;
reg [MEMORY_ACCESS_LATENCY - 1:0] BRAM_shiftreg_b;
reg [MEMORY_ACCESS_LATENCY - 1:0] SDRAM_shiftreg_changed_b;
reg [MEMORY_ACCESS_LATENCY - 1:0] BRAM_shiftreg_changed_b;
reg [MEMORY_ACCESS_LATENCY - 1:0] doubleSDRAM_shiftreg_b;
reg [MEMORY_ACCESS_LATENCY - 1:0] doubleSDRAM_shiftreg_changed_b;
localparam stateIDLE = 2'b00;
localparam stateFIRST = 2'b01;
localparam stateSECOND = 2'b10;
reg [31:0]ARG1;
reg ARG1_ready;
reg [31:0]ARG2;
reg ARG2_ready;
reg [31:0]ARG3;
reg ARG3_ready;
wire parameter_ready;

assign parameter_ready = ARG1_ready && ARG2_ready && ARG3_ready;
assign clk = csi_clockreset_clk;
assign reset = csi_clockreset_reset;
assign avm_ACCEL_address = `CPU_ACCEL_PORT;
assign avm_ACCEL_write = (gnt_a & write_enable_a) | (gnt_b & write_enable_b) | (start | finish);
assign avm_ACCEL_read = (gnt_a & enable_a & !write_enable_a) | (gnt_b & enable_b & !write_enable_b);
//send address portion
assign avm_ACCEL_writedata[31:0] = gnt_a? memory_address_a : memory_address_b;
//send data portion
assign avm_ACCEL_writedata[95:32] = gnt_a? data_to_memory_a : data_to_memory_b;
//send size portion
assign avm_ACCEL_writedata[96] = gnt_a? (memory_controller_size_a == 2'b00) : (memory_controller_size_b == 2'b00); //8-bit
assign avm_ACCEL_writedata[97] = gnt_a? (memory_controller_size_a == 2'b01) : (memory_controller_size_b == 2'b01); //16-bit
assign avm_ACCEL_writedata[98] = gnt_a? (memory_controller_size_a == 2'b11) : (memory_controller_size_b == 2'b11); //64-bit
//send flush signal (unused for accelerator)
assign avm_ACCEL_writedata[99] = 1'b0;
//to stall processor
assign avm_ACCEL_writedata[100] = start;
//to unstall processor
assign avm_ACCEL_writedata[101] = finish;
assign avm_ACCEL_writedata[127:102] = 28'd0;
assign memory_controller_waitrequest = avm_ACCEL_waitrequest || (memory_controller_state == stateFIRST);
assign memory_controller_enable_a = enable_a && !flag_to_sdram_a;
assign memory_controller_write_enable_a = write_enable_a && !flag_to_sdram_a;
assign memory_controller_in_a = data_to_memory_a;
assign memory_controller_enable_b = enable_b && !flag_to_sdram_b;
assign memory_controller_write_enable_b = write_enable_b && !flag_to_sdram_b;
assign memory_controller_in_b = data_to_memory_b;
assign start = (avs_s1_address == 2) & (avs_s1_writedata[31:0] == 1) & (avs_s1_write == 1'b1) & parameter_ready;
assign read_data_asserted_lo = (avs_s1_address == 0) & (avs_s1_read == 1'b1) & (done == 1'b1);
assign flag_to_sdram_a = (memory_address_a[31:23] == `TAG_PROCESSOR);
assign flag_to_sdram_b = (memory_address_b[31:23] == `TAG_PROCESSOR);

always @(posedge clk)
begin
	if (start || reset)
	begin
		ARG1_ready <= 1'b0;
	end
	else if ((avs_s1_address == 3) & (avs_s1_write))
	begin
		ARG1[31:0] <= avs_s1_writedata[31:0];
		ARG1_ready <= 1'b1;
	end
end

always @(posedge clk)
begin
	if (start || reset)
	begin
		ARG2_ready <= 1'b0;
	end
	else if ((avs_s1_address == 4) & (avs_s1_write))
	begin
		ARG2[31:0] <= avs_s1_writedata[31:0];
		ARG2_ready <= 1'b1;
	end
end

always @(posedge clk)
begin
	if (start || reset)
	begin
		ARG3_ready <= 1'b0;
	end
	else if ((avs_s1_address == 5) & (avs_s1_write))
	begin
		ARG3[31:0] <= avs_s1_writedata[31:0];
		ARG3_ready <= 1'b1;
	end
end

always @(posedge clk)
begin
	start_reg <= start;
	finish_reg <= finish;
end

always @(posedge clk)
begin
	if (reset || start)
		done <= 1'b0;
	else if (finish)
		done <= 1'b1;
end

always @(posedge clk)
begin
	if (!memory_controller_waitrequest)
	begin
		memory_address_reg_a <= memory_address_a;
		memory_address_reg_b <= memory_address_b;
	end
end

always @(*)
begin
	sdram_data_ready_a <= gnt_a & !avm_ACCEL_waitrequest;
end

always @(*)
begin
	sdram_data_ready_b <= gnt_b & !avm_ACCEL_waitrequest;
end

always @(posedge clk)
begin
	SDRAM_shiftreg_changed_a <= 1'b0;
	if (!memory_controller_waitrequest)
	begin
		SDRAM_shiftreg_changed_a <= 1'b1;
		SDRAM_shiftreg_a <= SDRAM_shiftreg_a << 1;
		if (avm_ACCEL_read && gnt_a)
			SDRAM_shiftreg_a[0] <= 1'b1;
		else
			SDRAM_shiftreg_a[0] <= 1'b0;
	end
end

always @(posedge clk)
begin
	BRAM_shiftreg_changed_a <= 1'b0;
	if (!memory_controller_waitrequest)
	begin
		BRAM_shiftreg_changed_a <= 1'b1;
		BRAM_shiftreg_a <= BRAM_shiftreg_a << 1;
		if (memory_controller_enable_a && !memory_controller_write_enable_a)
			BRAM_shiftreg_a[0] <= 1'b1;
		else
			BRAM_shiftreg_a[0] <= 1'b0;
	end
end

always @(posedge clk)
begin
	doubleSDRAM_shiftreg_changed_a <= 1'b0;
	if (!memory_controller_waitrequest)
	begin
		doubleSDRAM_shiftreg_changed_a <= 1'b1;
		doubleSDRAM_shiftreg_a <= doubleSDRAM_shiftreg_a << 1;
		//this means that the first memory access was from port 1, since it's in the second state when port 2 is being used
		if (memory_controller_state == stateSECOND && gnt_b)
			doubleSDRAM_shiftreg_a[0] <= 1'b1;
		else
			doubleSDRAM_shiftreg_a[0] <= 1'b0;
	end
end

always @(posedge clk)
begin
	SDRAM_shiftreg_changed_b <= 1'b0;
	if (!memory_controller_waitrequest)
	begin
		SDRAM_shiftreg_changed_b <= 1'b1;
		SDRAM_shiftreg_b <= SDRAM_shiftreg_b << 1;
		if (avm_ACCEL_read && gnt_b)
			SDRAM_shiftreg_b[0] <= 1'b1;
		else
			SDRAM_shiftreg_b[0] <= 1'b0;
	end
end

always @(posedge clk)
begin
	BRAM_shiftreg_changed_b <= 1'b0;
	if (!memory_controller_waitrequest)
	begin
		BRAM_shiftreg_changed_b <= 1'b1;
		BRAM_shiftreg_b <= BRAM_shiftreg_b << 1;
		if (memory_controller_enable_b && !memory_controller_write_enable_b)
			BRAM_shiftreg_b[0] <= 1'b1;
		else
			BRAM_shiftreg_b[0] <= 1'b0;
	end
end

always @(posedge clk)
begin
	doubleSDRAM_shiftreg_changed_b <= 1'b0;
	if (!memory_controller_waitrequest)
	begin
		doubleSDRAM_shiftreg_changed_b <= 1'b1;
		doubleSDRAM_shiftreg_b <= doubleSDRAM_shiftreg_b << 1;
		//this means that the first memory access was from port 1, since it's in the second state when port 2 is being used
		if (memory_controller_state == stateSECOND && gnt_a)
			doubleSDRAM_shiftreg_b[0] <= 1'b1;
		else
			doubleSDRAM_shiftreg_b[0] <= 1'b0;
	end
end


always @(posedge clk)
begin
	if (sdram_data_ready_a)
		sdram_data_a <= avm_ACCEL_readdata[63:0];
end

always @(*)
begin
	data_from_memory_a = data_from_memory_reg_a;
	begin
	if (SDRAM_shiftreg_changed_a || BRAM_shiftreg_changed_a || doubleSDRAM_shiftreg_changed_a)
		if (doubleSDRAM_shiftreg_a[MEMORY_ACCESS_LATENCY - 1] == 1'b1)
			data_from_memory_a = sdram_data_reg_reg_a;
		if (SDRAM_shiftreg_a[MEMORY_ACCESS_LATENCY - 1] == 1'b1)
			data_from_memory_a = sdram_data_reg_a;
		else if (BRAM_shiftreg_a[MEMORY_ACCESS_LATENCY - 1] == 1'b1)
			data_from_memory_a = memory_controller_out_a;
	end
end

always @(posedge clk)
begin
	data_from_memory_reg_a <= data_from_memory_a;
end

always @(posedge clk)
begin
	if (!memory_controller_waitrequest)
		sdram_data_reg_a <= sdram_data_a;
end

always @(posedge clk)
begin
	if (!memory_controller_waitrequest)
		sdram_data_reg_reg_a <= sdram_data_reg_a;
end

always @(*)
begin
	if (memory_controller_waitrequest)
	begin
		memory_controller_address_a = memory_address_reg_a;
	end
	else
	begin
		memory_controller_address_a = memory_address_a;
	end
end


always @(posedge clk)
begin
	if (sdram_data_ready_b)
		sdram_data_b <= avm_ACCEL_readdata[63:0];
end

always @(*)
begin
	data_from_memory_b = data_from_memory_reg_b;
	begin
	if (SDRAM_shiftreg_changed_b || BRAM_shiftreg_changed_b || doubleSDRAM_shiftreg_changed_b)
		if (doubleSDRAM_shiftreg_b[MEMORY_ACCESS_LATENCY - 1] == 1'b1)
			data_from_memory_b = sdram_data_reg_reg_b;
		if (SDRAM_shiftreg_b[MEMORY_ACCESS_LATENCY - 1] == 1'b1)
			data_from_memory_b = sdram_data_reg_b;
		else if (BRAM_shiftreg_b[MEMORY_ACCESS_LATENCY - 1] == 1'b1)
			data_from_memory_b = memory_controller_out_b;
	end
end

always @(posedge clk)
begin
	data_from_memory_reg_b <= data_from_memory_b;
end

always @(posedge clk)
begin
	if (!memory_controller_waitrequest)
		sdram_data_reg_b <= sdram_data_b;
end

always @(posedge clk)
begin
	if (!memory_controller_waitrequest)
		sdram_data_reg_reg_b <= sdram_data_reg_b;
end

always @(*)
begin
	if (memory_controller_waitrequest)
	begin
		memory_controller_address_b = memory_address_reg_b;
	end
	else
	begin
		memory_controller_address_b = memory_address_b;
	end
end

always @(posedge clk)
begin
	if (reset) begin
		memory_controller_state <= stateIDLE;
	end else begin
		case (memory_controller_state)
			stateIDLE: begin
				if (flag_to_sdram_a && flag_to_sdram_b)
					memory_controller_state <= stateFIRST;
			end
			stateFIRST: begin
				if (!avm_ACCEL_waitrequest)
					memory_controller_state <= stateSECOND;
			end
			stateSECOND: begin
				if (!avm_ACCEL_waitrequest)
					memory_controller_state <= stateIDLE;
			end
		endcase
	end
end

always @(posedge clk)
begin
	if (finish)
		return_val <= return_val_wire;
end


always @(*)
begin
	if (read_data_asserted_lo) //to return data
		avs_s1_readdata = return_val;
	else
		avs_s1_readdata = 0;
end

round_robin_arbiter arbiter(
	.rst_an(reset),
	.clk(clk),
	.req_in({flag_to_sdram_a, flag_to_sdram_b}),
	.grant_comb({gnt_a, gnt_b}),
	.waitrequest(avm_ACCEL_waitrequest)
);

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

nfa_accept_sample nfa_accept_sample_inst(
	clk,
	1'b0,//grounding clk2x signal used for multi-pumping
	1'b0,//grounding clk1x_follower signal used for multi-pumping
	reset,
	start_reg,
	finish,
	return_val_wire,
	ARG1,
	ARG2,
	ARG3,
	enable_a,
	memory_address_a,
	write_enable_a,
	data_to_memory_a,
	memory_controller_size_a,
	data_from_memory_a,
	enable_b,
	memory_address_b,
	write_enable_b,
	data_to_memory_b,
	memory_controller_size_b,
	data_from_memory_b,
	memory_controller_waitrequest
);

always@(finish) begin
	if (finish == 1) begin
		$display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val_wire);
	end
end

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [4:0] _str_address_a;
reg [4:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [24 x i8] c"q < nfa_get_states(nfa)\00"

ram_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.wren_a( _str_write_enable_a ),
	.wren_b( _str_write_enable_b ),
	.data_a( _str_in_a ),
	.data_b( _str_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 5;
defparam _str.widthad_b = 5;
defparam _str.width_be_a = 1;
defparam _str.width_be_b = 1;
defparam _str.numwords_a = 24;
defparam _str.numwords_b = 24;
defparam _str.init_file = "_str.mif";


reg [2:0] _str1_address_a;
reg [2:0] _str1_address_b;
reg _str1_write_enable_a;
reg _str1_write_enable_b;
reg [7:0] _str1_in_a;
reg [7:0] _str1_in_b;
wire [7:0] _str1_out_a;
wire [7:0] _str1_out_b;

// @.str1 = private unnamed_addr constant [6 x i8] c"nfa.c\00"

ram_dual_port _str1 (
	.clk( clk ),
	.address_a( _str1_address_a ),
	.address_b( _str1_address_b ),
	.wren_a( _str1_write_enable_a ),
	.wren_b( _str1_write_enable_b ),
	.data_a( _str1_in_a ),
	.data_b( _str1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str1_out_a ),
	.q_b( _str1_out_b)
);
defparam _str1.width_a = 8;
defparam _str1.width_b = 8;
defparam _str1.widthad_a = 3;
defparam _str1.widthad_b = 3;
defparam _str1.width_be_a = 1;
defparam _str1.width_be_b = 1;
defparam _str1.numwords_a = 6;
defparam _str1.numwords_b = 6;
defparam _str1.init_file = "_str1.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_add_initial_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_add_initial_address_b;
reg __PRETTY_FUNCTION___nfa_add_initial_write_enable_a;
reg __PRETTY_FUNCTION___nfa_add_initial_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_add_initial_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_add_initial_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_add_initial_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_add_initial_out_b;

// @__PRETTY_FUNCTION__.nfa_add_initial = private unnamed_addr constant [39 x i8] c"void nfa_add_initial(nfa_t *, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_add_initial (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_add_initial_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_add_initial_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_add_initial_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_add_initial_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_add_initial_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_add_initial_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_add_initial_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_add_initial_out_b)
);
defparam __PRETTY_FUNCTION___nfa_add_initial.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_add_initial.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_add_initial.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_add_initial.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_add_initial.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_add_initial.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_add_initial.numwords_a = 39;
defparam __PRETTY_FUNCTION___nfa_add_initial.numwords_b = 39;
defparam __PRETTY_FUNCTION___nfa_add_initial.init_file = "__PRETTY_FUNCTION___nfa_add_initial.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_remove_initial_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_remove_initial_address_b;
reg __PRETTY_FUNCTION___nfa_remove_initial_write_enable_a;
reg __PRETTY_FUNCTION___nfa_remove_initial_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_remove_initial_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_remove_initial_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_remove_initial_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_remove_initial_out_b;

// @__PRETTY_FUNCTION__.nfa_remove_initial = private unnamed_addr constant [42 x i8] c"void nfa_remove_initial(nfa_t *, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_remove_initial (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_remove_initial_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_remove_initial_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_remove_initial_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_remove_initial_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_remove_initial_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_remove_initial_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_remove_initial_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_remove_initial_out_b)
);
defparam __PRETTY_FUNCTION___nfa_remove_initial.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_remove_initial.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_remove_initial.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_remove_initial.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_remove_initial.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_remove_initial.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_remove_initial.numwords_a = 42;
defparam __PRETTY_FUNCTION___nfa_remove_initial.numwords_b = 42;
defparam __PRETTY_FUNCTION___nfa_remove_initial.init_file = "__PRETTY_FUNCTION___nfa_remove_initial.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_is_initial_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_is_initial_address_b;
reg __PRETTY_FUNCTION___nfa_is_initial_write_enable_a;
reg __PRETTY_FUNCTION___nfa_is_initial_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_is_initial_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_is_initial_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_is_initial_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_is_initial_out_b;

// @__PRETTY_FUNCTION__.nfa_is_initial = private unnamed_addr constant [45 x i8] c"_Bool nfa_is_initial(const nfa_t *, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_is_initial (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_is_initial_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_is_initial_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_is_initial_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_is_initial_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_is_initial_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_is_initial_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_is_initial_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_is_initial_out_b)
);
defparam __PRETTY_FUNCTION___nfa_is_initial.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_is_initial.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_is_initial.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_is_initial.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_is_initial.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_is_initial.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_is_initial.numwords_a = 45;
defparam __PRETTY_FUNCTION___nfa_is_initial.numwords_b = 45;
defparam __PRETTY_FUNCTION___nfa_is_initial.init_file = "__PRETTY_FUNCTION___nfa_is_initial.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_add_final_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_add_final_address_b;
reg __PRETTY_FUNCTION___nfa_add_final_write_enable_a;
reg __PRETTY_FUNCTION___nfa_add_final_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_add_final_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_add_final_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_add_final_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_add_final_out_b;

// @__PRETTY_FUNCTION__.nfa_add_final = private unnamed_addr constant [37 x i8] c"void nfa_add_final(nfa_t *, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_add_final (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_add_final_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_add_final_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_add_final_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_add_final_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_add_final_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_add_final_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_add_final_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_add_final_out_b)
);
defparam __PRETTY_FUNCTION___nfa_add_final.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_add_final.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_add_final.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_add_final.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_add_final.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_add_final.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_add_final.numwords_a = 37;
defparam __PRETTY_FUNCTION___nfa_add_final.numwords_b = 37;
defparam __PRETTY_FUNCTION___nfa_add_final.init_file = "__PRETTY_FUNCTION___nfa_add_final.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_remove_final_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_remove_final_address_b;
reg __PRETTY_FUNCTION___nfa_remove_final_write_enable_a;
reg __PRETTY_FUNCTION___nfa_remove_final_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_remove_final_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_remove_final_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_remove_final_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_remove_final_out_b;

// @__PRETTY_FUNCTION__.nfa_remove_final = private unnamed_addr constant [40 x i8] c"void nfa_remove_final(nfa_t *, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_remove_final (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_remove_final_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_remove_final_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_remove_final_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_remove_final_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_remove_final_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_remove_final_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_remove_final_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_remove_final_out_b)
);
defparam __PRETTY_FUNCTION___nfa_remove_final.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_remove_final.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_remove_final.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_remove_final.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_remove_final.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_remove_final.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_remove_final.numwords_a = 40;
defparam __PRETTY_FUNCTION___nfa_remove_final.numwords_b = 40;
defparam __PRETTY_FUNCTION___nfa_remove_final.init_file = "__PRETTY_FUNCTION___nfa_remove_final.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_is_final_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_is_final_address_b;
reg __PRETTY_FUNCTION___nfa_is_final_write_enable_a;
reg __PRETTY_FUNCTION___nfa_is_final_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_is_final_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_is_final_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_is_final_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_is_final_out_b;

// @__PRETTY_FUNCTION__.nfa_is_final = private unnamed_addr constant [43 x i8] c"_Bool nfa_is_final(const nfa_t *, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_is_final (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_is_final_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_is_final_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_is_final_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_is_final_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_is_final_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_is_final_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_is_final_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_is_final_out_b)
);
defparam __PRETTY_FUNCTION___nfa_is_final.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_is_final.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_is_final.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_is_final.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_is_final.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_is_final.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_is_final.numwords_a = 43;
defparam __PRETTY_FUNCTION___nfa_is_final.numwords_b = 43;
defparam __PRETTY_FUNCTION___nfa_is_final.init_file = "__PRETTY_FUNCTION___nfa_is_final.mif";


reg [4:0] _str2_address_a;
reg [4:0] _str2_address_b;
reg _str2_write_enable_a;
reg _str2_write_enable_b;
reg [7:0] _str2_in_a;
reg [7:0] _str2_in_b;
wire [7:0] _str2_out_a;
wire [7:0] _str2_out_b;

// @.str2 = private unnamed_addr constant [28 x i8] c"state < nfa_get_states(nfa)\00"

ram_dual_port _str2 (
	.clk( clk ),
	.address_a( _str2_address_a ),
	.address_b( _str2_address_b ),
	.wren_a( _str2_write_enable_a ),
	.wren_b( _str2_write_enable_b ),
	.data_a( _str2_in_a ),
	.data_b( _str2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str2_out_a ),
	.q_b( _str2_out_b)
);
defparam _str2.width_a = 8;
defparam _str2.width_b = 8;
defparam _str2.widthad_a = 5;
defparam _str2.widthad_b = 5;
defparam _str2.width_be_a = 1;
defparam _str2.width_be_b = 1;
defparam _str2.numwords_a = 28;
defparam _str2.numwords_b = 28;
defparam _str2.init_file = "_str2.mif";


reg [6:0] __PRETTY_FUNCTION___nfa_get_sucessors_address_a;
reg [6:0] __PRETTY_FUNCTION___nfa_get_sucessors_address_b;
reg __PRETTY_FUNCTION___nfa_get_sucessors_write_enable_a;
reg __PRETTY_FUNCTION___nfa_get_sucessors_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_get_sucessors_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_get_sucessors_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_get_sucessors_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_get_sucessors_out_b;

// @__PRETTY_FUNCTION__.nfa_get_sucessors = private unnamed_addr constant [69 x i8] c"void nfa_get_sucessors(const nfa_t *, state_t, symbol_t, bitset_t *)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_get_sucessors (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_get_sucessors_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_get_sucessors_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_get_sucessors_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_get_sucessors_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_get_sucessors_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_get_sucessors_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_get_sucessors_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_get_sucessors_out_b)
);
defparam __PRETTY_FUNCTION___nfa_get_sucessors.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.widthad_a = 7;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.widthad_b = 7;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.numwords_a = 69;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.numwords_b = 69;
defparam __PRETTY_FUNCTION___nfa_get_sucessors.init_file = "__PRETTY_FUNCTION___nfa_get_sucessors.mif";


reg [4:0] _str3_address_a;
reg [4:0] _str3_address_b;
reg _str3_write_enable_a;
reg _str3_write_enable_b;
reg [7:0] _str3_in_a;
reg [7:0] _str3_in_b;
wire [7:0] _str3_out_a;
wire [7:0] _str3_out_b;

// @.str3 = private unnamed_addr constant [27 x i8] c"sym < nfa_get_symbols(nfa)\00"

ram_dual_port _str3 (
	.clk( clk ),
	.address_a( _str3_address_a ),
	.address_b( _str3_address_b ),
	.wren_a( _str3_write_enable_a ),
	.wren_b( _str3_write_enable_b ),
	.data_a( _str3_in_a ),
	.data_b( _str3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str3_out_a ),
	.q_b( _str3_out_b)
);
defparam _str3.width_a = 8;
defparam _str3.width_b = 8;
defparam _str3.widthad_a = 5;
defparam _str3.widthad_b = 5;
defparam _str3.width_be_a = 1;
defparam _str3.width_be_b = 1;
defparam _str3.numwords_a = 27;
defparam _str3.numwords_b = 27;
defparam _str3.init_file = "_str3.mif";


reg [6:0] __PRETTY_FUNCTION___nfa_get_predecessors_address_a;
reg [6:0] __PRETTY_FUNCTION___nfa_get_predecessors_address_b;
reg __PRETTY_FUNCTION___nfa_get_predecessors_write_enable_a;
reg __PRETTY_FUNCTION___nfa_get_predecessors_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_get_predecessors_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_get_predecessors_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_get_predecessors_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_get_predecessors_out_b;

// @__PRETTY_FUNCTION__.nfa_get_predecessors = private unnamed_addr constant [72 x i8] c"void nfa_get_predecessors(const nfa_t *, state_t, symbol_t, bitset_t *)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_get_predecessors (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_get_predecessors_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_get_predecessors_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_get_predecessors_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_get_predecessors_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_get_predecessors_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_get_predecessors_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_get_predecessors_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_get_predecessors_out_b)
);
defparam __PRETTY_FUNCTION___nfa_get_predecessors.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.widthad_a = 7;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.widthad_b = 7;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.numwords_a = 72;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.numwords_b = 72;
defparam __PRETTY_FUNCTION___nfa_get_predecessors.init_file = "__PRETTY_FUNCTION___nfa_get_predecessors.mif";


reg [4:0] _str5_address_a;
reg [4:0] _str5_address_b;
reg _str5_write_enable_a;
reg _str5_write_enable_b;
reg [7:0] _str5_in_a;
reg [7:0] _str5_in_b;
wire [7:0] _str5_out_a;
wire [7:0] _str5_out_b;

// @.str5 = private unnamed_addr constant [25 x i8] c"a < nfa_get_symbols(nfa)\00"

ram_dual_port _str5 (
	.clk( clk ),
	.address_a( _str5_address_a ),
	.address_b( _str5_address_b ),
	.wren_a( _str5_write_enable_a ),
	.wren_b( _str5_write_enable_b ),
	.data_a( _str5_in_a ),
	.data_b( _str5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str5_out_a ),
	.q_b( _str5_out_b)
);
defparam _str5.width_a = 8;
defparam _str5.width_b = 8;
defparam _str5.widthad_a = 5;
defparam _str5.widthad_b = 5;
defparam _str5.width_be_a = 1;
defparam _str5.width_be_b = 1;
defparam _str5.numwords_a = 25;
defparam _str5.numwords_b = 25;
defparam _str5.init_file = "_str5.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_add_transition_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_add_transition_address_b;
reg __PRETTY_FUNCTION___nfa_add_transition_write_enable_a;
reg __PRETTY_FUNCTION___nfa_add_transition_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_add_transition_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_add_transition_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_add_transition_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_add_transition_out_b;

// @__PRETTY_FUNCTION__.nfa_add_transition = private unnamed_addr constant [61 x i8] c"void nfa_add_transition(nfa_t *, state_t, state_t, symbol_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_add_transition (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_add_transition_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_add_transition_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_add_transition_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_add_transition_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_add_transition_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_add_transition_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_add_transition_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_add_transition_out_b)
);
defparam __PRETTY_FUNCTION___nfa_add_transition.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_add_transition.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_add_transition.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_add_transition.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_add_transition.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_add_transition.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_add_transition.numwords_a = 61;
defparam __PRETTY_FUNCTION___nfa_add_transition.numwords_b = 61;
defparam __PRETTY_FUNCTION___nfa_add_transition.init_file = "__PRETTY_FUNCTION___nfa_add_transition.mif";


reg [4:0] _str6_address_a;
reg [4:0] _str6_address_b;
reg _str6_write_enable_a;
reg _str6_write_enable_b;
reg [7:0] _str6_in_a;
reg [7:0] _str6_in_b;
wire [7:0] _str6_out_a;
wire [7:0] _str6_out_b;

// @.str6 = private unnamed_addr constant [25 x i8] c"q0 < nfa_get_states(nfa)\00"

ram_dual_port _str6 (
	.clk( clk ),
	.address_a( _str6_address_a ),
	.address_b( _str6_address_b ),
	.wren_a( _str6_write_enable_a ),
	.wren_b( _str6_write_enable_b ),
	.data_a( _str6_in_a ),
	.data_b( _str6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str6_out_a ),
	.q_b( _str6_out_b)
);
defparam _str6.width_a = 8;
defparam _str6.width_b = 8;
defparam _str6.widthad_a = 5;
defparam _str6.widthad_b = 5;
defparam _str6.width_be_a = 1;
defparam _str6.width_be_b = 1;
defparam _str6.numwords_a = 25;
defparam _str6.numwords_b = 25;
defparam _str6.init_file = "_str6.mif";


reg [4:0] _str7_address_a;
reg [4:0] _str7_address_b;
reg _str7_write_enable_a;
reg _str7_write_enable_b;
reg [7:0] _str7_in_a;
reg [7:0] _str7_in_b;
wire [7:0] _str7_out_a;
wire [7:0] _str7_out_b;

// @.str7 = private unnamed_addr constant [25 x i8] c"q1 < nfa_get_states(nfa)\00"

ram_dual_port _str7 (
	.clk( clk ),
	.address_a( _str7_address_a ),
	.address_b( _str7_address_b ),
	.wren_a( _str7_write_enable_a ),
	.wren_b( _str7_write_enable_b ),
	.data_a( _str7_in_a ),
	.data_b( _str7_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str7_out_a ),
	.q_b( _str7_out_b)
);
defparam _str7.width_a = 8;
defparam _str7.width_b = 8;
defparam _str7.widthad_a = 5;
defparam _str7.widthad_b = 5;
defparam _str7.width_be_a = 1;
defparam _str7.width_be_b = 1;
defparam _str7.numwords_a = 25;
defparam _str7.numwords_b = 25;
defparam _str7.init_file = "_str7.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_remove_transition_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_remove_transition_address_b;
reg __PRETTY_FUNCTION___nfa_remove_transition_write_enable_a;
reg __PRETTY_FUNCTION___nfa_remove_transition_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_remove_transition_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_remove_transition_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_remove_transition_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_remove_transition_out_b;

// @__PRETTY_FUNCTION__.nfa_remove_transition = private unnamed_addr constant [64 x i8] c"void nfa_remove_transition(nfa_t *, state_t, state_t, symbol_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_remove_transition (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_remove_transition_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_remove_transition_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_remove_transition_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_remove_transition_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_remove_transition_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_remove_transition_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_remove_transition_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_remove_transition_out_b)
);
defparam __PRETTY_FUNCTION___nfa_remove_transition.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_remove_transition.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_remove_transition.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_remove_transition.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_remove_transition.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_remove_transition.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_remove_transition.numwords_a = 64;
defparam __PRETTY_FUNCTION___nfa_remove_transition.numwords_b = 64;
defparam __PRETTY_FUNCTION___nfa_remove_transition.init_file = "__PRETTY_FUNCTION___nfa_remove_transition.mif";


reg [5:0] __PRETTY_FUNCTION___nfa_merge_states_address_a;
reg [5:0] __PRETTY_FUNCTION___nfa_merge_states_address_b;
reg __PRETTY_FUNCTION___nfa_merge_states_write_enable_a;
reg __PRETTY_FUNCTION___nfa_merge_states_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_merge_states_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_merge_states_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_merge_states_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_merge_states_out_b;

// @__PRETTY_FUNCTION__.nfa_merge_states = private unnamed_addr constant [49 x i8] c"void nfa_merge_states(nfa_t *, state_t, state_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_merge_states (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_merge_states_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_merge_states_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_merge_states_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_merge_states_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_merge_states_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_merge_states_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_merge_states_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_merge_states_out_b)
);
defparam __PRETTY_FUNCTION___nfa_merge_states.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_merge_states.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_merge_states.widthad_a = 6;
defparam __PRETTY_FUNCTION___nfa_merge_states.widthad_b = 6;
defparam __PRETTY_FUNCTION___nfa_merge_states.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_merge_states.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_merge_states.numwords_a = 49;
defparam __PRETTY_FUNCTION___nfa_merge_states.numwords_b = 49;
defparam __PRETTY_FUNCTION___nfa_merge_states.init_file = "__PRETTY_FUNCTION___nfa_merge_states.mif";


reg [4:0] _str8_address_a;
reg [4:0] _str8_address_b;
reg _str8_write_enable_a;
reg _str8_write_enable_b;
reg [7:0] _str8_in_a;
reg [7:0] _str8_in_b;
wire [7:0] _str8_out_a;
wire [7:0] _str8_out_b;

// @.str8 = private unnamed_addr constant [25 x i8] c"q2 < nfa_get_states(nfa)\00"

ram_dual_port _str8 (
	.clk( clk ),
	.address_a( _str8_address_a ),
	.address_b( _str8_address_b ),
	.wren_a( _str8_write_enable_a ),
	.wren_b( _str8_write_enable_b ),
	.data_a( _str8_in_a ),
	.data_b( _str8_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str8_out_a ),
	.q_b( _str8_out_b)
);
defparam _str8.width_a = 8;
defparam _str8.width_b = 8;
defparam _str8.widthad_a = 5;
defparam _str8.widthad_b = 5;
defparam _str8.width_be_a = 1;
defparam _str8.width_be_b = 1;
defparam _str8.numwords_a = 25;
defparam _str8.numwords_b = 25;
defparam _str8.init_file = "_str8.mif";


reg [5:0] _str9_address_a;
reg [5:0] _str9_address_b;
reg _str9_write_enable_a;
reg _str9_write_enable_b;
reg [7:0] _str9_in_a;
reg [7:0] _str9_in_b;
wire [7:0] _str9_out_a;
wire [7:0] _str9_out_b;

// @.str9 = private unnamed_addr constant [34 x i8] c"indices[i] < sample_buffer_length\00"

ram_dual_port _str9 (
	.clk( clk ),
	.address_a( _str9_address_a ),
	.address_b( _str9_address_b ),
	.wren_a( _str9_write_enable_a ),
	.wren_b( _str9_write_enable_b ),
	.data_a( _str9_in_a ),
	.data_b( _str9_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str9_out_a ),
	.q_b( _str9_out_b)
);
defparam _str9.width_a = 8;
defparam _str9.width_b = 8;
defparam _str9.widthad_a = 6;
defparam _str9.widthad_b = 6;
defparam _str9.width_be_a = 1;
defparam _str9.width_be_b = 1;
defparam _str9.numwords_a = 34;
defparam _str9.numwords_b = 34;
defparam _str9.init_file = "_str9.mif";


reg [6:0] __PRETTY_FUNCTION___nfa_accept_any_sample_address_a;
reg [6:0] __PRETTY_FUNCTION___nfa_accept_any_sample_address_b;
reg __PRETTY_FUNCTION___nfa_accept_any_sample_write_enable_a;
reg __PRETTY_FUNCTION___nfa_accept_any_sample_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_accept_any_sample_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_accept_any_sample_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_accept_any_sample_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_accept_any_sample_out_b;

// @__PRETTY_FUNCTION__.nfa_accept_any_sample = private unnamed_addr constant [120 x i8] c"_Bool nfa_accept_any_sample(const nfa_t *, const symbol_t *, const size_t, const size_t, const index_t *, const size_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_accept_any_sample (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_accept_any_sample_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_accept_any_sample_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_accept_any_sample_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_accept_any_sample_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_accept_any_sample_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_accept_any_sample_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_accept_any_sample_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_accept_any_sample_out_b)
);
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.widthad_a = 7;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.widthad_b = 7;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.numwords_a = 120;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.numwords_b = 120;
defparam __PRETTY_FUNCTION___nfa_accept_any_sample.init_file = "__PRETTY_FUNCTION___nfa_accept_any_sample.mif";


reg [6:0] __PRETTY_FUNCTION___nfa_accept_all_samples_address_a;
reg [6:0] __PRETTY_FUNCTION___nfa_accept_all_samples_address_b;
reg __PRETTY_FUNCTION___nfa_accept_all_samples_write_enable_a;
reg __PRETTY_FUNCTION___nfa_accept_all_samples_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_accept_all_samples_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_accept_all_samples_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_accept_all_samples_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_accept_all_samples_out_b;

// @__PRETTY_FUNCTION__.nfa_accept_all_samples = private unnamed_addr constant [121 x i8] c"_Bool nfa_accept_all_samples(const nfa_t *, const symbol_t *, const size_t, const size_t, const index_t *, const size_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_accept_all_samples (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_accept_all_samples_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_accept_all_samples_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_accept_all_samples_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_accept_all_samples_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_accept_all_samples_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_accept_all_samples_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_accept_all_samples_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_accept_all_samples_out_b)
);
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.widthad_a = 7;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.widthad_b = 7;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.numwords_a = 121;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.numwords_b = 121;
defparam __PRETTY_FUNCTION___nfa_accept_all_samples.init_file = "__PRETTY_FUNCTION___nfa_accept_all_samples.mif";


reg [6:0] __PRETTY_FUNCTION___nfa_accept_samples_address_a;
reg [6:0] __PRETTY_FUNCTION___nfa_accept_samples_address_b;
reg __PRETTY_FUNCTION___nfa_accept_samples_write_enable_a;
reg __PRETTY_FUNCTION___nfa_accept_samples_write_enable_b;
reg [7:0] __PRETTY_FUNCTION___nfa_accept_samples_in_a;
reg [7:0] __PRETTY_FUNCTION___nfa_accept_samples_in_b;
wire [7:0] __PRETTY_FUNCTION___nfa_accept_samples_out_a;
wire [7:0] __PRETTY_FUNCTION___nfa_accept_samples_out_b;

// @__PRETTY_FUNCTION__.nfa_accept_samples = private unnamed_addr constant [115 x i8] c"int nfa_accept_samples(const nfa_t *, const symbol_t *, const size_t, const size_t, const index_t *, const size_t)\00"

ram_dual_port __PRETTY_FUNCTION___nfa_accept_samples (
	.clk( clk ),
	.address_a( __PRETTY_FUNCTION___nfa_accept_samples_address_a ),
	.address_b( __PRETTY_FUNCTION___nfa_accept_samples_address_b ),
	.wren_a( __PRETTY_FUNCTION___nfa_accept_samples_write_enable_a ),
	.wren_b( __PRETTY_FUNCTION___nfa_accept_samples_write_enable_b ),
	.data_a( __PRETTY_FUNCTION___nfa_accept_samples_in_a ),
	.data_b( __PRETTY_FUNCTION___nfa_accept_samples_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( __PRETTY_FUNCTION___nfa_accept_samples_out_a ),
	.q_b( __PRETTY_FUNCTION___nfa_accept_samples_out_b)
);
defparam __PRETTY_FUNCTION___nfa_accept_samples.width_a = 8;
defparam __PRETTY_FUNCTION___nfa_accept_samples.width_b = 8;
defparam __PRETTY_FUNCTION___nfa_accept_samples.widthad_a = 7;
defparam __PRETTY_FUNCTION___nfa_accept_samples.widthad_b = 7;
defparam __PRETTY_FUNCTION___nfa_accept_samples.width_be_a = 1;
defparam __PRETTY_FUNCTION___nfa_accept_samples.width_be_b = 1;
defparam __PRETTY_FUNCTION___nfa_accept_samples.numwords_a = 115;
defparam __PRETTY_FUNCTION___nfa_accept_samples.numwords_b = 115;
defparam __PRETTY_FUNCTION___nfa_accept_samples.init_file = "__PRETTY_FUNCTION___nfa_accept_samples.mif";


reg [0:0] _str11_address_a;
reg [0:0] _str11_address_b;
reg _str11_write_enable_a;
reg _str11_write_enable_b;
reg [7:0] _str11_in_a;
reg [7:0] _str11_in_b;
wire [7:0] _str11_out_a;
wire [7:0] _str11_out_b;

// @.str11 = private unnamed_addr constant [2 x i8] c"I\00"

ram_dual_port _str11 (
	.clk( clk ),
	.address_a( _str11_address_a ),
	.address_b( _str11_address_b ),
	.wren_a( _str11_write_enable_a ),
	.wren_b( _str11_write_enable_b ),
	.data_a( _str11_in_a ),
	.data_b( _str11_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str11_out_a ),
	.q_b( _str11_out_b)
);
defparam _str11.width_a = 8;
defparam _str11.width_b = 8;
defparam _str11.widthad_a = 1;
defparam _str11.widthad_b = 1;
defparam _str11.width_be_a = 1;
defparam _str11.width_be_b = 1;
defparam _str11.numwords_a = 2;
defparam _str11.numwords_b = 2;
defparam _str11.init_file = "_str11.mif";


reg [0:0] _str12_address_a;
reg [0:0] _str12_address_b;
reg _str12_write_enable_a;
reg _str12_write_enable_b;
reg [7:0] _str12_in_a;
reg [7:0] _str12_in_b;
wire [7:0] _str12_out_a;
wire [7:0] _str12_out_b;

// @.str12 = private unnamed_addr constant [1 x i8] zeroinitializer

ram_dual_port _str12 (
	.clk( clk ),
	.address_a( _str12_address_a ),
	.address_b( _str12_address_b ),
	.wren_a( _str12_write_enable_a ),
	.wren_b( _str12_write_enable_b ),
	.data_a( _str12_in_a ),
	.data_b( _str12_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str12_out_a ),
	.q_b( _str12_out_b)
);
defparam _str12.width_a = 8;
defparam _str12.width_b = 8;
defparam _str12.widthad_a = 1;
defparam _str12.widthad_b = 1;
defparam _str12.width_be_a = 1;
defparam _str12.width_be_b = 1;
defparam _str12.numwords_a = 1;
defparam _str12.numwords_b = 1;
defparam _str12.init_file = "_str12.mif";


reg [0:0] _str13_address_a;
reg [0:0] _str13_address_b;
reg _str13_write_enable_a;
reg _str13_write_enable_b;
reg [7:0] _str13_in_a;
reg [7:0] _str13_in_b;
wire [7:0] _str13_out_a;
wire [7:0] _str13_out_b;

// @.str13 = private unnamed_addr constant [2 x i8] c"F\00"

ram_dual_port _str13 (
	.clk( clk ),
	.address_a( _str13_address_a ),
	.address_b( _str13_address_b ),
	.wren_a( _str13_write_enable_a ),
	.wren_b( _str13_write_enable_b ),
	.data_a( _str13_in_a ),
	.data_b( _str13_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str13_out_a ),
	.q_b( _str13_out_b)
);
defparam _str13.width_a = 8;
defparam _str13.width_b = 8;
defparam _str13.widthad_a = 1;
defparam _str13.widthad_b = 1;
defparam _str13.width_be_a = 1;
defparam _str13.width_be_b = 1;
defparam _str13.numwords_a = 2;
defparam _str13.numwords_b = 2;
defparam _str13.init_file = "_str13.mif";


reg [0:0] nfa_merge_states_0_1_address_a;
reg [0:0] nfa_merge_states_0_1_address_b;
reg nfa_merge_states_0_1_write_enable_a;
reg nfa_merge_states_0_1_write_enable_b;
reg [7:0] nfa_merge_states_0_1_in_a;
reg [7:0] nfa_merge_states_0_1_in_b;
wire [7:0] nfa_merge_states_0_1_out_a;
wire [7:0] nfa_merge_states_0_1_out_b;

//   %1 = alloca i8, align 1
ram_dual_port nfa_merge_states_0_1 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_1_address_a ),
	.address_b( nfa_merge_states_0_1_address_b ),
	.wren_a( nfa_merge_states_0_1_write_enable_a ),
	.wren_b( nfa_merge_states_0_1_write_enable_b ),
	.data_a( nfa_merge_states_0_1_in_a ),
	.data_b( nfa_merge_states_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_merge_states_0_1_out_a ),
	.q_b( nfa_merge_states_0_1_out_b)
);
defparam nfa_merge_states_0_1.width_a = 8;
defparam nfa_merge_states_0_1.width_b = 8;
defparam nfa_merge_states_0_1.widthad_a = 1;
defparam nfa_merge_states_0_1.widthad_b = 1;
defparam nfa_merge_states_0_1.width_be_a = 1;
defparam nfa_merge_states_0_1.width_be_b = 1;
defparam nfa_merge_states_0_1.numwords_a = 1;
defparam nfa_merge_states_0_1.numwords_b = 1;


reg [0:0] nfa_merge_states_0_2_address_a;
reg [0:0] nfa_merge_states_0_2_address_b;
reg nfa_merge_states_0_2_write_enable_a;
reg nfa_merge_states_0_2_write_enable_b;
reg [7:0] nfa_merge_states_0_2_in_a;
reg [7:0] nfa_merge_states_0_2_in_b;
wire [7:0] nfa_merge_states_0_2_out_a;
wire [7:0] nfa_merge_states_0_2_out_b;

//   %2 = alloca i8, align 1
ram_dual_port nfa_merge_states_0_2 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_2_address_a ),
	.address_b( nfa_merge_states_0_2_address_b ),
	.wren_a( nfa_merge_states_0_2_write_enable_a ),
	.wren_b( nfa_merge_states_0_2_write_enable_b ),
	.data_a( nfa_merge_states_0_2_in_a ),
	.data_b( nfa_merge_states_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_merge_states_0_2_out_a ),
	.q_b( nfa_merge_states_0_2_out_b)
);
defparam nfa_merge_states_0_2.width_a = 8;
defparam nfa_merge_states_0_2.width_b = 8;
defparam nfa_merge_states_0_2.widthad_a = 1;
defparam nfa_merge_states_0_2.widthad_b = 1;
defparam nfa_merge_states_0_2.width_be_a = 1;
defparam nfa_merge_states_0_2.width_be_b = 1;
defparam nfa_merge_states_0_2.numwords_a = 1;
defparam nfa_merge_states_0_2.numwords_b = 1;


reg [0:0] nfa_merge_states_0_3_address_a;
reg [0:0] nfa_merge_states_0_3_address_b;
reg nfa_merge_states_0_3_write_enable_a;
reg nfa_merge_states_0_3_write_enable_b;
reg [7:0] nfa_merge_states_0_3_in_a;
reg [7:0] nfa_merge_states_0_3_in_b;
wire [7:0] nfa_merge_states_0_3_out_a;
wire [7:0] nfa_merge_states_0_3_out_b;

//   %3 = alloca i8, align 1
ram_dual_port nfa_merge_states_0_3 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_3_address_a ),
	.address_b( nfa_merge_states_0_3_address_b ),
	.wren_a( nfa_merge_states_0_3_write_enable_a ),
	.wren_b( nfa_merge_states_0_3_write_enable_b ),
	.data_a( nfa_merge_states_0_3_in_a ),
	.data_b( nfa_merge_states_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_merge_states_0_3_out_a ),
	.q_b( nfa_merge_states_0_3_out_b)
);
defparam nfa_merge_states_0_3.width_a = 8;
defparam nfa_merge_states_0_3.width_b = 8;
defparam nfa_merge_states_0_3.widthad_a = 1;
defparam nfa_merge_states_0_3.widthad_b = 1;
defparam nfa_merge_states_0_3.width_be_a = 1;
defparam nfa_merge_states_0_3.width_be_b = 1;
defparam nfa_merge_states_0_3.numwords_a = 1;
defparam nfa_merge_states_0_3.numwords_b = 1;


reg [0:0] nfa_merge_states_0_4_address_a;
reg [0:0] nfa_merge_states_0_4_address_b;
reg nfa_merge_states_0_4_write_enable_a;
reg nfa_merge_states_0_4_write_enable_b;
reg [7:0] nfa_merge_states_0_4_in_a;
reg [7:0] nfa_merge_states_0_4_in_b;
wire [7:0] nfa_merge_states_0_4_out_a;
wire [7:0] nfa_merge_states_0_4_out_b;

//   %4 = alloca i8, align 1
ram_dual_port nfa_merge_states_0_4 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_4_address_a ),
	.address_b( nfa_merge_states_0_4_address_b ),
	.wren_a( nfa_merge_states_0_4_write_enable_a ),
	.wren_b( nfa_merge_states_0_4_write_enable_b ),
	.data_a( nfa_merge_states_0_4_in_a ),
	.data_b( nfa_merge_states_0_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_merge_states_0_4_out_a ),
	.q_b( nfa_merge_states_0_4_out_b)
);
defparam nfa_merge_states_0_4.width_a = 8;
defparam nfa_merge_states_0_4.width_b = 8;
defparam nfa_merge_states_0_4.widthad_a = 1;
defparam nfa_merge_states_0_4.widthad_b = 1;
defparam nfa_merge_states_0_4.width_be_a = 1;
defparam nfa_merge_states_0_4.width_be_b = 1;
defparam nfa_merge_states_0_4.numwords_a = 1;
defparam nfa_merge_states_0_4.numwords_b = 1;


reg [0:0] nfa_merge_states_0_5_address_a;
reg [0:0] nfa_merge_states_0_5_address_b;
reg nfa_merge_states_0_5_write_enable_a;
reg nfa_merge_states_0_5_write_enable_b;
reg [7:0] nfa_merge_states_0_5_in_a;
reg [7:0] nfa_merge_states_0_5_in_b;
wire [7:0] nfa_merge_states_0_5_out_a;
wire [7:0] nfa_merge_states_0_5_out_b;

//   %5 = alloca i8, align 1
ram_dual_port nfa_merge_states_0_5 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_5_address_a ),
	.address_b( nfa_merge_states_0_5_address_b ),
	.wren_a( nfa_merge_states_0_5_write_enable_a ),
	.wren_b( nfa_merge_states_0_5_write_enable_b ),
	.data_a( nfa_merge_states_0_5_in_a ),
	.data_b( nfa_merge_states_0_5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_merge_states_0_5_out_a ),
	.q_b( nfa_merge_states_0_5_out_b)
);
defparam nfa_merge_states_0_5.width_a = 8;
defparam nfa_merge_states_0_5.width_b = 8;
defparam nfa_merge_states_0_5.widthad_a = 1;
defparam nfa_merge_states_0_5.widthad_b = 1;
defparam nfa_merge_states_0_5.width_be_a = 1;
defparam nfa_merge_states_0_5.width_be_b = 1;
defparam nfa_merge_states_0_5.numwords_a = 1;
defparam nfa_merge_states_0_5.numwords_b = 1;


reg [0:0] nfa_merge_states_0_6_address_a;
reg [0:0] nfa_merge_states_0_6_address_b;
reg nfa_merge_states_0_6_write_enable_a;
reg nfa_merge_states_0_6_write_enable_b;
reg [7:0] nfa_merge_states_0_6_in_a;
reg [7:0] nfa_merge_states_0_6_in_b;
wire [7:0] nfa_merge_states_0_6_out_a;
wire [7:0] nfa_merge_states_0_6_out_b;

//   %6 = alloca i8, align 1
ram_dual_port nfa_merge_states_0_6 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_6_address_a ),
	.address_b( nfa_merge_states_0_6_address_b ),
	.wren_a( nfa_merge_states_0_6_write_enable_a ),
	.wren_b( nfa_merge_states_0_6_write_enable_b ),
	.data_a( nfa_merge_states_0_6_in_a ),
	.data_b( nfa_merge_states_0_6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_merge_states_0_6_out_a ),
	.q_b( nfa_merge_states_0_6_out_b)
);
defparam nfa_merge_states_0_6.width_a = 8;
defparam nfa_merge_states_0_6.width_b = 8;
defparam nfa_merge_states_0_6.widthad_a = 1;
defparam nfa_merge_states_0_6.widthad_b = 1;
defparam nfa_merge_states_0_6.width_be_a = 1;
defparam nfa_merge_states_0_6.width_be_b = 1;
defparam nfa_merge_states_0_6.numwords_a = 1;
defparam nfa_merge_states_0_6.numwords_b = 1;


reg [0:0] nfa_merge_states_0_bs_address_a;
reg [0:0] nfa_merge_states_0_bs_address_b;
reg nfa_merge_states_0_bs_write_enable_a;
reg nfa_merge_states_0_bs_write_enable_b;
reg [63:0] nfa_merge_states_0_bs_in_a;
reg [63:0] nfa_merge_states_0_bs_in_b;
wire [63:0] nfa_merge_states_0_bs_out_a;
wire [63:0] nfa_merge_states_0_bs_out_b;
reg [8-1:0] nfa_merge_states_0_bs_byteena_a;
reg [8-1:0] nfa_merge_states_0_bs_byteena_b;

//   %bs = alloca %struct._bitset_t, align 4
ram_dual_port nfa_merge_states_0_bs (
	.clk( clk ),
	.address_a( nfa_merge_states_0_bs_address_a ),
	.address_b( nfa_merge_states_0_bs_address_b ),
	.wren_a( nfa_merge_states_0_bs_write_enable_a ),
	.wren_b( nfa_merge_states_0_bs_write_enable_b ),
	.data_a( nfa_merge_states_0_bs_in_a ),
	.data_b( nfa_merge_states_0_bs_in_b ),
	.byteena_a( nfa_merge_states_0_bs_byteena_a ),
	.byteena_b( nfa_merge_states_0_bs_byteena_b ),
	.q_a( nfa_merge_states_0_bs_out_a ),
	.q_b( nfa_merge_states_0_bs_out_b)
);
defparam nfa_merge_states_0_bs.width_a = 64;
defparam nfa_merge_states_0_bs.width_b = 64;
defparam nfa_merge_states_0_bs.widthad_a = 1;
defparam nfa_merge_states_0_bs.widthad_b = 1;
defparam nfa_merge_states_0_bs.width_be_a = 8;
defparam nfa_merge_states_0_bs.width_be_b = 8;
defparam nfa_merge_states_0_bs.numwords_a = 2;
defparam nfa_merge_states_0_bs.numwords_b = 2;


reg [0:0] nfa_merge_states_0_i_address_a;
reg [0:0] nfa_merge_states_0_i_address_b;
reg nfa_merge_states_0_i_write_enable_a;
reg nfa_merge_states_0_i_write_enable_b;
reg [63:0] nfa_merge_states_0_i_in_a;
reg [63:0] nfa_merge_states_0_i_in_b;
wire [63:0] nfa_merge_states_0_i_out_a;
wire [63:0] nfa_merge_states_0_i_out_b;
reg [8-1:0] nfa_merge_states_0_i_byteena_a;
reg [8-1:0] nfa_merge_states_0_i_byteena_b;

//   %i = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_i (
	.clk( clk ),
	.address_a( nfa_merge_states_0_i_address_a ),
	.address_b( nfa_merge_states_0_i_address_b ),
	.wren_a( nfa_merge_states_0_i_write_enable_a ),
	.wren_b( nfa_merge_states_0_i_write_enable_b ),
	.data_a( nfa_merge_states_0_i_in_a ),
	.data_b( nfa_merge_states_0_i_in_b ),
	.byteena_a( nfa_merge_states_0_i_byteena_a ),
	.byteena_b( nfa_merge_states_0_i_byteena_b ),
	.q_a( nfa_merge_states_0_i_out_a ),
	.q_b( nfa_merge_states_0_i_out_b)
);
defparam nfa_merge_states_0_i.width_a = 64;
defparam nfa_merge_states_0_i.width_b = 64;
defparam nfa_merge_states_0_i.widthad_a = 1;
defparam nfa_merge_states_0_i.widthad_b = 1;
defparam nfa_merge_states_0_i.width_be_a = 8;
defparam nfa_merge_states_0_i.width_be_b = 8;
defparam nfa_merge_states_0_i.numwords_a = 1;
defparam nfa_merge_states_0_i.numwords_b = 1;


reg [0:0] nfa_merge_states_0_7_address_a;
reg [0:0] nfa_merge_states_0_7_address_b;
reg nfa_merge_states_0_7_write_enable_a;
reg nfa_merge_states_0_7_write_enable_b;
reg [63:0] nfa_merge_states_0_7_in_a;
reg [63:0] nfa_merge_states_0_7_in_b;
wire [63:0] nfa_merge_states_0_7_out_a;
wire [63:0] nfa_merge_states_0_7_out_b;
reg [8-1:0] nfa_merge_states_0_7_byteena_a;
reg [8-1:0] nfa_merge_states_0_7_byteena_b;

//   %7 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_7 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_7_address_a ),
	.address_b( nfa_merge_states_0_7_address_b ),
	.wren_a( nfa_merge_states_0_7_write_enable_a ),
	.wren_b( nfa_merge_states_0_7_write_enable_b ),
	.data_a( nfa_merge_states_0_7_in_a ),
	.data_b( nfa_merge_states_0_7_in_b ),
	.byteena_a( nfa_merge_states_0_7_byteena_a ),
	.byteena_b( nfa_merge_states_0_7_byteena_b ),
	.q_a( nfa_merge_states_0_7_out_a ),
	.q_b( nfa_merge_states_0_7_out_b)
);
defparam nfa_merge_states_0_7.width_a = 64;
defparam nfa_merge_states_0_7.width_b = 64;
defparam nfa_merge_states_0_7.widthad_a = 1;
defparam nfa_merge_states_0_7.widthad_b = 1;
defparam nfa_merge_states_0_7.width_be_a = 8;
defparam nfa_merge_states_0_7.width_be_b = 8;
defparam nfa_merge_states_0_7.numwords_a = 1;
defparam nfa_merge_states_0_7.numwords_b = 1;


reg [0:0] nfa_merge_states_0_8_address_a;
reg [0:0] nfa_merge_states_0_8_address_b;
reg nfa_merge_states_0_8_write_enable_a;
reg nfa_merge_states_0_8_write_enable_b;
reg [63:0] nfa_merge_states_0_8_in_a;
reg [63:0] nfa_merge_states_0_8_in_b;
wire [63:0] nfa_merge_states_0_8_out_a;
wire [63:0] nfa_merge_states_0_8_out_b;
reg [8-1:0] nfa_merge_states_0_8_byteena_a;
reg [8-1:0] nfa_merge_states_0_8_byteena_b;

//   %8 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_8 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_8_address_a ),
	.address_b( nfa_merge_states_0_8_address_b ),
	.wren_a( nfa_merge_states_0_8_write_enable_a ),
	.wren_b( nfa_merge_states_0_8_write_enable_b ),
	.data_a( nfa_merge_states_0_8_in_a ),
	.data_b( nfa_merge_states_0_8_in_b ),
	.byteena_a( nfa_merge_states_0_8_byteena_a ),
	.byteena_b( nfa_merge_states_0_8_byteena_b ),
	.q_a( nfa_merge_states_0_8_out_a ),
	.q_b( nfa_merge_states_0_8_out_b)
);
defparam nfa_merge_states_0_8.width_a = 64;
defparam nfa_merge_states_0_8.width_b = 64;
defparam nfa_merge_states_0_8.widthad_a = 1;
defparam nfa_merge_states_0_8.widthad_b = 1;
defparam nfa_merge_states_0_8.width_be_a = 8;
defparam nfa_merge_states_0_8.width_be_b = 8;
defparam nfa_merge_states_0_8.numwords_a = 1;
defparam nfa_merge_states_0_8.numwords_b = 1;


reg [0:0] nfa_merge_states_0_9_address_a;
reg [0:0] nfa_merge_states_0_9_address_b;
reg nfa_merge_states_0_9_write_enable_a;
reg nfa_merge_states_0_9_write_enable_b;
reg [63:0] nfa_merge_states_0_9_in_a;
reg [63:0] nfa_merge_states_0_9_in_b;
wire [63:0] nfa_merge_states_0_9_out_a;
wire [63:0] nfa_merge_states_0_9_out_b;
reg [8-1:0] nfa_merge_states_0_9_byteena_a;
reg [8-1:0] nfa_merge_states_0_9_byteena_b;

//   %9 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_9 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_9_address_a ),
	.address_b( nfa_merge_states_0_9_address_b ),
	.wren_a( nfa_merge_states_0_9_write_enable_a ),
	.wren_b( nfa_merge_states_0_9_write_enable_b ),
	.data_a( nfa_merge_states_0_9_in_a ),
	.data_b( nfa_merge_states_0_9_in_b ),
	.byteena_a( nfa_merge_states_0_9_byteena_a ),
	.byteena_b( nfa_merge_states_0_9_byteena_b ),
	.q_a( nfa_merge_states_0_9_out_a ),
	.q_b( nfa_merge_states_0_9_out_b)
);
defparam nfa_merge_states_0_9.width_a = 64;
defparam nfa_merge_states_0_9.width_b = 64;
defparam nfa_merge_states_0_9.widthad_a = 1;
defparam nfa_merge_states_0_9.widthad_b = 1;
defparam nfa_merge_states_0_9.width_be_a = 8;
defparam nfa_merge_states_0_9.width_be_b = 8;
defparam nfa_merge_states_0_9.numwords_a = 1;
defparam nfa_merge_states_0_9.numwords_b = 1;


reg [0:0] nfa_merge_states_0_10_address_a;
reg [0:0] nfa_merge_states_0_10_address_b;
reg nfa_merge_states_0_10_write_enable_a;
reg nfa_merge_states_0_10_write_enable_b;
reg [63:0] nfa_merge_states_0_10_in_a;
reg [63:0] nfa_merge_states_0_10_in_b;
wire [63:0] nfa_merge_states_0_10_out_a;
wire [63:0] nfa_merge_states_0_10_out_b;
reg [8-1:0] nfa_merge_states_0_10_byteena_a;
reg [8-1:0] nfa_merge_states_0_10_byteena_b;

//   %10 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_10 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_10_address_a ),
	.address_b( nfa_merge_states_0_10_address_b ),
	.wren_a( nfa_merge_states_0_10_write_enable_a ),
	.wren_b( nfa_merge_states_0_10_write_enable_b ),
	.data_a( nfa_merge_states_0_10_in_a ),
	.data_b( nfa_merge_states_0_10_in_b ),
	.byteena_a( nfa_merge_states_0_10_byteena_a ),
	.byteena_b( nfa_merge_states_0_10_byteena_b ),
	.q_a( nfa_merge_states_0_10_out_a ),
	.q_b( nfa_merge_states_0_10_out_b)
);
defparam nfa_merge_states_0_10.width_a = 64;
defparam nfa_merge_states_0_10.width_b = 64;
defparam nfa_merge_states_0_10.widthad_a = 1;
defparam nfa_merge_states_0_10.widthad_b = 1;
defparam nfa_merge_states_0_10.width_be_a = 8;
defparam nfa_merge_states_0_10.width_be_b = 8;
defparam nfa_merge_states_0_10.numwords_a = 1;
defparam nfa_merge_states_0_10.numwords_b = 1;


reg [0:0] nfa_merge_states_0_i1_address_a;
reg [0:0] nfa_merge_states_0_i1_address_b;
reg nfa_merge_states_0_i1_write_enable_a;
reg nfa_merge_states_0_i1_write_enable_b;
reg [63:0] nfa_merge_states_0_i1_in_a;
reg [63:0] nfa_merge_states_0_i1_in_b;
wire [63:0] nfa_merge_states_0_i1_out_a;
wire [63:0] nfa_merge_states_0_i1_out_b;
reg [8-1:0] nfa_merge_states_0_i1_byteena_a;
reg [8-1:0] nfa_merge_states_0_i1_byteena_b;

//   %i1 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_i1 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_i1_address_a ),
	.address_b( nfa_merge_states_0_i1_address_b ),
	.wren_a( nfa_merge_states_0_i1_write_enable_a ),
	.wren_b( nfa_merge_states_0_i1_write_enable_b ),
	.data_a( nfa_merge_states_0_i1_in_a ),
	.data_b( nfa_merge_states_0_i1_in_b ),
	.byteena_a( nfa_merge_states_0_i1_byteena_a ),
	.byteena_b( nfa_merge_states_0_i1_byteena_b ),
	.q_a( nfa_merge_states_0_i1_out_a ),
	.q_b( nfa_merge_states_0_i1_out_b)
);
defparam nfa_merge_states_0_i1.width_a = 64;
defparam nfa_merge_states_0_i1.width_b = 64;
defparam nfa_merge_states_0_i1.widthad_a = 1;
defparam nfa_merge_states_0_i1.widthad_b = 1;
defparam nfa_merge_states_0_i1.width_be_a = 8;
defparam nfa_merge_states_0_i1.width_be_b = 8;
defparam nfa_merge_states_0_i1.numwords_a = 1;
defparam nfa_merge_states_0_i1.numwords_b = 1;


reg [0:0] nfa_merge_states_0_11_address_a;
reg [0:0] nfa_merge_states_0_11_address_b;
reg nfa_merge_states_0_11_write_enable_a;
reg nfa_merge_states_0_11_write_enable_b;
reg [63:0] nfa_merge_states_0_11_in_a;
reg [63:0] nfa_merge_states_0_11_in_b;
wire [63:0] nfa_merge_states_0_11_out_a;
wire [63:0] nfa_merge_states_0_11_out_b;
reg [8-1:0] nfa_merge_states_0_11_byteena_a;
reg [8-1:0] nfa_merge_states_0_11_byteena_b;

//   %11 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_11 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_11_address_a ),
	.address_b( nfa_merge_states_0_11_address_b ),
	.wren_a( nfa_merge_states_0_11_write_enable_a ),
	.wren_b( nfa_merge_states_0_11_write_enable_b ),
	.data_a( nfa_merge_states_0_11_in_a ),
	.data_b( nfa_merge_states_0_11_in_b ),
	.byteena_a( nfa_merge_states_0_11_byteena_a ),
	.byteena_b( nfa_merge_states_0_11_byteena_b ),
	.q_a( nfa_merge_states_0_11_out_a ),
	.q_b( nfa_merge_states_0_11_out_b)
);
defparam nfa_merge_states_0_11.width_a = 64;
defparam nfa_merge_states_0_11.width_b = 64;
defparam nfa_merge_states_0_11.widthad_a = 1;
defparam nfa_merge_states_0_11.widthad_b = 1;
defparam nfa_merge_states_0_11.width_be_a = 8;
defparam nfa_merge_states_0_11.width_be_b = 8;
defparam nfa_merge_states_0_11.numwords_a = 1;
defparam nfa_merge_states_0_11.numwords_b = 1;


reg [0:0] nfa_merge_states_0_12_address_a;
reg [0:0] nfa_merge_states_0_12_address_b;
reg nfa_merge_states_0_12_write_enable_a;
reg nfa_merge_states_0_12_write_enable_b;
reg [63:0] nfa_merge_states_0_12_in_a;
reg [63:0] nfa_merge_states_0_12_in_b;
wire [63:0] nfa_merge_states_0_12_out_a;
wire [63:0] nfa_merge_states_0_12_out_b;
reg [8-1:0] nfa_merge_states_0_12_byteena_a;
reg [8-1:0] nfa_merge_states_0_12_byteena_b;

//   %12 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_12 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_12_address_a ),
	.address_b( nfa_merge_states_0_12_address_b ),
	.wren_a( nfa_merge_states_0_12_write_enable_a ),
	.wren_b( nfa_merge_states_0_12_write_enable_b ),
	.data_a( nfa_merge_states_0_12_in_a ),
	.data_b( nfa_merge_states_0_12_in_b ),
	.byteena_a( nfa_merge_states_0_12_byteena_a ),
	.byteena_b( nfa_merge_states_0_12_byteena_b ),
	.q_a( nfa_merge_states_0_12_out_a ),
	.q_b( nfa_merge_states_0_12_out_b)
);
defparam nfa_merge_states_0_12.width_a = 64;
defparam nfa_merge_states_0_12.width_b = 64;
defparam nfa_merge_states_0_12.widthad_a = 1;
defparam nfa_merge_states_0_12.widthad_b = 1;
defparam nfa_merge_states_0_12.width_be_a = 8;
defparam nfa_merge_states_0_12.width_be_b = 8;
defparam nfa_merge_states_0_12.numwords_a = 1;
defparam nfa_merge_states_0_12.numwords_b = 1;


reg [0:0] nfa_merge_states_0_13_address_a;
reg [0:0] nfa_merge_states_0_13_address_b;
reg nfa_merge_states_0_13_write_enable_a;
reg nfa_merge_states_0_13_write_enable_b;
reg [63:0] nfa_merge_states_0_13_in_a;
reg [63:0] nfa_merge_states_0_13_in_b;
wire [63:0] nfa_merge_states_0_13_out_a;
wire [63:0] nfa_merge_states_0_13_out_b;
reg [8-1:0] nfa_merge_states_0_13_byteena_a;
reg [8-1:0] nfa_merge_states_0_13_byteena_b;

//   %13 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_13 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_13_address_a ),
	.address_b( nfa_merge_states_0_13_address_b ),
	.wren_a( nfa_merge_states_0_13_write_enable_a ),
	.wren_b( nfa_merge_states_0_13_write_enable_b ),
	.data_a( nfa_merge_states_0_13_in_a ),
	.data_b( nfa_merge_states_0_13_in_b ),
	.byteena_a( nfa_merge_states_0_13_byteena_a ),
	.byteena_b( nfa_merge_states_0_13_byteena_b ),
	.q_a( nfa_merge_states_0_13_out_a ),
	.q_b( nfa_merge_states_0_13_out_b)
);
defparam nfa_merge_states_0_13.width_a = 64;
defparam nfa_merge_states_0_13.width_b = 64;
defparam nfa_merge_states_0_13.widthad_a = 1;
defparam nfa_merge_states_0_13.widthad_b = 1;
defparam nfa_merge_states_0_13.width_be_a = 8;
defparam nfa_merge_states_0_13.width_be_b = 8;
defparam nfa_merge_states_0_13.numwords_a = 1;
defparam nfa_merge_states_0_13.numwords_b = 1;


reg [0:0] nfa_merge_states_0_14_address_a;
reg [0:0] nfa_merge_states_0_14_address_b;
reg nfa_merge_states_0_14_write_enable_a;
reg nfa_merge_states_0_14_write_enable_b;
reg [63:0] nfa_merge_states_0_14_in_a;
reg [63:0] nfa_merge_states_0_14_in_b;
wire [63:0] nfa_merge_states_0_14_out_a;
wire [63:0] nfa_merge_states_0_14_out_b;
reg [8-1:0] nfa_merge_states_0_14_byteena_a;
reg [8-1:0] nfa_merge_states_0_14_byteena_b;

//   %14 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_merge_states_0_14 (
	.clk( clk ),
	.address_a( nfa_merge_states_0_14_address_a ),
	.address_b( nfa_merge_states_0_14_address_b ),
	.wren_a( nfa_merge_states_0_14_write_enable_a ),
	.wren_b( nfa_merge_states_0_14_write_enable_b ),
	.data_a( nfa_merge_states_0_14_in_a ),
	.data_b( nfa_merge_states_0_14_in_b ),
	.byteena_a( nfa_merge_states_0_14_byteena_a ),
	.byteena_b( nfa_merge_states_0_14_byteena_b ),
	.q_a( nfa_merge_states_0_14_out_a ),
	.q_b( nfa_merge_states_0_14_out_b)
);
defparam nfa_merge_states_0_14.width_a = 64;
defparam nfa_merge_states_0_14.width_b = 64;
defparam nfa_merge_states_0_14.widthad_a = 1;
defparam nfa_merge_states_0_14.widthad_b = 1;
defparam nfa_merge_states_0_14.width_be_a = 8;
defparam nfa_merge_states_0_14.width_be_b = 8;
defparam nfa_merge_states_0_14.numwords_a = 1;
defparam nfa_merge_states_0_14.numwords_b = 1;


reg [0:0] nfa_accept_sample_0_next_address_a;
reg [0:0] nfa_accept_sample_0_next_address_b;
reg nfa_accept_sample_0_next_write_enable_a;
reg nfa_accept_sample_0_next_write_enable_b;
reg [63:0] nfa_accept_sample_0_next_in_a;
reg [63:0] nfa_accept_sample_0_next_in_b;
wire [63:0] nfa_accept_sample_0_next_out_a;
wire [63:0] nfa_accept_sample_0_next_out_b;
reg [8-1:0] nfa_accept_sample_0_next_byteena_a;
reg [8-1:0] nfa_accept_sample_0_next_byteena_b;

//   %next = alloca %struct._bitset_t, align 4
ram_dual_port nfa_accept_sample_0_next (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_next_address_a ),
	.address_b( nfa_accept_sample_0_next_address_b ),
	.wren_a( nfa_accept_sample_0_next_write_enable_a ),
	.wren_b( nfa_accept_sample_0_next_write_enable_b ),
	.data_a( nfa_accept_sample_0_next_in_a ),
	.data_b( nfa_accept_sample_0_next_in_b ),
	.byteena_a( nfa_accept_sample_0_next_byteena_a ),
	.byteena_b( nfa_accept_sample_0_next_byteena_b ),
	.q_a( nfa_accept_sample_0_next_out_a ),
	.q_b( nfa_accept_sample_0_next_out_b)
);
defparam nfa_accept_sample_0_next.width_a = 64;
defparam nfa_accept_sample_0_next.width_b = 64;
defparam nfa_accept_sample_0_next.widthad_a = 1;
defparam nfa_accept_sample_0_next.widthad_b = 1;
defparam nfa_accept_sample_0_next.width_be_a = 8;
defparam nfa_accept_sample_0_next.width_be_b = 8;
defparam nfa_accept_sample_0_next.numwords_a = 2;
defparam nfa_accept_sample_0_next.numwords_b = 2;


reg [0:0] nfa_accept_sample_0_current_address_a;
reg [0:0] nfa_accept_sample_0_current_address_b;
reg nfa_accept_sample_0_current_write_enable_a;
reg nfa_accept_sample_0_current_write_enable_b;
reg [63:0] nfa_accept_sample_0_current_in_a;
reg [63:0] nfa_accept_sample_0_current_in_b;
wire [63:0] nfa_accept_sample_0_current_out_a;
wire [63:0] nfa_accept_sample_0_current_out_b;
reg [8-1:0] nfa_accept_sample_0_current_byteena_a;
reg [8-1:0] nfa_accept_sample_0_current_byteena_b;

//   %current = alloca %struct._bitset_t, align 4
ram_dual_port nfa_accept_sample_0_current (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_current_address_a ),
	.address_b( nfa_accept_sample_0_current_address_b ),
	.wren_a( nfa_accept_sample_0_current_write_enable_a ),
	.wren_b( nfa_accept_sample_0_current_write_enable_b ),
	.data_a( nfa_accept_sample_0_current_in_a ),
	.data_b( nfa_accept_sample_0_current_in_b ),
	.byteena_a( nfa_accept_sample_0_current_byteena_a ),
	.byteena_b( nfa_accept_sample_0_current_byteena_b ),
	.q_a( nfa_accept_sample_0_current_out_a ),
	.q_b( nfa_accept_sample_0_current_out_b)
);
defparam nfa_accept_sample_0_current.width_a = 64;
defparam nfa_accept_sample_0_current.width_b = 64;
defparam nfa_accept_sample_0_current.widthad_a = 1;
defparam nfa_accept_sample_0_current.widthad_b = 1;
defparam nfa_accept_sample_0_current.width_be_a = 8;
defparam nfa_accept_sample_0_current.width_be_b = 8;
defparam nfa_accept_sample_0_current.numwords_a = 2;
defparam nfa_accept_sample_0_current.numwords_b = 2;


reg [0:0] nfa_accept_sample_0_tmp_address_a;
reg [0:0] nfa_accept_sample_0_tmp_address_b;
reg nfa_accept_sample_0_tmp_write_enable_a;
reg nfa_accept_sample_0_tmp_write_enable_b;
reg [63:0] nfa_accept_sample_0_tmp_in_a;
reg [63:0] nfa_accept_sample_0_tmp_in_b;
wire [63:0] nfa_accept_sample_0_tmp_out_a;
wire [63:0] nfa_accept_sample_0_tmp_out_b;
reg [8-1:0] nfa_accept_sample_0_tmp_byteena_a;
reg [8-1:0] nfa_accept_sample_0_tmp_byteena_b;

//   %tmp = alloca %struct._bitset_t, align 4
ram_dual_port nfa_accept_sample_0_tmp (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_tmp_address_a ),
	.address_b( nfa_accept_sample_0_tmp_address_b ),
	.wren_a( nfa_accept_sample_0_tmp_write_enable_a ),
	.wren_b( nfa_accept_sample_0_tmp_write_enable_b ),
	.data_a( nfa_accept_sample_0_tmp_in_a ),
	.data_b( nfa_accept_sample_0_tmp_in_b ),
	.byteena_a( nfa_accept_sample_0_tmp_byteena_a ),
	.byteena_b( nfa_accept_sample_0_tmp_byteena_b ),
	.q_a( nfa_accept_sample_0_tmp_out_a ),
	.q_b( nfa_accept_sample_0_tmp_out_b)
);
defparam nfa_accept_sample_0_tmp.width_a = 64;
defparam nfa_accept_sample_0_tmp.width_b = 64;
defparam nfa_accept_sample_0_tmp.widthad_a = 1;
defparam nfa_accept_sample_0_tmp.widthad_b = 1;
defparam nfa_accept_sample_0_tmp.width_be_a = 8;
defparam nfa_accept_sample_0_tmp.width_be_b = 8;
defparam nfa_accept_sample_0_tmp.numwords_a = 2;
defparam nfa_accept_sample_0_tmp.numwords_b = 2;


reg [0:0] nfa_accept_sample_0_j_address_a;
reg [0:0] nfa_accept_sample_0_j_address_b;
reg nfa_accept_sample_0_j_write_enable_a;
reg nfa_accept_sample_0_j_write_enable_b;
reg [63:0] nfa_accept_sample_0_j_in_a;
reg [63:0] nfa_accept_sample_0_j_in_b;
wire [63:0] nfa_accept_sample_0_j_out_a;
wire [63:0] nfa_accept_sample_0_j_out_b;
reg [8-1:0] nfa_accept_sample_0_j_byteena_a;
reg [8-1:0] nfa_accept_sample_0_j_byteena_b;

//   %j = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_accept_sample_0_j (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_j_address_a ),
	.address_b( nfa_accept_sample_0_j_address_b ),
	.wren_a( nfa_accept_sample_0_j_write_enable_a ),
	.wren_b( nfa_accept_sample_0_j_write_enable_b ),
	.data_a( nfa_accept_sample_0_j_in_a ),
	.data_b( nfa_accept_sample_0_j_in_b ),
	.byteena_a( nfa_accept_sample_0_j_byteena_a ),
	.byteena_b( nfa_accept_sample_0_j_byteena_b ),
	.q_a( nfa_accept_sample_0_j_out_a ),
	.q_b( nfa_accept_sample_0_j_out_b)
);
defparam nfa_accept_sample_0_j.width_a = 64;
defparam nfa_accept_sample_0_j.width_b = 64;
defparam nfa_accept_sample_0_j.widthad_a = 1;
defparam nfa_accept_sample_0_j.widthad_b = 1;
defparam nfa_accept_sample_0_j.width_be_a = 8;
defparam nfa_accept_sample_0_j.width_be_b = 8;
defparam nfa_accept_sample_0_j.numwords_a = 1;
defparam nfa_accept_sample_0_j.numwords_b = 1;


reg [0:0] nfa_accept_sample_0_1_address_a;
reg [0:0] nfa_accept_sample_0_1_address_b;
reg nfa_accept_sample_0_1_write_enable_a;
reg nfa_accept_sample_0_1_write_enable_b;
reg [63:0] nfa_accept_sample_0_1_in_a;
reg [63:0] nfa_accept_sample_0_1_in_b;
wire [63:0] nfa_accept_sample_0_1_out_a;
wire [63:0] nfa_accept_sample_0_1_out_b;
reg [8-1:0] nfa_accept_sample_0_1_byteena_a;
reg [8-1:0] nfa_accept_sample_0_1_byteena_b;

//   %1 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_accept_sample_0_1 (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_1_address_a ),
	.address_b( nfa_accept_sample_0_1_address_b ),
	.wren_a( nfa_accept_sample_0_1_write_enable_a ),
	.wren_b( nfa_accept_sample_0_1_write_enable_b ),
	.data_a( nfa_accept_sample_0_1_in_a ),
	.data_b( nfa_accept_sample_0_1_in_b ),
	.byteena_a( nfa_accept_sample_0_1_byteena_a ),
	.byteena_b( nfa_accept_sample_0_1_byteena_b ),
	.q_a( nfa_accept_sample_0_1_out_a ),
	.q_b( nfa_accept_sample_0_1_out_b)
);
defparam nfa_accept_sample_0_1.width_a = 64;
defparam nfa_accept_sample_0_1.width_b = 64;
defparam nfa_accept_sample_0_1.widthad_a = 1;
defparam nfa_accept_sample_0_1.widthad_b = 1;
defparam nfa_accept_sample_0_1.width_be_a = 8;
defparam nfa_accept_sample_0_1.width_be_b = 8;
defparam nfa_accept_sample_0_1.numwords_a = 1;
defparam nfa_accept_sample_0_1.numwords_b = 1;


reg [0:0] nfa_accept_sample_0_2_address_a;
reg [0:0] nfa_accept_sample_0_2_address_b;
reg nfa_accept_sample_0_2_write_enable_a;
reg nfa_accept_sample_0_2_write_enable_b;
reg [63:0] nfa_accept_sample_0_2_in_a;
reg [63:0] nfa_accept_sample_0_2_in_b;
wire [63:0] nfa_accept_sample_0_2_out_a;
wire [63:0] nfa_accept_sample_0_2_out_b;
reg [8-1:0] nfa_accept_sample_0_2_byteena_a;
reg [8-1:0] nfa_accept_sample_0_2_byteena_b;

//   %2 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_accept_sample_0_2 (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_2_address_a ),
	.address_b( nfa_accept_sample_0_2_address_b ),
	.wren_a( nfa_accept_sample_0_2_write_enable_a ),
	.wren_b( nfa_accept_sample_0_2_write_enable_b ),
	.data_a( nfa_accept_sample_0_2_in_a ),
	.data_b( nfa_accept_sample_0_2_in_b ),
	.byteena_a( nfa_accept_sample_0_2_byteena_a ),
	.byteena_b( nfa_accept_sample_0_2_byteena_b ),
	.q_a( nfa_accept_sample_0_2_out_a ),
	.q_b( nfa_accept_sample_0_2_out_b)
);
defparam nfa_accept_sample_0_2.width_a = 64;
defparam nfa_accept_sample_0_2.width_b = 64;
defparam nfa_accept_sample_0_2.widthad_a = 1;
defparam nfa_accept_sample_0_2.widthad_b = 1;
defparam nfa_accept_sample_0_2.width_be_a = 8;
defparam nfa_accept_sample_0_2.width_be_b = 8;
defparam nfa_accept_sample_0_2.numwords_a = 1;
defparam nfa_accept_sample_0_2.numwords_b = 1;


reg [0:0] nfa_accept_sample_0_3_address_a;
reg [0:0] nfa_accept_sample_0_3_address_b;
reg nfa_accept_sample_0_3_write_enable_a;
reg nfa_accept_sample_0_3_write_enable_b;
reg [63:0] nfa_accept_sample_0_3_in_a;
reg [63:0] nfa_accept_sample_0_3_in_b;
wire [63:0] nfa_accept_sample_0_3_out_a;
wire [63:0] nfa_accept_sample_0_3_out_b;
reg [8-1:0] nfa_accept_sample_0_3_byteena_a;
reg [8-1:0] nfa_accept_sample_0_3_byteena_b;

//   %3 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_accept_sample_0_3 (
	.clk( clk ),
	.address_a( nfa_accept_sample_0_3_address_a ),
	.address_b( nfa_accept_sample_0_3_address_b ),
	.wren_a( nfa_accept_sample_0_3_write_enable_a ),
	.wren_b( nfa_accept_sample_0_3_write_enable_b ),
	.data_a( nfa_accept_sample_0_3_in_a ),
	.data_b( nfa_accept_sample_0_3_in_b ),
	.byteena_a( nfa_accept_sample_0_3_byteena_a ),
	.byteena_b( nfa_accept_sample_0_3_byteena_b ),
	.q_a( nfa_accept_sample_0_3_out_a ),
	.q_b( nfa_accept_sample_0_3_out_b)
);
defparam nfa_accept_sample_0_3.width_a = 64;
defparam nfa_accept_sample_0_3.width_b = 64;
defparam nfa_accept_sample_0_3.widthad_a = 1;
defparam nfa_accept_sample_0_3.widthad_b = 1;
defparam nfa_accept_sample_0_3.width_be_a = 8;
defparam nfa_accept_sample_0_3.width_be_b = 8;
defparam nfa_accept_sample_0_3.numwords_a = 1;
defparam nfa_accept_sample_0_3.numwords_b = 1;


reg [0:0] nfa_print_0_1_address_a;
reg [0:0] nfa_print_0_1_address_b;
reg nfa_print_0_1_write_enable_a;
reg nfa_print_0_1_write_enable_b;
reg [7:0] nfa_print_0_1_in_a;
reg [7:0] nfa_print_0_1_in_b;
wire [7:0] nfa_print_0_1_out_a;
wire [7:0] nfa_print_0_1_out_b;

//   %1 = alloca i8, align 1
ram_dual_port nfa_print_0_1 (
	.clk( clk ),
	.address_a( nfa_print_0_1_address_a ),
	.address_b( nfa_print_0_1_address_b ),
	.wren_a( nfa_print_0_1_write_enable_a ),
	.wren_b( nfa_print_0_1_write_enable_b ),
	.data_a( nfa_print_0_1_in_a ),
	.data_b( nfa_print_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_print_0_1_out_a ),
	.q_b( nfa_print_0_1_out_b)
);
defparam nfa_print_0_1.width_a = 8;
defparam nfa_print_0_1.width_b = 8;
defparam nfa_print_0_1.widthad_a = 1;
defparam nfa_print_0_1.widthad_b = 1;
defparam nfa_print_0_1.width_be_a = 1;
defparam nfa_print_0_1.width_be_b = 1;
defparam nfa_print_0_1.numwords_a = 1;
defparam nfa_print_0_1.numwords_b = 1;


reg [0:0] nfa_print_0_2_address_a;
reg [0:0] nfa_print_0_2_address_b;
reg nfa_print_0_2_write_enable_a;
reg nfa_print_0_2_write_enable_b;
reg [7:0] nfa_print_0_2_in_a;
reg [7:0] nfa_print_0_2_in_b;
wire [7:0] nfa_print_0_2_out_a;
wire [7:0] nfa_print_0_2_out_b;

//   %2 = alloca i8, align 1
ram_dual_port nfa_print_0_2 (
	.clk( clk ),
	.address_a( nfa_print_0_2_address_a ),
	.address_b( nfa_print_0_2_address_b ),
	.wren_a( nfa_print_0_2_write_enable_a ),
	.wren_b( nfa_print_0_2_write_enable_b ),
	.data_a( nfa_print_0_2_in_a ),
	.data_b( nfa_print_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( nfa_print_0_2_out_a ),
	.q_b( nfa_print_0_2_out_b)
);
defparam nfa_print_0_2.width_a = 8;
defparam nfa_print_0_2.width_b = 8;
defparam nfa_print_0_2.widthad_a = 1;
defparam nfa_print_0_2.widthad_b = 1;
defparam nfa_print_0_2.width_be_a = 1;
defparam nfa_print_0_2.width_be_b = 1;
defparam nfa_print_0_2.numwords_a = 1;
defparam nfa_print_0_2.numwords_b = 1;


reg [0:0] nfa_print_0_suc_address_a;
reg [0:0] nfa_print_0_suc_address_b;
reg nfa_print_0_suc_write_enable_a;
reg nfa_print_0_suc_write_enable_b;
reg [63:0] nfa_print_0_suc_in_a;
reg [63:0] nfa_print_0_suc_in_b;
wire [63:0] nfa_print_0_suc_out_a;
wire [63:0] nfa_print_0_suc_out_b;
reg [8-1:0] nfa_print_0_suc_byteena_a;
reg [8-1:0] nfa_print_0_suc_byteena_b;

//   %suc = alloca %struct._bitset_t, align 4
ram_dual_port nfa_print_0_suc (
	.clk( clk ),
	.address_a( nfa_print_0_suc_address_a ),
	.address_b( nfa_print_0_suc_address_b ),
	.wren_a( nfa_print_0_suc_write_enable_a ),
	.wren_b( nfa_print_0_suc_write_enable_b ),
	.data_a( nfa_print_0_suc_in_a ),
	.data_b( nfa_print_0_suc_in_b ),
	.byteena_a( nfa_print_0_suc_byteena_a ),
	.byteena_b( nfa_print_0_suc_byteena_b ),
	.q_a( nfa_print_0_suc_out_a ),
	.q_b( nfa_print_0_suc_out_b)
);
defparam nfa_print_0_suc.width_a = 64;
defparam nfa_print_0_suc.width_b = 64;
defparam nfa_print_0_suc.widthad_a = 1;
defparam nfa_print_0_suc.widthad_b = 1;
defparam nfa_print_0_suc.width_be_a = 8;
defparam nfa_print_0_suc.width_be_b = 8;
defparam nfa_print_0_suc.numwords_a = 2;
defparam nfa_print_0_suc.numwords_b = 2;


reg [0:0] nfa_print_0_suc2_address_a;
reg [0:0] nfa_print_0_suc2_address_b;
reg nfa_print_0_suc2_write_enable_a;
reg nfa_print_0_suc2_write_enable_b;
reg [63:0] nfa_print_0_suc2_in_a;
reg [63:0] nfa_print_0_suc2_in_b;
wire [63:0] nfa_print_0_suc2_out_a;
wire [63:0] nfa_print_0_suc2_out_b;
reg [8-1:0] nfa_print_0_suc2_byteena_a;
reg [8-1:0] nfa_print_0_suc2_byteena_b;

//   %suc2 = alloca %struct._bitset_t, align 4
ram_dual_port nfa_print_0_suc2 (
	.clk( clk ),
	.address_a( nfa_print_0_suc2_address_a ),
	.address_b( nfa_print_0_suc2_address_b ),
	.wren_a( nfa_print_0_suc2_write_enable_a ),
	.wren_b( nfa_print_0_suc2_write_enable_b ),
	.data_a( nfa_print_0_suc2_in_a ),
	.data_b( nfa_print_0_suc2_in_b ),
	.byteena_a( nfa_print_0_suc2_byteena_a ),
	.byteena_b( nfa_print_0_suc2_byteena_b ),
	.q_a( nfa_print_0_suc2_out_a ),
	.q_b( nfa_print_0_suc2_out_b)
);
defparam nfa_print_0_suc2.width_a = 64;
defparam nfa_print_0_suc2.width_b = 64;
defparam nfa_print_0_suc2.widthad_a = 1;
defparam nfa_print_0_suc2.widthad_b = 1;
defparam nfa_print_0_suc2.width_be_a = 8;
defparam nfa_print_0_suc2.width_be_b = 8;
defparam nfa_print_0_suc2.numwords_a = 2;
defparam nfa_print_0_suc2.numwords_b = 2;


reg [0:0] nfa_print_0_qt_address_a;
reg [0:0] nfa_print_0_qt_address_b;
reg nfa_print_0_qt_write_enable_a;
reg nfa_print_0_qt_write_enable_b;
reg [63:0] nfa_print_0_qt_in_a;
reg [63:0] nfa_print_0_qt_in_b;
wire [63:0] nfa_print_0_qt_out_a;
wire [63:0] nfa_print_0_qt_out_b;
reg [8-1:0] nfa_print_0_qt_byteena_a;
reg [8-1:0] nfa_print_0_qt_byteena_b;

//   %qt = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_print_0_qt (
	.clk( clk ),
	.address_a( nfa_print_0_qt_address_a ),
	.address_b( nfa_print_0_qt_address_b ),
	.wren_a( nfa_print_0_qt_write_enable_a ),
	.wren_b( nfa_print_0_qt_write_enable_b ),
	.data_a( nfa_print_0_qt_in_a ),
	.data_b( nfa_print_0_qt_in_b ),
	.byteena_a( nfa_print_0_qt_byteena_a ),
	.byteena_b( nfa_print_0_qt_byteena_b ),
	.q_a( nfa_print_0_qt_out_a ),
	.q_b( nfa_print_0_qt_out_b)
);
defparam nfa_print_0_qt.width_a = 64;
defparam nfa_print_0_qt.width_b = 64;
defparam nfa_print_0_qt.widthad_a = 1;
defparam nfa_print_0_qt.widthad_b = 1;
defparam nfa_print_0_qt.width_be_a = 8;
defparam nfa_print_0_qt.width_be_b = 8;
defparam nfa_print_0_qt.numwords_a = 1;
defparam nfa_print_0_qt.numwords_b = 1;


reg [0:0] nfa_print_0_3_address_a;
reg [0:0] nfa_print_0_3_address_b;
reg nfa_print_0_3_write_enable_a;
reg nfa_print_0_3_write_enable_b;
reg [63:0] nfa_print_0_3_in_a;
reg [63:0] nfa_print_0_3_in_b;
wire [63:0] nfa_print_0_3_out_a;
wire [63:0] nfa_print_0_3_out_b;
reg [8-1:0] nfa_print_0_3_byteena_a;
reg [8-1:0] nfa_print_0_3_byteena_b;

//   %3 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_print_0_3 (
	.clk( clk ),
	.address_a( nfa_print_0_3_address_a ),
	.address_b( nfa_print_0_3_address_b ),
	.wren_a( nfa_print_0_3_write_enable_a ),
	.wren_b( nfa_print_0_3_write_enable_b ),
	.data_a( nfa_print_0_3_in_a ),
	.data_b( nfa_print_0_3_in_b ),
	.byteena_a( nfa_print_0_3_byteena_a ),
	.byteena_b( nfa_print_0_3_byteena_b ),
	.q_a( nfa_print_0_3_out_a ),
	.q_b( nfa_print_0_3_out_b)
);
defparam nfa_print_0_3.width_a = 64;
defparam nfa_print_0_3.width_b = 64;
defparam nfa_print_0_3.widthad_a = 1;
defparam nfa_print_0_3.widthad_b = 1;
defparam nfa_print_0_3.width_be_a = 8;
defparam nfa_print_0_3.width_be_b = 8;
defparam nfa_print_0_3.numwords_a = 1;
defparam nfa_print_0_3.numwords_b = 1;


reg [0:0] nfa_print_0_4_address_a;
reg [0:0] nfa_print_0_4_address_b;
reg nfa_print_0_4_write_enable_a;
reg nfa_print_0_4_write_enable_b;
reg [63:0] nfa_print_0_4_in_a;
reg [63:0] nfa_print_0_4_in_b;
wire [63:0] nfa_print_0_4_out_a;
wire [63:0] nfa_print_0_4_out_b;
reg [8-1:0] nfa_print_0_4_byteena_a;
reg [8-1:0] nfa_print_0_4_byteena_b;

//   %4 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_print_0_4 (
	.clk( clk ),
	.address_a( nfa_print_0_4_address_a ),
	.address_b( nfa_print_0_4_address_b ),
	.wren_a( nfa_print_0_4_write_enable_a ),
	.wren_b( nfa_print_0_4_write_enable_b ),
	.data_a( nfa_print_0_4_in_a ),
	.data_b( nfa_print_0_4_in_b ),
	.byteena_a( nfa_print_0_4_byteena_a ),
	.byteena_b( nfa_print_0_4_byteena_b ),
	.q_a( nfa_print_0_4_out_a ),
	.q_b( nfa_print_0_4_out_b)
);
defparam nfa_print_0_4.width_a = 64;
defparam nfa_print_0_4.width_b = 64;
defparam nfa_print_0_4.widthad_a = 1;
defparam nfa_print_0_4.widthad_b = 1;
defparam nfa_print_0_4.width_be_a = 8;
defparam nfa_print_0_4.width_be_b = 8;
defparam nfa_print_0_4.numwords_a = 1;
defparam nfa_print_0_4.numwords_b = 1;


reg [0:0] nfa_print_0_5_address_a;
reg [0:0] nfa_print_0_5_address_b;
reg nfa_print_0_5_write_enable_a;
reg nfa_print_0_5_write_enable_b;
reg [63:0] nfa_print_0_5_in_a;
reg [63:0] nfa_print_0_5_in_b;
wire [63:0] nfa_print_0_5_out_a;
wire [63:0] nfa_print_0_5_out_b;
reg [8-1:0] nfa_print_0_5_byteena_a;
reg [8-1:0] nfa_print_0_5_byteena_b;

//   %5 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_print_0_5 (
	.clk( clk ),
	.address_a( nfa_print_0_5_address_a ),
	.address_b( nfa_print_0_5_address_b ),
	.wren_a( nfa_print_0_5_write_enable_a ),
	.wren_b( nfa_print_0_5_write_enable_b ),
	.data_a( nfa_print_0_5_in_a ),
	.data_b( nfa_print_0_5_in_b ),
	.byteena_a( nfa_print_0_5_byteena_a ),
	.byteena_b( nfa_print_0_5_byteena_b ),
	.q_a( nfa_print_0_5_out_a ),
	.q_b( nfa_print_0_5_out_b)
);
defparam nfa_print_0_5.width_a = 64;
defparam nfa_print_0_5.width_b = 64;
defparam nfa_print_0_5.widthad_a = 1;
defparam nfa_print_0_5.widthad_b = 1;
defparam nfa_print_0_5.width_be_a = 8;
defparam nfa_print_0_5.width_be_b = 8;
defparam nfa_print_0_5.numwords_a = 1;
defparam nfa_print_0_5.numwords_b = 1;


reg [0:0] nfa_print_0_6_address_a;
reg [0:0] nfa_print_0_6_address_b;
reg nfa_print_0_6_write_enable_a;
reg nfa_print_0_6_write_enable_b;
reg [63:0] nfa_print_0_6_in_a;
reg [63:0] nfa_print_0_6_in_b;
wire [63:0] nfa_print_0_6_out_a;
wire [63:0] nfa_print_0_6_out_b;
reg [8-1:0] nfa_print_0_6_byteena_a;
reg [8-1:0] nfa_print_0_6_byteena_b;

//   %6 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_print_0_6 (
	.clk( clk ),
	.address_a( nfa_print_0_6_address_a ),
	.address_b( nfa_print_0_6_address_b ),
	.wren_a( nfa_print_0_6_write_enable_a ),
	.wren_b( nfa_print_0_6_write_enable_b ),
	.data_a( nfa_print_0_6_in_a ),
	.data_b( nfa_print_0_6_in_b ),
	.byteena_a( nfa_print_0_6_byteena_a ),
	.byteena_b( nfa_print_0_6_byteena_b ),
	.q_a( nfa_print_0_6_out_a ),
	.q_b( nfa_print_0_6_out_b)
);
defparam nfa_print_0_6.width_a = 64;
defparam nfa_print_0_6.width_b = 64;
defparam nfa_print_0_6.widthad_a = 1;
defparam nfa_print_0_6.widthad_b = 1;
defparam nfa_print_0_6.width_be_a = 8;
defparam nfa_print_0_6.width_be_b = 8;
defparam nfa_print_0_6.numwords_a = 1;
defparam nfa_print_0_6.numwords_b = 1;


reg [0:0] nfa_print_0_7_address_a;
reg [0:0] nfa_print_0_7_address_b;
reg nfa_print_0_7_write_enable_a;
reg nfa_print_0_7_write_enable_b;
reg [63:0] nfa_print_0_7_in_a;
reg [63:0] nfa_print_0_7_in_b;
wire [63:0] nfa_print_0_7_out_a;
wire [63:0] nfa_print_0_7_out_b;
reg [8-1:0] nfa_print_0_7_byteena_a;
reg [8-1:0] nfa_print_0_7_byteena_b;

//   %7 = alloca %struct._bitset_iterator_t, align 1
ram_dual_port nfa_print_0_7 (
	.clk( clk ),
	.address_a( nfa_print_0_7_address_a ),
	.address_b( nfa_print_0_7_address_b ),
	.wren_a( nfa_print_0_7_write_enable_a ),
	.wren_b( nfa_print_0_7_write_enable_b ),
	.data_a( nfa_print_0_7_in_a ),
	.data_b( nfa_print_0_7_in_b ),
	.byteena_a( nfa_print_0_7_byteena_a ),
	.byteena_b( nfa_print_0_7_byteena_b ),
	.q_a( nfa_print_0_7_out_a ),
	.q_b( nfa_print_0_7_out_b)
);
defparam nfa_print_0_7.width_a = 64;
defparam nfa_print_0_7.width_b = 64;
defparam nfa_print_0_7.widthad_a = 1;
defparam nfa_print_0_7.widthad_b = 1;
defparam nfa_print_0_7.width_be_a = 8;
defparam nfa_print_0_7.width_be_b = 8;
defparam nfa_print_0_7.numwords_a = 1;
defparam nfa_print_0_7.numwords_b = 1;

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a ==`TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

wire select__str1_a;
assign select__str1_a = (tag_a ==`TAG_g__str1);
reg select__str1_reg_a;
wire [7:0] memory_controller__str1_out_a;
assign memory_controller__str1_out_a = {8{ select__str1_reg_a}} & _str1_out_a;

wire select___PRETTY_FUNCTION___nfa_add_initial_a;
assign select___PRETTY_FUNCTION___nfa_add_initial_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_add_initial);
reg select___PRETTY_FUNCTION___nfa_add_initial_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_add_initial_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_add_initial_out_a = {8{ select___PRETTY_FUNCTION___nfa_add_initial_reg_a}} & __PRETTY_FUNCTION___nfa_add_initial_out_a;

wire select___PRETTY_FUNCTION___nfa_remove_initial_a;
assign select___PRETTY_FUNCTION___nfa_remove_initial_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_remove_initial);
reg select___PRETTY_FUNCTION___nfa_remove_initial_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_remove_initial_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_remove_initial_out_a = {8{ select___PRETTY_FUNCTION___nfa_remove_initial_reg_a}} & __PRETTY_FUNCTION___nfa_remove_initial_out_a;

wire select___PRETTY_FUNCTION___nfa_is_initial_a;
assign select___PRETTY_FUNCTION___nfa_is_initial_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_is_initial);
reg select___PRETTY_FUNCTION___nfa_is_initial_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_is_initial_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_is_initial_out_a = {8{ select___PRETTY_FUNCTION___nfa_is_initial_reg_a}} & __PRETTY_FUNCTION___nfa_is_initial_out_a;

wire select___PRETTY_FUNCTION___nfa_add_final_a;
assign select___PRETTY_FUNCTION___nfa_add_final_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_add_final);
reg select___PRETTY_FUNCTION___nfa_add_final_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_add_final_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_add_final_out_a = {8{ select___PRETTY_FUNCTION___nfa_add_final_reg_a}} & __PRETTY_FUNCTION___nfa_add_final_out_a;

wire select___PRETTY_FUNCTION___nfa_remove_final_a;
assign select___PRETTY_FUNCTION___nfa_remove_final_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_remove_final);
reg select___PRETTY_FUNCTION___nfa_remove_final_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_remove_final_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_remove_final_out_a = {8{ select___PRETTY_FUNCTION___nfa_remove_final_reg_a}} & __PRETTY_FUNCTION___nfa_remove_final_out_a;

wire select___PRETTY_FUNCTION___nfa_is_final_a;
assign select___PRETTY_FUNCTION___nfa_is_final_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_is_final);
reg select___PRETTY_FUNCTION___nfa_is_final_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_is_final_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_is_final_out_a = {8{ select___PRETTY_FUNCTION___nfa_is_final_reg_a}} & __PRETTY_FUNCTION___nfa_is_final_out_a;

wire select__str2_a;
assign select__str2_a = (tag_a ==`TAG_g__str2);
reg select__str2_reg_a;
wire [7:0] memory_controller__str2_out_a;
assign memory_controller__str2_out_a = {8{ select__str2_reg_a}} & _str2_out_a;

wire select___PRETTY_FUNCTION___nfa_get_sucessors_a;
assign select___PRETTY_FUNCTION___nfa_get_sucessors_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_get_sucessors);
reg select___PRETTY_FUNCTION___nfa_get_sucessors_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_get_sucessors_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_get_sucessors_out_a = {8{ select___PRETTY_FUNCTION___nfa_get_sucessors_reg_a}} & __PRETTY_FUNCTION___nfa_get_sucessors_out_a;

wire select__str3_a;
assign select__str3_a = (tag_a ==`TAG_g__str3);
reg select__str3_reg_a;
wire [7:0] memory_controller__str3_out_a;
assign memory_controller__str3_out_a = {8{ select__str3_reg_a}} & _str3_out_a;

wire select___PRETTY_FUNCTION___nfa_get_predecessors_a;
assign select___PRETTY_FUNCTION___nfa_get_predecessors_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_get_predecessors);
reg select___PRETTY_FUNCTION___nfa_get_predecessors_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_get_predecessors_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_get_predecessors_out_a = {8{ select___PRETTY_FUNCTION___nfa_get_predecessors_reg_a}} & __PRETTY_FUNCTION___nfa_get_predecessors_out_a;

wire select__str5_a;
assign select__str5_a = (tag_a ==`TAG_g__str5);
reg select__str5_reg_a;
wire [7:0] memory_controller__str5_out_a;
assign memory_controller__str5_out_a = {8{ select__str5_reg_a}} & _str5_out_a;

wire select___PRETTY_FUNCTION___nfa_add_transition_a;
assign select___PRETTY_FUNCTION___nfa_add_transition_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_add_transition);
reg select___PRETTY_FUNCTION___nfa_add_transition_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_add_transition_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_add_transition_out_a = {8{ select___PRETTY_FUNCTION___nfa_add_transition_reg_a}} & __PRETTY_FUNCTION___nfa_add_transition_out_a;

wire select__str6_a;
assign select__str6_a = (tag_a ==`TAG_g__str6);
reg select__str6_reg_a;
wire [7:0] memory_controller__str6_out_a;
assign memory_controller__str6_out_a = {8{ select__str6_reg_a}} & _str6_out_a;

wire select__str7_a;
assign select__str7_a = (tag_a ==`TAG_g__str7);
reg select__str7_reg_a;
wire [7:0] memory_controller__str7_out_a;
assign memory_controller__str7_out_a = {8{ select__str7_reg_a}} & _str7_out_a;

wire select___PRETTY_FUNCTION___nfa_remove_transition_a;
assign select___PRETTY_FUNCTION___nfa_remove_transition_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_remove_transition);
reg select___PRETTY_FUNCTION___nfa_remove_transition_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_remove_transition_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_remove_transition_out_a = {8{ select___PRETTY_FUNCTION___nfa_remove_transition_reg_a}} & __PRETTY_FUNCTION___nfa_remove_transition_out_a;

wire select___PRETTY_FUNCTION___nfa_merge_states_a;
assign select___PRETTY_FUNCTION___nfa_merge_states_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_merge_states);
reg select___PRETTY_FUNCTION___nfa_merge_states_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_merge_states_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_merge_states_out_a = {8{ select___PRETTY_FUNCTION___nfa_merge_states_reg_a}} & __PRETTY_FUNCTION___nfa_merge_states_out_a;

wire select__str8_a;
assign select__str8_a = (tag_a ==`TAG_g__str8);
reg select__str8_reg_a;
wire [7:0] memory_controller__str8_out_a;
assign memory_controller__str8_out_a = {8{ select__str8_reg_a}} & _str8_out_a;

wire select__str9_a;
assign select__str9_a = (tag_a ==`TAG_g__str9);
reg select__str9_reg_a;
wire [7:0] memory_controller__str9_out_a;
assign memory_controller__str9_out_a = {8{ select__str9_reg_a}} & _str9_out_a;

wire select___PRETTY_FUNCTION___nfa_accept_any_sample_a;
assign select___PRETTY_FUNCTION___nfa_accept_any_sample_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample);
reg select___PRETTY_FUNCTION___nfa_accept_any_sample_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_accept_any_sample_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_accept_any_sample_out_a = {8{ select___PRETTY_FUNCTION___nfa_accept_any_sample_reg_a}} & __PRETTY_FUNCTION___nfa_accept_any_sample_out_a;

wire select___PRETTY_FUNCTION___nfa_accept_all_samples_a;
assign select___PRETTY_FUNCTION___nfa_accept_all_samples_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples);
reg select___PRETTY_FUNCTION___nfa_accept_all_samples_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_accept_all_samples_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_accept_all_samples_out_a = {8{ select___PRETTY_FUNCTION___nfa_accept_all_samples_reg_a}} & __PRETTY_FUNCTION___nfa_accept_all_samples_out_a;

wire select___PRETTY_FUNCTION___nfa_accept_samples_a;
assign select___PRETTY_FUNCTION___nfa_accept_samples_a = (tag_a ==`TAG_g___PRETTY_FUNCTION___nfa_accept_samples);
reg select___PRETTY_FUNCTION___nfa_accept_samples_reg_a;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_accept_samples_out_a;
assign memory_controller___PRETTY_FUNCTION___nfa_accept_samples_out_a = {8{ select___PRETTY_FUNCTION___nfa_accept_samples_reg_a}} & __PRETTY_FUNCTION___nfa_accept_samples_out_a;

wire select__str11_a;
assign select__str11_a = (tag_a ==`TAG_g__str11);
reg select__str11_reg_a;
wire [7:0] memory_controller__str11_out_a;
assign memory_controller__str11_out_a = {8{ select__str11_reg_a}} & _str11_out_a;

wire select__str12_a;
assign select__str12_a = (tag_a ==`TAG_g__str12);
reg select__str12_reg_a;
wire [7:0] memory_controller__str12_out_a;
assign memory_controller__str12_out_a = {8{ select__str12_reg_a}} & _str12_out_a;

wire select__str13_a;
assign select__str13_a = (tag_a ==`TAG_g__str13);
reg select__str13_reg_a;
wire [7:0] memory_controller__str13_out_a;
assign memory_controller__str13_out_a = {8{ select__str13_reg_a}} & _str13_out_a;

wire select_nfa_merge_states_0_1_a;
assign select_nfa_merge_states_0_1_a = (tag_a ==`TAG_nfa_merge_states_0_1);
reg select_nfa_merge_states_0_1_reg_a;
wire [7:0] memory_controller_nfa_merge_states_0_1_out_a;
assign memory_controller_nfa_merge_states_0_1_out_a = {8{ select_nfa_merge_states_0_1_reg_a}} & nfa_merge_states_0_1_out_a;

wire select_nfa_merge_states_0_2_a;
assign select_nfa_merge_states_0_2_a = (tag_a ==`TAG_nfa_merge_states_0_2);
reg select_nfa_merge_states_0_2_reg_a;
wire [7:0] memory_controller_nfa_merge_states_0_2_out_a;
assign memory_controller_nfa_merge_states_0_2_out_a = {8{ select_nfa_merge_states_0_2_reg_a}} & nfa_merge_states_0_2_out_a;

wire select_nfa_merge_states_0_3_a;
assign select_nfa_merge_states_0_3_a = (tag_a ==`TAG_nfa_merge_states_0_3);
reg select_nfa_merge_states_0_3_reg_a;
wire [7:0] memory_controller_nfa_merge_states_0_3_out_a;
assign memory_controller_nfa_merge_states_0_3_out_a = {8{ select_nfa_merge_states_0_3_reg_a}} & nfa_merge_states_0_3_out_a;

wire select_nfa_merge_states_0_4_a;
assign select_nfa_merge_states_0_4_a = (tag_a ==`TAG_nfa_merge_states_0_4);
reg select_nfa_merge_states_0_4_reg_a;
wire [7:0] memory_controller_nfa_merge_states_0_4_out_a;
assign memory_controller_nfa_merge_states_0_4_out_a = {8{ select_nfa_merge_states_0_4_reg_a}} & nfa_merge_states_0_4_out_a;

wire select_nfa_merge_states_0_5_a;
assign select_nfa_merge_states_0_5_a = (tag_a ==`TAG_nfa_merge_states_0_5);
reg select_nfa_merge_states_0_5_reg_a;
wire [7:0] memory_controller_nfa_merge_states_0_5_out_a;
assign memory_controller_nfa_merge_states_0_5_out_a = {8{ select_nfa_merge_states_0_5_reg_a}} & nfa_merge_states_0_5_out_a;

wire select_nfa_merge_states_0_6_a;
assign select_nfa_merge_states_0_6_a = (tag_a ==`TAG_nfa_merge_states_0_6);
reg select_nfa_merge_states_0_6_reg_a;
wire [7:0] memory_controller_nfa_merge_states_0_6_out_a;
assign memory_controller_nfa_merge_states_0_6_out_a = {8{ select_nfa_merge_states_0_6_reg_a}} & nfa_merge_states_0_6_out_a;

wire select_nfa_merge_states_0_bs_a;
assign select_nfa_merge_states_0_bs_a = (tag_a ==`TAG_nfa_merge_states_0_bs);
reg select_nfa_merge_states_0_bs_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_bs_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_bs_out_struct_a;
assign memory_controller_nfa_merge_states_0_bs_out_struct_a = {64{ select_nfa_merge_states_0_bs_reg_a}} & nfa_merge_states_0_bs_out_a;

wire select_nfa_merge_states_0_i_a;
assign select_nfa_merge_states_0_i_a = (tag_a ==`TAG_nfa_merge_states_0_i);
reg select_nfa_merge_states_0_i_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_i_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_i_out_struct_a;
assign memory_controller_nfa_merge_states_0_i_out_struct_a = {64{ select_nfa_merge_states_0_i_reg_a}} & nfa_merge_states_0_i_out_a;

wire select_nfa_merge_states_0_7_a;
assign select_nfa_merge_states_0_7_a = (tag_a ==`TAG_nfa_merge_states_0_7);
reg select_nfa_merge_states_0_7_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_7_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_7_out_struct_a;
assign memory_controller_nfa_merge_states_0_7_out_struct_a = {64{ select_nfa_merge_states_0_7_reg_a}} & nfa_merge_states_0_7_out_a;

wire select_nfa_merge_states_0_8_a;
assign select_nfa_merge_states_0_8_a = (tag_a ==`TAG_nfa_merge_states_0_8);
reg select_nfa_merge_states_0_8_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_8_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_8_out_struct_a;
assign memory_controller_nfa_merge_states_0_8_out_struct_a = {64{ select_nfa_merge_states_0_8_reg_a}} & nfa_merge_states_0_8_out_a;

wire select_nfa_merge_states_0_9_a;
assign select_nfa_merge_states_0_9_a = (tag_a ==`TAG_nfa_merge_states_0_9);
reg select_nfa_merge_states_0_9_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_9_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_9_out_struct_a;
assign memory_controller_nfa_merge_states_0_9_out_struct_a = {64{ select_nfa_merge_states_0_9_reg_a}} & nfa_merge_states_0_9_out_a;

wire select_nfa_merge_states_0_10_a;
assign select_nfa_merge_states_0_10_a = (tag_a ==`TAG_nfa_merge_states_0_10);
reg select_nfa_merge_states_0_10_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_10_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_10_out_struct_a;
assign memory_controller_nfa_merge_states_0_10_out_struct_a = {64{ select_nfa_merge_states_0_10_reg_a}} & nfa_merge_states_0_10_out_a;

wire select_nfa_merge_states_0_i1_a;
assign select_nfa_merge_states_0_i1_a = (tag_a ==`TAG_nfa_merge_states_0_i1);
reg select_nfa_merge_states_0_i1_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_i1_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_i1_out_struct_a;
assign memory_controller_nfa_merge_states_0_i1_out_struct_a = {64{ select_nfa_merge_states_0_i1_reg_a}} & nfa_merge_states_0_i1_out_a;

wire select_nfa_merge_states_0_11_a;
assign select_nfa_merge_states_0_11_a = (tag_a ==`TAG_nfa_merge_states_0_11);
reg select_nfa_merge_states_0_11_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_11_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_11_out_struct_a;
assign memory_controller_nfa_merge_states_0_11_out_struct_a = {64{ select_nfa_merge_states_0_11_reg_a}} & nfa_merge_states_0_11_out_a;

wire select_nfa_merge_states_0_12_a;
assign select_nfa_merge_states_0_12_a = (tag_a ==`TAG_nfa_merge_states_0_12);
reg select_nfa_merge_states_0_12_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_12_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_12_out_struct_a;
assign memory_controller_nfa_merge_states_0_12_out_struct_a = {64{ select_nfa_merge_states_0_12_reg_a}} & nfa_merge_states_0_12_out_a;

wire select_nfa_merge_states_0_13_a;
assign select_nfa_merge_states_0_13_a = (tag_a ==`TAG_nfa_merge_states_0_13);
reg select_nfa_merge_states_0_13_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_13_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_13_out_struct_a;
assign memory_controller_nfa_merge_states_0_13_out_struct_a = {64{ select_nfa_merge_states_0_13_reg_a}} & nfa_merge_states_0_13_out_a;

wire select_nfa_merge_states_0_14_a;
assign select_nfa_merge_states_0_14_a = (tag_a ==`TAG_nfa_merge_states_0_14);
reg select_nfa_merge_states_0_14_reg_a;
reg [63:0] memory_controller_nfa_merge_states_0_14_out_a;
wire [63:0] memory_controller_nfa_merge_states_0_14_out_struct_a;
assign memory_controller_nfa_merge_states_0_14_out_struct_a = {64{ select_nfa_merge_states_0_14_reg_a}} & nfa_merge_states_0_14_out_a;

wire select_nfa_accept_sample_0_next_a;
assign select_nfa_accept_sample_0_next_a = (tag_a ==`TAG_nfa_accept_sample_0_next);
reg select_nfa_accept_sample_0_next_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_next_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_next_out_struct_a;
assign memory_controller_nfa_accept_sample_0_next_out_struct_a = {64{ select_nfa_accept_sample_0_next_reg_a}} & nfa_accept_sample_0_next_out_a;

wire select_nfa_accept_sample_0_current_a;
assign select_nfa_accept_sample_0_current_a = (tag_a ==`TAG_nfa_accept_sample_0_current);
reg select_nfa_accept_sample_0_current_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_current_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_current_out_struct_a;
assign memory_controller_nfa_accept_sample_0_current_out_struct_a = {64{ select_nfa_accept_sample_0_current_reg_a}} & nfa_accept_sample_0_current_out_a;

wire select_nfa_accept_sample_0_tmp_a;
assign select_nfa_accept_sample_0_tmp_a = (tag_a ==`TAG_nfa_accept_sample_0_tmp);
reg select_nfa_accept_sample_0_tmp_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_tmp_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_tmp_out_struct_a;
assign memory_controller_nfa_accept_sample_0_tmp_out_struct_a = {64{ select_nfa_accept_sample_0_tmp_reg_a}} & nfa_accept_sample_0_tmp_out_a;

wire select_nfa_accept_sample_0_j_a;
assign select_nfa_accept_sample_0_j_a = (tag_a ==`TAG_nfa_accept_sample_0_j);
reg select_nfa_accept_sample_0_j_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_j_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_j_out_struct_a;
assign memory_controller_nfa_accept_sample_0_j_out_struct_a = {64{ select_nfa_accept_sample_0_j_reg_a}} & nfa_accept_sample_0_j_out_a;

wire select_nfa_accept_sample_0_1_a;
assign select_nfa_accept_sample_0_1_a = (tag_a ==`TAG_nfa_accept_sample_0_1);
reg select_nfa_accept_sample_0_1_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_1_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_1_out_struct_a;
assign memory_controller_nfa_accept_sample_0_1_out_struct_a = {64{ select_nfa_accept_sample_0_1_reg_a}} & nfa_accept_sample_0_1_out_a;

wire select_nfa_accept_sample_0_2_a;
assign select_nfa_accept_sample_0_2_a = (tag_a ==`TAG_nfa_accept_sample_0_2);
reg select_nfa_accept_sample_0_2_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_2_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_2_out_struct_a;
assign memory_controller_nfa_accept_sample_0_2_out_struct_a = {64{ select_nfa_accept_sample_0_2_reg_a}} & nfa_accept_sample_0_2_out_a;

wire select_nfa_accept_sample_0_3_a;
assign select_nfa_accept_sample_0_3_a = (tag_a ==`TAG_nfa_accept_sample_0_3);
reg select_nfa_accept_sample_0_3_reg_a;
reg [63:0] memory_controller_nfa_accept_sample_0_3_out_a;
wire [63:0] memory_controller_nfa_accept_sample_0_3_out_struct_a;
assign memory_controller_nfa_accept_sample_0_3_out_struct_a = {64{ select_nfa_accept_sample_0_3_reg_a}} & nfa_accept_sample_0_3_out_a;

wire select_nfa_print_0_1_a;
assign select_nfa_print_0_1_a = (tag_a ==`TAG_nfa_print_0_1);
reg select_nfa_print_0_1_reg_a;
wire [7:0] memory_controller_nfa_print_0_1_out_a;
assign memory_controller_nfa_print_0_1_out_a = {8{ select_nfa_print_0_1_reg_a}} & nfa_print_0_1_out_a;

wire select_nfa_print_0_2_a;
assign select_nfa_print_0_2_a = (tag_a ==`TAG_nfa_print_0_2);
reg select_nfa_print_0_2_reg_a;
wire [7:0] memory_controller_nfa_print_0_2_out_a;
assign memory_controller_nfa_print_0_2_out_a = {8{ select_nfa_print_0_2_reg_a}} & nfa_print_0_2_out_a;

wire select_nfa_print_0_suc_a;
assign select_nfa_print_0_suc_a = (tag_a ==`TAG_nfa_print_0_suc);
reg select_nfa_print_0_suc_reg_a;
reg [63:0] memory_controller_nfa_print_0_suc_out_a;
wire [63:0] memory_controller_nfa_print_0_suc_out_struct_a;
assign memory_controller_nfa_print_0_suc_out_struct_a = {64{ select_nfa_print_0_suc_reg_a}} & nfa_print_0_suc_out_a;

wire select_nfa_print_0_suc2_a;
assign select_nfa_print_0_suc2_a = (tag_a ==`TAG_nfa_print_0_suc2);
reg select_nfa_print_0_suc2_reg_a;
reg [63:0] memory_controller_nfa_print_0_suc2_out_a;
wire [63:0] memory_controller_nfa_print_0_suc2_out_struct_a;
assign memory_controller_nfa_print_0_suc2_out_struct_a = {64{ select_nfa_print_0_suc2_reg_a}} & nfa_print_0_suc2_out_a;

wire select_nfa_print_0_qt_a;
assign select_nfa_print_0_qt_a = (tag_a ==`TAG_nfa_print_0_qt);
reg select_nfa_print_0_qt_reg_a;
reg [63:0] memory_controller_nfa_print_0_qt_out_a;
wire [63:0] memory_controller_nfa_print_0_qt_out_struct_a;
assign memory_controller_nfa_print_0_qt_out_struct_a = {64{ select_nfa_print_0_qt_reg_a}} & nfa_print_0_qt_out_a;

wire select_nfa_print_0_3_a;
assign select_nfa_print_0_3_a = (tag_a ==`TAG_nfa_print_0_3);
reg select_nfa_print_0_3_reg_a;
reg [63:0] memory_controller_nfa_print_0_3_out_a;
wire [63:0] memory_controller_nfa_print_0_3_out_struct_a;
assign memory_controller_nfa_print_0_3_out_struct_a = {64{ select_nfa_print_0_3_reg_a}} & nfa_print_0_3_out_a;

wire select_nfa_print_0_4_a;
assign select_nfa_print_0_4_a = (tag_a ==`TAG_nfa_print_0_4);
reg select_nfa_print_0_4_reg_a;
reg [63:0] memory_controller_nfa_print_0_4_out_a;
wire [63:0] memory_controller_nfa_print_0_4_out_struct_a;
assign memory_controller_nfa_print_0_4_out_struct_a = {64{ select_nfa_print_0_4_reg_a}} & nfa_print_0_4_out_a;

wire select_nfa_print_0_5_a;
assign select_nfa_print_0_5_a = (tag_a ==`TAG_nfa_print_0_5);
reg select_nfa_print_0_5_reg_a;
reg [63:0] memory_controller_nfa_print_0_5_out_a;
wire [63:0] memory_controller_nfa_print_0_5_out_struct_a;
assign memory_controller_nfa_print_0_5_out_struct_a = {64{ select_nfa_print_0_5_reg_a}} & nfa_print_0_5_out_a;

wire select_nfa_print_0_6_a;
assign select_nfa_print_0_6_a = (tag_a ==`TAG_nfa_print_0_6);
reg select_nfa_print_0_6_reg_a;
reg [63:0] memory_controller_nfa_print_0_6_out_a;
wire [63:0] memory_controller_nfa_print_0_6_out_struct_a;
assign memory_controller_nfa_print_0_6_out_struct_a = {64{ select_nfa_print_0_6_reg_a}} & nfa_print_0_6_out_a;

wire select_nfa_print_0_7_a;
assign select_nfa_print_0_7_a = (tag_a ==`TAG_nfa_print_0_7);
reg select_nfa_print_0_7_reg_a;
reg [63:0] memory_controller_nfa_print_0_7_out_a;
wire [63:0] memory_controller_nfa_print_0_7_out_struct_a;
assign memory_controller_nfa_print_0_7_out_struct_a = {64{ select_nfa_print_0_7_reg_a}} & nfa_print_0_7_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str1_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str1_a}};
	_str1_write_enable_a = memory_controller_write_enable_a & select__str1_a;
	_str1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_add_initial_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_add_initial_a}};
	__PRETTY_FUNCTION___nfa_add_initial_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_add_initial_a;
	__PRETTY_FUNCTION___nfa_add_initial_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_remove_initial_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_remove_initial_a}};
	__PRETTY_FUNCTION___nfa_remove_initial_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_remove_initial_a;
	__PRETTY_FUNCTION___nfa_remove_initial_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_is_initial_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_is_initial_a}};
	__PRETTY_FUNCTION___nfa_is_initial_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_is_initial_a;
	__PRETTY_FUNCTION___nfa_is_initial_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_add_final_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_add_final_a}};
	__PRETTY_FUNCTION___nfa_add_final_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_add_final_a;
	__PRETTY_FUNCTION___nfa_add_final_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_remove_final_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_remove_final_a}};
	__PRETTY_FUNCTION___nfa_remove_final_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_remove_final_a;
	__PRETTY_FUNCTION___nfa_remove_final_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_is_final_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_is_final_a}};
	__PRETTY_FUNCTION___nfa_is_final_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_is_final_a;
	__PRETTY_FUNCTION___nfa_is_final_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str2_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str2_a}};
	_str2_write_enable_a = memory_controller_write_enable_a & select__str2_a;
	_str2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_get_sucessors_address_a = memory_controller_address_a [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_get_sucessors_a}};
	__PRETTY_FUNCTION___nfa_get_sucessors_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_get_sucessors_a;
	__PRETTY_FUNCTION___nfa_get_sucessors_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str3_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str3_a}};
	_str3_write_enable_a = memory_controller_write_enable_a & select__str3_a;
	_str3_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_get_predecessors_address_a = memory_controller_address_a [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_get_predecessors_a}};
	__PRETTY_FUNCTION___nfa_get_predecessors_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_get_predecessors_a;
	__PRETTY_FUNCTION___nfa_get_predecessors_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str5_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str5_a}};
	_str5_write_enable_a = memory_controller_write_enable_a & select__str5_a;
	_str5_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_add_transition_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_add_transition_a}};
	__PRETTY_FUNCTION___nfa_add_transition_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_add_transition_a;
	__PRETTY_FUNCTION___nfa_add_transition_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str6_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str6_a}};
	_str6_write_enable_a = memory_controller_write_enable_a & select__str6_a;
	_str6_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str7_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str7_a}};
	_str7_write_enable_a = memory_controller_write_enable_a & select__str7_a;
	_str7_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_remove_transition_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_remove_transition_a}};
	__PRETTY_FUNCTION___nfa_remove_transition_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_remove_transition_a;
	__PRETTY_FUNCTION___nfa_remove_transition_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_merge_states_address_a = memory_controller_address_a [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_merge_states_a}};
	__PRETTY_FUNCTION___nfa_merge_states_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_merge_states_a;
	__PRETTY_FUNCTION___nfa_merge_states_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str8_address_a = memory_controller_address_a [5-1+0:0] & {5{select__str8_a}};
	_str8_write_enable_a = memory_controller_write_enable_a & select__str8_a;
	_str8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str9_address_a = memory_controller_address_a [6-1+0:0] & {6{select__str9_a}};
	_str9_write_enable_a = memory_controller_write_enable_a & select__str9_a;
	_str9_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_accept_any_sample_address_a = memory_controller_address_a [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_accept_any_sample_a}};
	__PRETTY_FUNCTION___nfa_accept_any_sample_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_accept_any_sample_a;
	__PRETTY_FUNCTION___nfa_accept_any_sample_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_accept_all_samples_address_a = memory_controller_address_a [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_accept_all_samples_a}};
	__PRETTY_FUNCTION___nfa_accept_all_samples_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_accept_all_samples_a;
	__PRETTY_FUNCTION___nfa_accept_all_samples_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	__PRETTY_FUNCTION___nfa_accept_samples_address_a = memory_controller_address_a [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_accept_samples_a}};
	__PRETTY_FUNCTION___nfa_accept_samples_write_enable_a = memory_controller_write_enable_a & select___PRETTY_FUNCTION___nfa_accept_samples_a;
	__PRETTY_FUNCTION___nfa_accept_samples_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str11_address_a = memory_controller_address_a [1-1+0:0] & {1{select__str11_a}};
	_str11_write_enable_a = memory_controller_write_enable_a & select__str11_a;
	_str11_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str12_address_a = memory_controller_address_a [1-1+0:0] & {1{select__str12_a}};
	_str12_write_enable_a = memory_controller_write_enable_a & select__str12_a;
	_str12_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	_str13_address_a = memory_controller_address_a [1-1+0:0] & {1{select__str13_a}};
	_str13_write_enable_a = memory_controller_write_enable_a & select__str13_a;
	_str13_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_1_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_merge_states_0_1_a}};
	nfa_merge_states_0_1_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_1_a;
	nfa_merge_states_0_1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_2_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_merge_states_0_2_a}};
	nfa_merge_states_0_2_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_2_a;
	nfa_merge_states_0_2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_3_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_merge_states_0_3_a}};
	nfa_merge_states_0_3_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_3_a;
	nfa_merge_states_0_3_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_4_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_merge_states_0_4_a}};
	nfa_merge_states_0_4_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_4_a;
	nfa_merge_states_0_4_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_5_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_merge_states_0_5_a}};
	nfa_merge_states_0_5_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_5_a;
	nfa_merge_states_0_5_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_6_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_merge_states_0_6_a}};
	nfa_merge_states_0_6_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_6_a;
	nfa_merge_states_0_6_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_merge_states_0_bs_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_bs_a}};
	nfa_merge_states_0_bs_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_bs_a;
				nfa_merge_states_0_bs_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_bs_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_bs_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_bs_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_bs_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_bs_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_bs_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_bs_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_bs_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_bs_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_bs_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_bs_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_bs_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_bs_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_bs_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_bs_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_bs_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_bs_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_bs_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_bs_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_i_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_i_a}};
	nfa_merge_states_0_i_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_i_a;
				nfa_merge_states_0_i_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_i_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_i_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_i_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_i_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_i_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_i_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_i_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_i_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_i_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_i_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_i_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_i_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_i_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_i_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_i_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_i_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_i_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_i_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_7_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_7_a}};
	nfa_merge_states_0_7_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_7_a;
				nfa_merge_states_0_7_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_7_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_7_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_7_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_7_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_7_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_7_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_7_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_7_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_7_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_7_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_7_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_7_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_7_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_7_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_7_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_7_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_7_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_7_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_7_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_8_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_8_a}};
	nfa_merge_states_0_8_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_8_a;
				nfa_merge_states_0_8_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_8_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_8_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_8_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_8_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_8_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_8_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_8_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_8_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_8_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_8_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_8_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_8_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_8_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_8_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_8_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_8_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_8_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_8_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_8_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_9_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_9_a}};
	nfa_merge_states_0_9_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_9_a;
				nfa_merge_states_0_9_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_9_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_9_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_9_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_9_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_9_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_9_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_9_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_9_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_9_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_9_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_9_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_9_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_9_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_9_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_9_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_9_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_9_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_9_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_9_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_10_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_10_a}};
	nfa_merge_states_0_10_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_10_a;
				nfa_merge_states_0_10_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_10_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_10_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_10_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_10_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_10_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_10_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_10_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_10_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_10_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_10_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_10_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_10_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_10_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_10_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_10_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_10_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_10_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_10_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_10_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_i1_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_i1_a}};
	nfa_merge_states_0_i1_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_i1_a;
				nfa_merge_states_0_i1_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_i1_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_i1_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_i1_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_i1_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_i1_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_i1_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_i1_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_i1_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_i1_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_i1_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_i1_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_i1_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_i1_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_i1_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_i1_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_i1_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_i1_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_i1_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_i1_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_11_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_11_a}};
	nfa_merge_states_0_11_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_11_a;
				nfa_merge_states_0_11_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_11_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_11_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_11_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_11_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_11_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_11_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_11_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_11_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_11_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_11_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_11_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_11_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_11_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_11_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_11_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_11_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_11_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_11_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_11_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_12_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_12_a}};
	nfa_merge_states_0_12_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_12_a;
				nfa_merge_states_0_12_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_12_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_12_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_12_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_12_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_12_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_12_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_12_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_12_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_12_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_12_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_12_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_12_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_12_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_12_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_12_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_12_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_12_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_12_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_12_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_13_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_13_a}};
	nfa_merge_states_0_13_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_13_a;
				nfa_merge_states_0_13_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_13_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_13_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_13_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_13_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_13_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_13_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_13_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_13_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_13_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_13_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_13_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_13_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_13_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_13_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_13_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_13_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_13_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_13_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_13_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_14_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_merge_states_0_14_a}};
	nfa_merge_states_0_14_write_enable_a = memory_controller_write_enable_a & select_nfa_merge_states_0_14_a;
				nfa_merge_states_0_14_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_merge_states_0_14_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_merge_states_0_14_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_merge_states_0_14_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_14_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_14_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_merge_states_0_14_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_merge_states_0_14_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_14_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_14_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_14_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_merge_states_0_14_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_14_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_14_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_14_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_14_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_14_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_14_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_14_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_merge_states_0_14_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_next_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_next_a}};
	nfa_accept_sample_0_next_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_next_a;
				nfa_accept_sample_0_next_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_next_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_next_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_next_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_next_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_next_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_next_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_next_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_next_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_next_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_next_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_next_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_next_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_next_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_next_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_next_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_next_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_next_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_next_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_next_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_current_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_current_a}};
	nfa_accept_sample_0_current_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_current_a;
				nfa_accept_sample_0_current_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_current_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_current_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_current_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_current_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_current_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_current_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_current_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_current_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_current_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_current_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_current_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_current_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_current_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_current_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_current_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_current_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_current_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_current_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_current_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_tmp_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_tmp_a}};
	nfa_accept_sample_0_tmp_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_tmp_a;
				nfa_accept_sample_0_tmp_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_tmp_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_tmp_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_tmp_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_tmp_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_tmp_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_tmp_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_tmp_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_tmp_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_tmp_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_tmp_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_tmp_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_tmp_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_tmp_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_tmp_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_tmp_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_tmp_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_tmp_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_tmp_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_tmp_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_j_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_j_a}};
	nfa_accept_sample_0_j_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_j_a;
				nfa_accept_sample_0_j_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_j_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_j_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_j_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_j_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_j_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_j_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_j_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_j_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_j_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_j_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_j_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_j_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_j_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_j_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_j_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_j_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_j_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_j_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_j_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_1_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_1_a}};
	nfa_accept_sample_0_1_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_1_a;
				nfa_accept_sample_0_1_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_1_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_1_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_1_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_1_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_1_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_1_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_1_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_1_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_1_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_1_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_1_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_1_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_1_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_1_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_1_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_1_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_1_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_1_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_1_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_2_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_2_a}};
	nfa_accept_sample_0_2_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_2_a;
				nfa_accept_sample_0_2_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_2_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_2_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_2_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_2_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_2_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_2_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_2_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_2_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_2_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_2_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_2_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_2_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_2_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_2_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_2_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_2_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_2_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_2_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_2_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_3_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_accept_sample_0_3_a}};
	nfa_accept_sample_0_3_write_enable_a = memory_controller_write_enable_a & select_nfa_accept_sample_0_3_a;
				nfa_accept_sample_0_3_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_accept_sample_0_3_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_accept_sample_0_3_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_accept_sample_0_3_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_3_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_3_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_accept_sample_0_3_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_accept_sample_0_3_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_3_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_3_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_3_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_accept_sample_0_3_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_3_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_3_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_3_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_3_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_3_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_3_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_3_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_accept_sample_0_3_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_1_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_print_0_1_a}};
	nfa_print_0_1_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_1_a;
	nfa_print_0_1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_print_0_2_address_a = memory_controller_address_a [1-1+0:0] & {1{select_nfa_print_0_2_a}};
	nfa_print_0_2_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_2_a;
	nfa_print_0_2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	nfa_print_0_suc_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_suc_a}};
	nfa_print_0_suc_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_suc_a;
				nfa_print_0_suc_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_suc_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_suc_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_suc_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_suc_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_suc_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_suc_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_suc_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_suc_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_suc_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_suc_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_suc_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_suc_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_suc_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_suc_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_suc_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_suc_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_suc_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_suc_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_suc2_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_suc2_a}};
	nfa_print_0_suc2_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_suc2_a;
				nfa_print_0_suc2_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_suc2_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_suc2_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_suc2_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_suc2_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_suc2_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_suc2_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_suc2_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc2_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_suc2_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc2_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_suc2_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc2_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_suc2_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_suc2_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_suc2_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_suc2_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_suc2_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_suc2_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_suc2_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_suc2_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_suc2_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_suc2_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_suc2_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_qt_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_qt_a}};
	nfa_print_0_qt_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_qt_a;
				nfa_print_0_qt_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_qt_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_qt_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_qt_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_qt_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_qt_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_qt_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_qt_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_qt_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_qt_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_qt_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_qt_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_qt_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_qt_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_qt_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_qt_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_qt_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_qt_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_qt_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_qt_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_qt_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_qt_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_qt_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_qt_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_3_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_3_a}};
	nfa_print_0_3_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_3_a;
				nfa_print_0_3_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_3_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_3_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_3_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_3_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_3_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_3_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_3_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_3_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_3_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_3_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_3_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_3_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_3_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_3_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_3_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_3_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_3_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_3_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_3_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_3_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_3_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_3_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_3_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_4_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_4_a}};
	nfa_print_0_4_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_4_a;
				nfa_print_0_4_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_4_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_4_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_4_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_4_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_4_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_4_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_4_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_4_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_4_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_4_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_4_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_4_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_4_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_4_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_4_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_4_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_4_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_4_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_4_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_4_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_4_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_4_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_4_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_5_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_5_a}};
	nfa_print_0_5_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_5_a;
				nfa_print_0_5_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_5_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_5_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_5_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_5_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_5_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_5_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_5_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_5_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_5_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_5_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_5_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_5_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_5_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_5_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_5_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_5_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_5_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_5_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_5_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_5_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_5_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_5_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_5_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_6_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_6_a}};
	nfa_print_0_6_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_6_a;
				nfa_print_0_6_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_6_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_6_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_6_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_6_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_6_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_6_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_6_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_6_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_6_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_6_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_6_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_6_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_6_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_6_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_6_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_6_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_6_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_6_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_6_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_6_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_6_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_6_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_6_byteena_a = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_7_address_a = memory_controller_address_a[4-1:3] & {1{select_nfa_print_0_7_a}};
	nfa_print_0_7_write_enable_a = memory_controller_write_enable_a & select_nfa_print_0_7_a;
				nfa_print_0_7_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				nfa_print_0_7_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				nfa_print_0_7_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					nfa_print_0_7_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					nfa_print_0_7_byteena_a = 8'b00001111;
				end
				else
				begin
					nfa_print_0_7_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					nfa_print_0_7_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						nfa_print_0_7_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						nfa_print_0_7_byteena_a = 8'd3;
					end
					1:
					begin
						nfa_print_0_7_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						nfa_print_0_7_byteena_a = 8'd12;
					end
					2:
					begin
						nfa_print_0_7_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						nfa_print_0_7_byteena_a = 8'd48;
					end
					3:
					begin
						nfa_print_0_7_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						nfa_print_0_7_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						nfa_print_0_7_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd1;
					end
					1:
					begin
						nfa_print_0_7_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd2;
					end
					2:
					begin
						nfa_print_0_7_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd4;
					end
					3:
					begin
						nfa_print_0_7_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd8;
					end
					4:
					begin
						nfa_print_0_7_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd16;
					end
					5:
					begin
						nfa_print_0_7_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd32;
					end
					6:
					begin
						nfa_print_0_7_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd64;
					end
					7:
					begin
						nfa_print_0_7_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						nfa_print_0_7_byteena_a = 8'd128;
					end
			endcase
		endcase

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_nfa_merge_states_0_bs_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_bs_out_a[64-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_bs_out_a[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_bs_out_a[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_bs_out_a[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_bs_out_a[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_bs_out_a[16-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_bs_out_a[16-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_bs_out_a[8-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_i_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_i_out_a[64-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_i_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_i_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_i_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_i_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_i_out_a[16-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_i_out_a[16-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_i_out_a[8-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_7_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_7_out_a[64-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_7_out_a[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_7_out_a[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_7_out_a[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_7_out_a[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_7_out_a[16-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_7_out_a[16-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_7_out_a[8-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_8_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_8_out_a[64-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_8_out_a[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_8_out_a[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_8_out_a[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_8_out_a[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_8_out_a[16-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_8_out_a[16-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_8_out_a[8-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_9_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_9_out_a[64-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_9_out_a[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_9_out_a[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_9_out_a[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_9_out_a[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_9_out_a[16-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_9_out_a[16-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_9_out_a[8-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_10_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_10_out_a[64-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_10_out_a[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_10_out_a[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_10_out_a[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_10_out_a[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_10_out_a[16-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_10_out_a[16-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_10_out_a[8-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_i1_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_i1_out_a[64-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_i1_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_i1_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_i1_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_i1_out_a[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_i1_out_a[16-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_i1_out_a[16-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_i1_out_a[8-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_11_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_11_out_a[64-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_11_out_a[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_11_out_a[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_11_out_a[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_11_out_a[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_11_out_a[16-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_11_out_a[16-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_11_out_a[8-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_12_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_12_out_a[64-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_12_out_a[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_12_out_a[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_12_out_a[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_12_out_a[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_12_out_a[16-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_12_out_a[16-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_12_out_a[8-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_13_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_13_out_a[64-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_13_out_a[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_13_out_a[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_13_out_a[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_13_out_a[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_13_out_a[16-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_13_out_a[16-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_13_out_a[8-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_14_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_merge_states_0_14_out_a[64-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[64-1:0];
		1: memory_controller_nfa_merge_states_0_14_out_a[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[40-1:8];
		2: memory_controller_nfa_merge_states_0_14_out_a[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[48-1:16];
		3: memory_controller_nfa_merge_states_0_14_out_a[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[56-1:24];
		4: memory_controller_nfa_merge_states_0_14_out_a[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[64-1:32];
		5: memory_controller_nfa_merge_states_0_14_out_a[16-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[56-1:40];
		6: memory_controller_nfa_merge_states_0_14_out_a[16-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[64-1:48];
		7: memory_controller_nfa_merge_states_0_14_out_a[8-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_next_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_next_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_next_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_next_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_next_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_next_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_next_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_next_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_next_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_current_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_current_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_current_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_current_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_current_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_current_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_current_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_current_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_current_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_tmp_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_tmp_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_tmp_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_tmp_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_tmp_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_tmp_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_tmp_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_tmp_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_tmp_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_j_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_j_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_j_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_j_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_j_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_j_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_j_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_j_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_j_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_1_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_1_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_1_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_1_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_1_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_1_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_1_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_1_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_1_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_2_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_2_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_2_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_2_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_2_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_2_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_2_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_2_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_2_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_3_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_accept_sample_0_3_out_a[64-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[64-1:0];
		1: memory_controller_nfa_accept_sample_0_3_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[40-1:8];
		2: memory_controller_nfa_accept_sample_0_3_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[48-1:16];
		3: memory_controller_nfa_accept_sample_0_3_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[56-1:24];
		4: memory_controller_nfa_accept_sample_0_3_out_a[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[64-1:32];
		5: memory_controller_nfa_accept_sample_0_3_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[56-1:40];
		6: memory_controller_nfa_accept_sample_0_3_out_a[16-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[64-1:48];
		7: memory_controller_nfa_accept_sample_0_3_out_a[8-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_suc_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_suc_out_a[64-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_suc_out_a[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_suc_out_a[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_suc_out_a[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_suc_out_a[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_suc_out_a[16-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_suc_out_a[16-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_suc_out_a[8-1:0] = memory_controller_nfa_print_0_suc_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_suc2_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_suc2_out_a[64-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_suc2_out_a[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_suc2_out_a[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_suc2_out_a[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_suc2_out_a[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_suc2_out_a[16-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_suc2_out_a[16-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_suc2_out_a[8-1:0] = memory_controller_nfa_print_0_suc2_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_qt_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_qt_out_a[64-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_qt_out_a[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_qt_out_a[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_qt_out_a[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_qt_out_a[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_qt_out_a[16-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_qt_out_a[16-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_qt_out_a[8-1:0] = memory_controller_nfa_print_0_qt_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_3_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_3_out_a[64-1:0] = memory_controller_nfa_print_0_3_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_3_out_a[32-1:0] = memory_controller_nfa_print_0_3_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_3_out_a[32-1:0] = memory_controller_nfa_print_0_3_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_3_out_a[32-1:0] = memory_controller_nfa_print_0_3_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_3_out_a[32-1:0] = memory_controller_nfa_print_0_3_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_3_out_a[16-1:0] = memory_controller_nfa_print_0_3_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_3_out_a[16-1:0] = memory_controller_nfa_print_0_3_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_3_out_a[8-1:0] = memory_controller_nfa_print_0_3_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_4_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_4_out_a[64-1:0] = memory_controller_nfa_print_0_4_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_4_out_a[32-1:0] = memory_controller_nfa_print_0_4_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_4_out_a[32-1:0] = memory_controller_nfa_print_0_4_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_4_out_a[32-1:0] = memory_controller_nfa_print_0_4_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_4_out_a[32-1:0] = memory_controller_nfa_print_0_4_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_4_out_a[16-1:0] = memory_controller_nfa_print_0_4_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_4_out_a[16-1:0] = memory_controller_nfa_print_0_4_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_4_out_a[8-1:0] = memory_controller_nfa_print_0_4_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_5_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_5_out_a[64-1:0] = memory_controller_nfa_print_0_5_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_5_out_a[32-1:0] = memory_controller_nfa_print_0_5_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_5_out_a[32-1:0] = memory_controller_nfa_print_0_5_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_5_out_a[32-1:0] = memory_controller_nfa_print_0_5_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_5_out_a[32-1:0] = memory_controller_nfa_print_0_5_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_5_out_a[16-1:0] = memory_controller_nfa_print_0_5_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_5_out_a[16-1:0] = memory_controller_nfa_print_0_5_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_5_out_a[8-1:0] = memory_controller_nfa_print_0_5_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_6_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_6_out_a[64-1:0] = memory_controller_nfa_print_0_6_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_6_out_a[32-1:0] = memory_controller_nfa_print_0_6_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_6_out_a[32-1:0] = memory_controller_nfa_print_0_6_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_6_out_a[32-1:0] = memory_controller_nfa_print_0_6_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_6_out_a[32-1:0] = memory_controller_nfa_print_0_6_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_6_out_a[16-1:0] = memory_controller_nfa_print_0_6_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_6_out_a[16-1:0] = memory_controller_nfa_print_0_6_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_6_out_a[8-1:0] = memory_controller_nfa_print_0_6_out_struct_a[64-1:56];
	endcase

	memory_controller_nfa_print_0_7_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_nfa_print_0_7_out_a[64-1:0] = memory_controller_nfa_print_0_7_out_struct_a[64-1:0];
		1: memory_controller_nfa_print_0_7_out_a[32-1:0] = memory_controller_nfa_print_0_7_out_struct_a[40-1:8];
		2: memory_controller_nfa_print_0_7_out_a[32-1:0] = memory_controller_nfa_print_0_7_out_struct_a[48-1:16];
		3: memory_controller_nfa_print_0_7_out_a[32-1:0] = memory_controller_nfa_print_0_7_out_struct_a[56-1:24];
		4: memory_controller_nfa_print_0_7_out_a[32-1:0] = memory_controller_nfa_print_0_7_out_struct_a[64-1:32];
		5: memory_controller_nfa_print_0_7_out_a[16-1:0] = memory_controller_nfa_print_0_7_out_struct_a[56-1:40];
		6: memory_controller_nfa_print_0_7_out_a[16-1:0] = memory_controller_nfa_print_0_7_out_struct_a[64-1:48];
		7: memory_controller_nfa_print_0_7_out_a[8-1:0] = memory_controller_nfa_print_0_7_out_struct_a[64-1:56];
	endcase

	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a | memory_controller__str1_out_a | memory_controller___PRETTY_FUNCTION___nfa_add_initial_out_a | memory_controller___PRETTY_FUNCTION___nfa_remove_initial_out_a | memory_controller___PRETTY_FUNCTION___nfa_is_initial_out_a | memory_controller___PRETTY_FUNCTION___nfa_add_final_out_a | memory_controller___PRETTY_FUNCTION___nfa_remove_final_out_a | memory_controller___PRETTY_FUNCTION___nfa_is_final_out_a | memory_controller__str2_out_a | memory_controller___PRETTY_FUNCTION___nfa_get_sucessors_out_a | memory_controller__str3_out_a | memory_controller___PRETTY_FUNCTION___nfa_get_predecessors_out_a | memory_controller__str5_out_a | memory_controller___PRETTY_FUNCTION___nfa_add_transition_out_a | memory_controller__str6_out_a | memory_controller__str7_out_a | memory_controller___PRETTY_FUNCTION___nfa_remove_transition_out_a | memory_controller___PRETTY_FUNCTION___nfa_merge_states_out_a | memory_controller__str8_out_a | memory_controller__str9_out_a | memory_controller___PRETTY_FUNCTION___nfa_accept_any_sample_out_a | memory_controller___PRETTY_FUNCTION___nfa_accept_all_samples_out_a | memory_controller___PRETTY_FUNCTION___nfa_accept_samples_out_a | memory_controller__str11_out_a | memory_controller__str12_out_a | memory_controller__str13_out_a | memory_controller_nfa_merge_states_0_1_out_a | memory_controller_nfa_merge_states_0_2_out_a | memory_controller_nfa_merge_states_0_3_out_a | memory_controller_nfa_merge_states_0_4_out_a | memory_controller_nfa_merge_states_0_5_out_a | memory_controller_nfa_merge_states_0_6_out_a | memory_controller_nfa_merge_states_0_bs_out_a | memory_controller_nfa_merge_states_0_i_out_a | memory_controller_nfa_merge_states_0_7_out_a | memory_controller_nfa_merge_states_0_8_out_a | memory_controller_nfa_merge_states_0_9_out_a | memory_controller_nfa_merge_states_0_10_out_a | memory_controller_nfa_merge_states_0_i1_out_a | memory_controller_nfa_merge_states_0_11_out_a | memory_controller_nfa_merge_states_0_12_out_a | memory_controller_nfa_merge_states_0_13_out_a | memory_controller_nfa_merge_states_0_14_out_a | memory_controller_nfa_accept_sample_0_next_out_a | memory_controller_nfa_accept_sample_0_current_out_a | memory_controller_nfa_accept_sample_0_tmp_out_a | memory_controller_nfa_accept_sample_0_j_out_a | memory_controller_nfa_accept_sample_0_1_out_a | memory_controller_nfa_accept_sample_0_2_out_a | memory_controller_nfa_accept_sample_0_3_out_a | memory_controller_nfa_print_0_1_out_a | memory_controller_nfa_print_0_2_out_a | memory_controller_nfa_print_0_suc_out_a | memory_controller_nfa_print_0_suc2_out_a | memory_controller_nfa_print_0_qt_out_a | memory_controller_nfa_print_0_3_out_a | memory_controller_nfa_print_0_4_out_a | memory_controller_nfa_print_0_5_out_a | memory_controller_nfa_print_0_6_out_a | memory_controller_nfa_print_0_7_out_a;
end

always @(posedge clk)
begin
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
select__str1_reg_a <= select__str1_a;
select___PRETTY_FUNCTION___nfa_add_initial_reg_a <= select___PRETTY_FUNCTION___nfa_add_initial_a;
select___PRETTY_FUNCTION___nfa_remove_initial_reg_a <= select___PRETTY_FUNCTION___nfa_remove_initial_a;
select___PRETTY_FUNCTION___nfa_is_initial_reg_a <= select___PRETTY_FUNCTION___nfa_is_initial_a;
select___PRETTY_FUNCTION___nfa_add_final_reg_a <= select___PRETTY_FUNCTION___nfa_add_final_a;
select___PRETTY_FUNCTION___nfa_remove_final_reg_a <= select___PRETTY_FUNCTION___nfa_remove_final_a;
select___PRETTY_FUNCTION___nfa_is_final_reg_a <= select___PRETTY_FUNCTION___nfa_is_final_a;
select__str2_reg_a <= select__str2_a;
select___PRETTY_FUNCTION___nfa_get_sucessors_reg_a <= select___PRETTY_FUNCTION___nfa_get_sucessors_a;
select__str3_reg_a <= select__str3_a;
select___PRETTY_FUNCTION___nfa_get_predecessors_reg_a <= select___PRETTY_FUNCTION___nfa_get_predecessors_a;
select__str5_reg_a <= select__str5_a;
select___PRETTY_FUNCTION___nfa_add_transition_reg_a <= select___PRETTY_FUNCTION___nfa_add_transition_a;
select__str6_reg_a <= select__str6_a;
select__str7_reg_a <= select__str7_a;
select___PRETTY_FUNCTION___nfa_remove_transition_reg_a <= select___PRETTY_FUNCTION___nfa_remove_transition_a;
select___PRETTY_FUNCTION___nfa_merge_states_reg_a <= select___PRETTY_FUNCTION___nfa_merge_states_a;
select__str8_reg_a <= select__str8_a;
select__str9_reg_a <= select__str9_a;
select___PRETTY_FUNCTION___nfa_accept_any_sample_reg_a <= select___PRETTY_FUNCTION___nfa_accept_any_sample_a;
select___PRETTY_FUNCTION___nfa_accept_all_samples_reg_a <= select___PRETTY_FUNCTION___nfa_accept_all_samples_a;
select___PRETTY_FUNCTION___nfa_accept_samples_reg_a <= select___PRETTY_FUNCTION___nfa_accept_samples_a;
select__str11_reg_a <= select__str11_a;
select__str12_reg_a <= select__str12_a;
select__str13_reg_a <= select__str13_a;
select_nfa_merge_states_0_1_reg_a <= select_nfa_merge_states_0_1_a;
select_nfa_merge_states_0_2_reg_a <= select_nfa_merge_states_0_2_a;
select_nfa_merge_states_0_3_reg_a <= select_nfa_merge_states_0_3_a;
select_nfa_merge_states_0_4_reg_a <= select_nfa_merge_states_0_4_a;
select_nfa_merge_states_0_5_reg_a <= select_nfa_merge_states_0_5_a;
select_nfa_merge_states_0_6_reg_a <= select_nfa_merge_states_0_6_a;
select_nfa_merge_states_0_bs_reg_a <= select_nfa_merge_states_0_bs_a;
select_nfa_merge_states_0_i_reg_a <= select_nfa_merge_states_0_i_a;
select_nfa_merge_states_0_7_reg_a <= select_nfa_merge_states_0_7_a;
select_nfa_merge_states_0_8_reg_a <= select_nfa_merge_states_0_8_a;
select_nfa_merge_states_0_9_reg_a <= select_nfa_merge_states_0_9_a;
select_nfa_merge_states_0_10_reg_a <= select_nfa_merge_states_0_10_a;
select_nfa_merge_states_0_i1_reg_a <= select_nfa_merge_states_0_i1_a;
select_nfa_merge_states_0_11_reg_a <= select_nfa_merge_states_0_11_a;
select_nfa_merge_states_0_12_reg_a <= select_nfa_merge_states_0_12_a;
select_nfa_merge_states_0_13_reg_a <= select_nfa_merge_states_0_13_a;
select_nfa_merge_states_0_14_reg_a <= select_nfa_merge_states_0_14_a;
select_nfa_accept_sample_0_next_reg_a <= select_nfa_accept_sample_0_next_a;
select_nfa_accept_sample_0_current_reg_a <= select_nfa_accept_sample_0_current_a;
select_nfa_accept_sample_0_tmp_reg_a <= select_nfa_accept_sample_0_tmp_a;
select_nfa_accept_sample_0_j_reg_a <= select_nfa_accept_sample_0_j_a;
select_nfa_accept_sample_0_1_reg_a <= select_nfa_accept_sample_0_1_a;
select_nfa_accept_sample_0_2_reg_a <= select_nfa_accept_sample_0_2_a;
select_nfa_accept_sample_0_3_reg_a <= select_nfa_accept_sample_0_3_a;
select_nfa_print_0_1_reg_a <= select_nfa_print_0_1_a;
select_nfa_print_0_2_reg_a <= select_nfa_print_0_2_a;
select_nfa_print_0_suc_reg_a <= select_nfa_print_0_suc_a;
select_nfa_print_0_suc2_reg_a <= select_nfa_print_0_suc2_a;
select_nfa_print_0_qt_reg_a <= select_nfa_print_0_qt_a;
select_nfa_print_0_3_reg_a <= select_nfa_print_0_3_a;
select_nfa_print_0_4_reg_a <= select_nfa_print_0_4_a;
select_nfa_print_0_5_reg_a <= select_nfa_print_0_5_a;
select_nfa_print_0_6_reg_a <= select_nfa_print_0_6_a;
select_nfa_print_0_7_reg_a <= select_nfa_print_0_7_a;
end
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b ==`TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

wire select__str1_b;
assign select__str1_b = (tag_b ==`TAG_g__str1);
reg select__str1_reg_b;
wire [7:0] memory_controller__str1_out_b;
assign memory_controller__str1_out_b = {8{ select__str1_reg_b}} & _str1_out_b;

wire select___PRETTY_FUNCTION___nfa_add_initial_b;
assign select___PRETTY_FUNCTION___nfa_add_initial_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_add_initial);
reg select___PRETTY_FUNCTION___nfa_add_initial_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_add_initial_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_add_initial_out_b = {8{ select___PRETTY_FUNCTION___nfa_add_initial_reg_b}} & __PRETTY_FUNCTION___nfa_add_initial_out_b;

wire select___PRETTY_FUNCTION___nfa_remove_initial_b;
assign select___PRETTY_FUNCTION___nfa_remove_initial_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_remove_initial);
reg select___PRETTY_FUNCTION___nfa_remove_initial_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_remove_initial_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_remove_initial_out_b = {8{ select___PRETTY_FUNCTION___nfa_remove_initial_reg_b}} & __PRETTY_FUNCTION___nfa_remove_initial_out_b;

wire select___PRETTY_FUNCTION___nfa_is_initial_b;
assign select___PRETTY_FUNCTION___nfa_is_initial_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_is_initial);
reg select___PRETTY_FUNCTION___nfa_is_initial_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_is_initial_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_is_initial_out_b = {8{ select___PRETTY_FUNCTION___nfa_is_initial_reg_b}} & __PRETTY_FUNCTION___nfa_is_initial_out_b;

wire select___PRETTY_FUNCTION___nfa_add_final_b;
assign select___PRETTY_FUNCTION___nfa_add_final_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_add_final);
reg select___PRETTY_FUNCTION___nfa_add_final_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_add_final_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_add_final_out_b = {8{ select___PRETTY_FUNCTION___nfa_add_final_reg_b}} & __PRETTY_FUNCTION___nfa_add_final_out_b;

wire select___PRETTY_FUNCTION___nfa_remove_final_b;
assign select___PRETTY_FUNCTION___nfa_remove_final_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_remove_final);
reg select___PRETTY_FUNCTION___nfa_remove_final_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_remove_final_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_remove_final_out_b = {8{ select___PRETTY_FUNCTION___nfa_remove_final_reg_b}} & __PRETTY_FUNCTION___nfa_remove_final_out_b;

wire select___PRETTY_FUNCTION___nfa_is_final_b;
assign select___PRETTY_FUNCTION___nfa_is_final_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_is_final);
reg select___PRETTY_FUNCTION___nfa_is_final_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_is_final_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_is_final_out_b = {8{ select___PRETTY_FUNCTION___nfa_is_final_reg_b}} & __PRETTY_FUNCTION___nfa_is_final_out_b;

wire select__str2_b;
assign select__str2_b = (tag_b ==`TAG_g__str2);
reg select__str2_reg_b;
wire [7:0] memory_controller__str2_out_b;
assign memory_controller__str2_out_b = {8{ select__str2_reg_b}} & _str2_out_b;

wire select___PRETTY_FUNCTION___nfa_get_sucessors_b;
assign select___PRETTY_FUNCTION___nfa_get_sucessors_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_get_sucessors);
reg select___PRETTY_FUNCTION___nfa_get_sucessors_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_get_sucessors_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_get_sucessors_out_b = {8{ select___PRETTY_FUNCTION___nfa_get_sucessors_reg_b}} & __PRETTY_FUNCTION___nfa_get_sucessors_out_b;

wire select__str3_b;
assign select__str3_b = (tag_b ==`TAG_g__str3);
reg select__str3_reg_b;
wire [7:0] memory_controller__str3_out_b;
assign memory_controller__str3_out_b = {8{ select__str3_reg_b}} & _str3_out_b;

wire select___PRETTY_FUNCTION___nfa_get_predecessors_b;
assign select___PRETTY_FUNCTION___nfa_get_predecessors_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_get_predecessors);
reg select___PRETTY_FUNCTION___nfa_get_predecessors_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_get_predecessors_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_get_predecessors_out_b = {8{ select___PRETTY_FUNCTION___nfa_get_predecessors_reg_b}} & __PRETTY_FUNCTION___nfa_get_predecessors_out_b;

wire select__str5_b;
assign select__str5_b = (tag_b ==`TAG_g__str5);
reg select__str5_reg_b;
wire [7:0] memory_controller__str5_out_b;
assign memory_controller__str5_out_b = {8{ select__str5_reg_b}} & _str5_out_b;

wire select___PRETTY_FUNCTION___nfa_add_transition_b;
assign select___PRETTY_FUNCTION___nfa_add_transition_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_add_transition);
reg select___PRETTY_FUNCTION___nfa_add_transition_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_add_transition_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_add_transition_out_b = {8{ select___PRETTY_FUNCTION___nfa_add_transition_reg_b}} & __PRETTY_FUNCTION___nfa_add_transition_out_b;

wire select__str6_b;
assign select__str6_b = (tag_b ==`TAG_g__str6);
reg select__str6_reg_b;
wire [7:0] memory_controller__str6_out_b;
assign memory_controller__str6_out_b = {8{ select__str6_reg_b}} & _str6_out_b;

wire select__str7_b;
assign select__str7_b = (tag_b ==`TAG_g__str7);
reg select__str7_reg_b;
wire [7:0] memory_controller__str7_out_b;
assign memory_controller__str7_out_b = {8{ select__str7_reg_b}} & _str7_out_b;

wire select___PRETTY_FUNCTION___nfa_remove_transition_b;
assign select___PRETTY_FUNCTION___nfa_remove_transition_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_remove_transition);
reg select___PRETTY_FUNCTION___nfa_remove_transition_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_remove_transition_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_remove_transition_out_b = {8{ select___PRETTY_FUNCTION___nfa_remove_transition_reg_b}} & __PRETTY_FUNCTION___nfa_remove_transition_out_b;

wire select___PRETTY_FUNCTION___nfa_merge_states_b;
assign select___PRETTY_FUNCTION___nfa_merge_states_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_merge_states);
reg select___PRETTY_FUNCTION___nfa_merge_states_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_merge_states_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_merge_states_out_b = {8{ select___PRETTY_FUNCTION___nfa_merge_states_reg_b}} & __PRETTY_FUNCTION___nfa_merge_states_out_b;

wire select__str8_b;
assign select__str8_b = (tag_b ==`TAG_g__str8);
reg select__str8_reg_b;
wire [7:0] memory_controller__str8_out_b;
assign memory_controller__str8_out_b = {8{ select__str8_reg_b}} & _str8_out_b;

wire select__str9_b;
assign select__str9_b = (tag_b ==`TAG_g__str9);
reg select__str9_reg_b;
wire [7:0] memory_controller__str9_out_b;
assign memory_controller__str9_out_b = {8{ select__str9_reg_b}} & _str9_out_b;

wire select___PRETTY_FUNCTION___nfa_accept_any_sample_b;
assign select___PRETTY_FUNCTION___nfa_accept_any_sample_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample);
reg select___PRETTY_FUNCTION___nfa_accept_any_sample_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_accept_any_sample_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_accept_any_sample_out_b = {8{ select___PRETTY_FUNCTION___nfa_accept_any_sample_reg_b}} & __PRETTY_FUNCTION___nfa_accept_any_sample_out_b;

wire select___PRETTY_FUNCTION___nfa_accept_all_samples_b;
assign select___PRETTY_FUNCTION___nfa_accept_all_samples_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples);
reg select___PRETTY_FUNCTION___nfa_accept_all_samples_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_accept_all_samples_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_accept_all_samples_out_b = {8{ select___PRETTY_FUNCTION___nfa_accept_all_samples_reg_b}} & __PRETTY_FUNCTION___nfa_accept_all_samples_out_b;

wire select___PRETTY_FUNCTION___nfa_accept_samples_b;
assign select___PRETTY_FUNCTION___nfa_accept_samples_b = (tag_b ==`TAG_g___PRETTY_FUNCTION___nfa_accept_samples);
reg select___PRETTY_FUNCTION___nfa_accept_samples_reg_b;
wire [7:0] memory_controller___PRETTY_FUNCTION___nfa_accept_samples_out_b;
assign memory_controller___PRETTY_FUNCTION___nfa_accept_samples_out_b = {8{ select___PRETTY_FUNCTION___nfa_accept_samples_reg_b}} & __PRETTY_FUNCTION___nfa_accept_samples_out_b;

wire select__str11_b;
assign select__str11_b = (tag_b ==`TAG_g__str11);
reg select__str11_reg_b;
wire [7:0] memory_controller__str11_out_b;
assign memory_controller__str11_out_b = {8{ select__str11_reg_b}} & _str11_out_b;

wire select__str12_b;
assign select__str12_b = (tag_b ==`TAG_g__str12);
reg select__str12_reg_b;
wire [7:0] memory_controller__str12_out_b;
assign memory_controller__str12_out_b = {8{ select__str12_reg_b}} & _str12_out_b;

wire select__str13_b;
assign select__str13_b = (tag_b ==`TAG_g__str13);
reg select__str13_reg_b;
wire [7:0] memory_controller__str13_out_b;
assign memory_controller__str13_out_b = {8{ select__str13_reg_b}} & _str13_out_b;

wire select_nfa_merge_states_0_1_b;
assign select_nfa_merge_states_0_1_b = (tag_b ==`TAG_nfa_merge_states_0_1);
reg select_nfa_merge_states_0_1_reg_b;
wire [7:0] memory_controller_nfa_merge_states_0_1_out_b;
assign memory_controller_nfa_merge_states_0_1_out_b = {8{ select_nfa_merge_states_0_1_reg_b}} & nfa_merge_states_0_1_out_b;

wire select_nfa_merge_states_0_2_b;
assign select_nfa_merge_states_0_2_b = (tag_b ==`TAG_nfa_merge_states_0_2);
reg select_nfa_merge_states_0_2_reg_b;
wire [7:0] memory_controller_nfa_merge_states_0_2_out_b;
assign memory_controller_nfa_merge_states_0_2_out_b = {8{ select_nfa_merge_states_0_2_reg_b}} & nfa_merge_states_0_2_out_b;

wire select_nfa_merge_states_0_3_b;
assign select_nfa_merge_states_0_3_b = (tag_b ==`TAG_nfa_merge_states_0_3);
reg select_nfa_merge_states_0_3_reg_b;
wire [7:0] memory_controller_nfa_merge_states_0_3_out_b;
assign memory_controller_nfa_merge_states_0_3_out_b = {8{ select_nfa_merge_states_0_3_reg_b}} & nfa_merge_states_0_3_out_b;

wire select_nfa_merge_states_0_4_b;
assign select_nfa_merge_states_0_4_b = (tag_b ==`TAG_nfa_merge_states_0_4);
reg select_nfa_merge_states_0_4_reg_b;
wire [7:0] memory_controller_nfa_merge_states_0_4_out_b;
assign memory_controller_nfa_merge_states_0_4_out_b = {8{ select_nfa_merge_states_0_4_reg_b}} & nfa_merge_states_0_4_out_b;

wire select_nfa_merge_states_0_5_b;
assign select_nfa_merge_states_0_5_b = (tag_b ==`TAG_nfa_merge_states_0_5);
reg select_nfa_merge_states_0_5_reg_b;
wire [7:0] memory_controller_nfa_merge_states_0_5_out_b;
assign memory_controller_nfa_merge_states_0_5_out_b = {8{ select_nfa_merge_states_0_5_reg_b}} & nfa_merge_states_0_5_out_b;

wire select_nfa_merge_states_0_6_b;
assign select_nfa_merge_states_0_6_b = (tag_b ==`TAG_nfa_merge_states_0_6);
reg select_nfa_merge_states_0_6_reg_b;
wire [7:0] memory_controller_nfa_merge_states_0_6_out_b;
assign memory_controller_nfa_merge_states_0_6_out_b = {8{ select_nfa_merge_states_0_6_reg_b}} & nfa_merge_states_0_6_out_b;

wire select_nfa_merge_states_0_bs_b;
assign select_nfa_merge_states_0_bs_b = (tag_b ==`TAG_nfa_merge_states_0_bs);
reg select_nfa_merge_states_0_bs_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_bs_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_bs_out_struct_b;
assign memory_controller_nfa_merge_states_0_bs_out_struct_b = {64{ select_nfa_merge_states_0_bs_reg_b}} & nfa_merge_states_0_bs_out_b;

wire select_nfa_merge_states_0_i_b;
assign select_nfa_merge_states_0_i_b = (tag_b ==`TAG_nfa_merge_states_0_i);
reg select_nfa_merge_states_0_i_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_i_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_i_out_struct_b;
assign memory_controller_nfa_merge_states_0_i_out_struct_b = {64{ select_nfa_merge_states_0_i_reg_b}} & nfa_merge_states_0_i_out_b;

wire select_nfa_merge_states_0_7_b;
assign select_nfa_merge_states_0_7_b = (tag_b ==`TAG_nfa_merge_states_0_7);
reg select_nfa_merge_states_0_7_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_7_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_7_out_struct_b;
assign memory_controller_nfa_merge_states_0_7_out_struct_b = {64{ select_nfa_merge_states_0_7_reg_b}} & nfa_merge_states_0_7_out_b;

wire select_nfa_merge_states_0_8_b;
assign select_nfa_merge_states_0_8_b = (tag_b ==`TAG_nfa_merge_states_0_8);
reg select_nfa_merge_states_0_8_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_8_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_8_out_struct_b;
assign memory_controller_nfa_merge_states_0_8_out_struct_b = {64{ select_nfa_merge_states_0_8_reg_b}} & nfa_merge_states_0_8_out_b;

wire select_nfa_merge_states_0_9_b;
assign select_nfa_merge_states_0_9_b = (tag_b ==`TAG_nfa_merge_states_0_9);
reg select_nfa_merge_states_0_9_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_9_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_9_out_struct_b;
assign memory_controller_nfa_merge_states_0_9_out_struct_b = {64{ select_nfa_merge_states_0_9_reg_b}} & nfa_merge_states_0_9_out_b;

wire select_nfa_merge_states_0_10_b;
assign select_nfa_merge_states_0_10_b = (tag_b ==`TAG_nfa_merge_states_0_10);
reg select_nfa_merge_states_0_10_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_10_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_10_out_struct_b;
assign memory_controller_nfa_merge_states_0_10_out_struct_b = {64{ select_nfa_merge_states_0_10_reg_b}} & nfa_merge_states_0_10_out_b;

wire select_nfa_merge_states_0_i1_b;
assign select_nfa_merge_states_0_i1_b = (tag_b ==`TAG_nfa_merge_states_0_i1);
reg select_nfa_merge_states_0_i1_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_i1_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_i1_out_struct_b;
assign memory_controller_nfa_merge_states_0_i1_out_struct_b = {64{ select_nfa_merge_states_0_i1_reg_b}} & nfa_merge_states_0_i1_out_b;

wire select_nfa_merge_states_0_11_b;
assign select_nfa_merge_states_0_11_b = (tag_b ==`TAG_nfa_merge_states_0_11);
reg select_nfa_merge_states_0_11_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_11_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_11_out_struct_b;
assign memory_controller_nfa_merge_states_0_11_out_struct_b = {64{ select_nfa_merge_states_0_11_reg_b}} & nfa_merge_states_0_11_out_b;

wire select_nfa_merge_states_0_12_b;
assign select_nfa_merge_states_0_12_b = (tag_b ==`TAG_nfa_merge_states_0_12);
reg select_nfa_merge_states_0_12_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_12_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_12_out_struct_b;
assign memory_controller_nfa_merge_states_0_12_out_struct_b = {64{ select_nfa_merge_states_0_12_reg_b}} & nfa_merge_states_0_12_out_b;

wire select_nfa_merge_states_0_13_b;
assign select_nfa_merge_states_0_13_b = (tag_b ==`TAG_nfa_merge_states_0_13);
reg select_nfa_merge_states_0_13_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_13_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_13_out_struct_b;
assign memory_controller_nfa_merge_states_0_13_out_struct_b = {64{ select_nfa_merge_states_0_13_reg_b}} & nfa_merge_states_0_13_out_b;

wire select_nfa_merge_states_0_14_b;
assign select_nfa_merge_states_0_14_b = (tag_b ==`TAG_nfa_merge_states_0_14);
reg select_nfa_merge_states_0_14_reg_b;
reg [63:0] memory_controller_nfa_merge_states_0_14_out_b;
wire [63:0] memory_controller_nfa_merge_states_0_14_out_struct_b;
assign memory_controller_nfa_merge_states_0_14_out_struct_b = {64{ select_nfa_merge_states_0_14_reg_b}} & nfa_merge_states_0_14_out_b;

wire select_nfa_accept_sample_0_next_b;
assign select_nfa_accept_sample_0_next_b = (tag_b ==`TAG_nfa_accept_sample_0_next);
reg select_nfa_accept_sample_0_next_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_next_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_next_out_struct_b;
assign memory_controller_nfa_accept_sample_0_next_out_struct_b = {64{ select_nfa_accept_sample_0_next_reg_b}} & nfa_accept_sample_0_next_out_b;

wire select_nfa_accept_sample_0_current_b;
assign select_nfa_accept_sample_0_current_b = (tag_b ==`TAG_nfa_accept_sample_0_current);
reg select_nfa_accept_sample_0_current_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_current_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_current_out_struct_b;
assign memory_controller_nfa_accept_sample_0_current_out_struct_b = {64{ select_nfa_accept_sample_0_current_reg_b}} & nfa_accept_sample_0_current_out_b;

wire select_nfa_accept_sample_0_tmp_b;
assign select_nfa_accept_sample_0_tmp_b = (tag_b ==`TAG_nfa_accept_sample_0_tmp);
reg select_nfa_accept_sample_0_tmp_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_tmp_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_tmp_out_struct_b;
assign memory_controller_nfa_accept_sample_0_tmp_out_struct_b = {64{ select_nfa_accept_sample_0_tmp_reg_b}} & nfa_accept_sample_0_tmp_out_b;

wire select_nfa_accept_sample_0_j_b;
assign select_nfa_accept_sample_0_j_b = (tag_b ==`TAG_nfa_accept_sample_0_j);
reg select_nfa_accept_sample_0_j_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_j_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_j_out_struct_b;
assign memory_controller_nfa_accept_sample_0_j_out_struct_b = {64{ select_nfa_accept_sample_0_j_reg_b}} & nfa_accept_sample_0_j_out_b;

wire select_nfa_accept_sample_0_1_b;
assign select_nfa_accept_sample_0_1_b = (tag_b ==`TAG_nfa_accept_sample_0_1);
reg select_nfa_accept_sample_0_1_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_1_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_1_out_struct_b;
assign memory_controller_nfa_accept_sample_0_1_out_struct_b = {64{ select_nfa_accept_sample_0_1_reg_b}} & nfa_accept_sample_0_1_out_b;

wire select_nfa_accept_sample_0_2_b;
assign select_nfa_accept_sample_0_2_b = (tag_b ==`TAG_nfa_accept_sample_0_2);
reg select_nfa_accept_sample_0_2_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_2_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_2_out_struct_b;
assign memory_controller_nfa_accept_sample_0_2_out_struct_b = {64{ select_nfa_accept_sample_0_2_reg_b}} & nfa_accept_sample_0_2_out_b;

wire select_nfa_accept_sample_0_3_b;
assign select_nfa_accept_sample_0_3_b = (tag_b ==`TAG_nfa_accept_sample_0_3);
reg select_nfa_accept_sample_0_3_reg_b;
reg [63:0] memory_controller_nfa_accept_sample_0_3_out_b;
wire [63:0] memory_controller_nfa_accept_sample_0_3_out_struct_b;
assign memory_controller_nfa_accept_sample_0_3_out_struct_b = {64{ select_nfa_accept_sample_0_3_reg_b}} & nfa_accept_sample_0_3_out_b;

wire select_nfa_print_0_1_b;
assign select_nfa_print_0_1_b = (tag_b ==`TAG_nfa_print_0_1);
reg select_nfa_print_0_1_reg_b;
wire [7:0] memory_controller_nfa_print_0_1_out_b;
assign memory_controller_nfa_print_0_1_out_b = {8{ select_nfa_print_0_1_reg_b}} & nfa_print_0_1_out_b;

wire select_nfa_print_0_2_b;
assign select_nfa_print_0_2_b = (tag_b ==`TAG_nfa_print_0_2);
reg select_nfa_print_0_2_reg_b;
wire [7:0] memory_controller_nfa_print_0_2_out_b;
assign memory_controller_nfa_print_0_2_out_b = {8{ select_nfa_print_0_2_reg_b}} & nfa_print_0_2_out_b;

wire select_nfa_print_0_suc_b;
assign select_nfa_print_0_suc_b = (tag_b ==`TAG_nfa_print_0_suc);
reg select_nfa_print_0_suc_reg_b;
reg [63:0] memory_controller_nfa_print_0_suc_out_b;
wire [63:0] memory_controller_nfa_print_0_suc_out_struct_b;
assign memory_controller_nfa_print_0_suc_out_struct_b = {64{ select_nfa_print_0_suc_reg_b}} & nfa_print_0_suc_out_b;

wire select_nfa_print_0_suc2_b;
assign select_nfa_print_0_suc2_b = (tag_b ==`TAG_nfa_print_0_suc2);
reg select_nfa_print_0_suc2_reg_b;
reg [63:0] memory_controller_nfa_print_0_suc2_out_b;
wire [63:0] memory_controller_nfa_print_0_suc2_out_struct_b;
assign memory_controller_nfa_print_0_suc2_out_struct_b = {64{ select_nfa_print_0_suc2_reg_b}} & nfa_print_0_suc2_out_b;

wire select_nfa_print_0_qt_b;
assign select_nfa_print_0_qt_b = (tag_b ==`TAG_nfa_print_0_qt);
reg select_nfa_print_0_qt_reg_b;
reg [63:0] memory_controller_nfa_print_0_qt_out_b;
wire [63:0] memory_controller_nfa_print_0_qt_out_struct_b;
assign memory_controller_nfa_print_0_qt_out_struct_b = {64{ select_nfa_print_0_qt_reg_b}} & nfa_print_0_qt_out_b;

wire select_nfa_print_0_3_b;
assign select_nfa_print_0_3_b = (tag_b ==`TAG_nfa_print_0_3);
reg select_nfa_print_0_3_reg_b;
reg [63:0] memory_controller_nfa_print_0_3_out_b;
wire [63:0] memory_controller_nfa_print_0_3_out_struct_b;
assign memory_controller_nfa_print_0_3_out_struct_b = {64{ select_nfa_print_0_3_reg_b}} & nfa_print_0_3_out_b;

wire select_nfa_print_0_4_b;
assign select_nfa_print_0_4_b = (tag_b ==`TAG_nfa_print_0_4);
reg select_nfa_print_0_4_reg_b;
reg [63:0] memory_controller_nfa_print_0_4_out_b;
wire [63:0] memory_controller_nfa_print_0_4_out_struct_b;
assign memory_controller_nfa_print_0_4_out_struct_b = {64{ select_nfa_print_0_4_reg_b}} & nfa_print_0_4_out_b;

wire select_nfa_print_0_5_b;
assign select_nfa_print_0_5_b = (tag_b ==`TAG_nfa_print_0_5);
reg select_nfa_print_0_5_reg_b;
reg [63:0] memory_controller_nfa_print_0_5_out_b;
wire [63:0] memory_controller_nfa_print_0_5_out_struct_b;
assign memory_controller_nfa_print_0_5_out_struct_b = {64{ select_nfa_print_0_5_reg_b}} & nfa_print_0_5_out_b;

wire select_nfa_print_0_6_b;
assign select_nfa_print_0_6_b = (tag_b ==`TAG_nfa_print_0_6);
reg select_nfa_print_0_6_reg_b;
reg [63:0] memory_controller_nfa_print_0_6_out_b;
wire [63:0] memory_controller_nfa_print_0_6_out_struct_b;
assign memory_controller_nfa_print_0_6_out_struct_b = {64{ select_nfa_print_0_6_reg_b}} & nfa_print_0_6_out_b;

wire select_nfa_print_0_7_b;
assign select_nfa_print_0_7_b = (tag_b ==`TAG_nfa_print_0_7);
reg select_nfa_print_0_7_reg_b;
reg [63:0] memory_controller_nfa_print_0_7_out_b;
wire [63:0] memory_controller_nfa_print_0_7_out_struct_b;
assign memory_controller_nfa_print_0_7_out_struct_b = {64{ select_nfa_print_0_7_reg_b}} & nfa_print_0_7_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str1_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str1_b}};
	_str1_write_enable_b = memory_controller_write_enable_b & select__str1_b;
	_str1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_add_initial_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_add_initial_b}};
	__PRETTY_FUNCTION___nfa_add_initial_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_add_initial_b;
	__PRETTY_FUNCTION___nfa_add_initial_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_remove_initial_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_remove_initial_b}};
	__PRETTY_FUNCTION___nfa_remove_initial_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_remove_initial_b;
	__PRETTY_FUNCTION___nfa_remove_initial_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_is_initial_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_is_initial_b}};
	__PRETTY_FUNCTION___nfa_is_initial_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_is_initial_b;
	__PRETTY_FUNCTION___nfa_is_initial_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_add_final_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_add_final_b}};
	__PRETTY_FUNCTION___nfa_add_final_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_add_final_b;
	__PRETTY_FUNCTION___nfa_add_final_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_remove_final_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_remove_final_b}};
	__PRETTY_FUNCTION___nfa_remove_final_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_remove_final_b;
	__PRETTY_FUNCTION___nfa_remove_final_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_is_final_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_is_final_b}};
	__PRETTY_FUNCTION___nfa_is_final_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_is_final_b;
	__PRETTY_FUNCTION___nfa_is_final_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str2_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str2_b}};
	_str2_write_enable_b = memory_controller_write_enable_b & select__str2_b;
	_str2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_get_sucessors_address_b = memory_controller_address_b [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_get_sucessors_b}};
	__PRETTY_FUNCTION___nfa_get_sucessors_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_get_sucessors_b;
	__PRETTY_FUNCTION___nfa_get_sucessors_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str3_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str3_b}};
	_str3_write_enable_b = memory_controller_write_enable_b & select__str3_b;
	_str3_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_get_predecessors_address_b = memory_controller_address_b [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_get_predecessors_b}};
	__PRETTY_FUNCTION___nfa_get_predecessors_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_get_predecessors_b;
	__PRETTY_FUNCTION___nfa_get_predecessors_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str5_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str5_b}};
	_str5_write_enable_b = memory_controller_write_enable_b & select__str5_b;
	_str5_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_add_transition_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_add_transition_b}};
	__PRETTY_FUNCTION___nfa_add_transition_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_add_transition_b;
	__PRETTY_FUNCTION___nfa_add_transition_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str6_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str6_b}};
	_str6_write_enable_b = memory_controller_write_enable_b & select__str6_b;
	_str6_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str7_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str7_b}};
	_str7_write_enable_b = memory_controller_write_enable_b & select__str7_b;
	_str7_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_remove_transition_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_remove_transition_b}};
	__PRETTY_FUNCTION___nfa_remove_transition_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_remove_transition_b;
	__PRETTY_FUNCTION___nfa_remove_transition_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_merge_states_address_b = memory_controller_address_b [6-1+0:0] & {6{select___PRETTY_FUNCTION___nfa_merge_states_b}};
	__PRETTY_FUNCTION___nfa_merge_states_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_merge_states_b;
	__PRETTY_FUNCTION___nfa_merge_states_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str8_address_b = memory_controller_address_b [5-1+0:0] & {5{select__str8_b}};
	_str8_write_enable_b = memory_controller_write_enable_b & select__str8_b;
	_str8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str9_address_b = memory_controller_address_b [6-1+0:0] & {6{select__str9_b}};
	_str9_write_enable_b = memory_controller_write_enable_b & select__str9_b;
	_str9_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_accept_any_sample_address_b = memory_controller_address_b [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_accept_any_sample_b}};
	__PRETTY_FUNCTION___nfa_accept_any_sample_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_accept_any_sample_b;
	__PRETTY_FUNCTION___nfa_accept_any_sample_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_accept_all_samples_address_b = memory_controller_address_b [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_accept_all_samples_b}};
	__PRETTY_FUNCTION___nfa_accept_all_samples_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_accept_all_samples_b;
	__PRETTY_FUNCTION___nfa_accept_all_samples_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	__PRETTY_FUNCTION___nfa_accept_samples_address_b = memory_controller_address_b [7-1+0:0] & {7{select___PRETTY_FUNCTION___nfa_accept_samples_b}};
	__PRETTY_FUNCTION___nfa_accept_samples_write_enable_b = memory_controller_write_enable_b & select___PRETTY_FUNCTION___nfa_accept_samples_b;
	__PRETTY_FUNCTION___nfa_accept_samples_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str11_address_b = memory_controller_address_b [1-1+0:0] & {1{select__str11_b}};
	_str11_write_enable_b = memory_controller_write_enable_b & select__str11_b;
	_str11_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str12_address_b = memory_controller_address_b [1-1+0:0] & {1{select__str12_b}};
	_str12_write_enable_b = memory_controller_write_enable_b & select__str12_b;
	_str12_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	_str13_address_b = memory_controller_address_b [1-1+0:0] & {1{select__str13_b}};
	_str13_write_enable_b = memory_controller_write_enable_b & select__str13_b;
	_str13_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_1_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_merge_states_0_1_b}};
	nfa_merge_states_0_1_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_1_b;
	nfa_merge_states_0_1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_2_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_merge_states_0_2_b}};
	nfa_merge_states_0_2_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_2_b;
	nfa_merge_states_0_2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_3_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_merge_states_0_3_b}};
	nfa_merge_states_0_3_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_3_b;
	nfa_merge_states_0_3_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_4_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_merge_states_0_4_b}};
	nfa_merge_states_0_4_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_4_b;
	nfa_merge_states_0_4_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_5_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_merge_states_0_5_b}};
	nfa_merge_states_0_5_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_5_b;
	nfa_merge_states_0_5_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_6_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_merge_states_0_6_b}};
	nfa_merge_states_0_6_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_6_b;
	nfa_merge_states_0_6_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_merge_states_0_bs_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_bs_b}};
	nfa_merge_states_0_bs_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_bs_b;
				nfa_merge_states_0_bs_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_bs_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_bs_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_bs_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_bs_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_bs_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_bs_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_bs_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_bs_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_bs_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_bs_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_bs_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_bs_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_bs_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_bs_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_bs_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_bs_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_bs_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_bs_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_bs_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_i_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_i_b}};
	nfa_merge_states_0_i_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_i_b;
				nfa_merge_states_0_i_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_i_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_i_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_i_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_i_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_i_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_i_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_i_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_i_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_i_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_i_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_i_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_i_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_i_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_i_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_i_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_i_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_i_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_i_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_7_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_7_b}};
	nfa_merge_states_0_7_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_7_b;
				nfa_merge_states_0_7_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_7_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_7_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_7_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_7_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_7_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_7_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_7_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_7_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_7_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_7_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_7_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_7_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_7_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_7_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_7_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_7_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_7_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_7_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_7_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_8_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_8_b}};
	nfa_merge_states_0_8_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_8_b;
				nfa_merge_states_0_8_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_8_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_8_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_8_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_8_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_8_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_8_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_8_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_8_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_8_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_8_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_8_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_8_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_8_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_8_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_8_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_8_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_8_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_8_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_8_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_9_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_9_b}};
	nfa_merge_states_0_9_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_9_b;
				nfa_merge_states_0_9_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_9_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_9_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_9_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_9_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_9_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_9_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_9_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_9_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_9_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_9_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_9_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_9_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_9_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_9_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_9_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_9_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_9_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_9_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_9_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_10_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_10_b}};
	nfa_merge_states_0_10_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_10_b;
				nfa_merge_states_0_10_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_10_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_10_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_10_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_10_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_10_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_10_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_10_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_10_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_10_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_10_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_10_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_10_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_10_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_10_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_10_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_10_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_10_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_10_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_10_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_i1_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_i1_b}};
	nfa_merge_states_0_i1_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_i1_b;
				nfa_merge_states_0_i1_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_i1_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_i1_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_i1_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_i1_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_i1_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_i1_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_i1_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_i1_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_i1_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_i1_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_i1_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_i1_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_i1_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_i1_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_i1_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_i1_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_i1_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_i1_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_i1_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_11_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_11_b}};
	nfa_merge_states_0_11_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_11_b;
				nfa_merge_states_0_11_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_11_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_11_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_11_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_11_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_11_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_11_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_11_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_11_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_11_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_11_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_11_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_11_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_11_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_11_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_11_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_11_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_11_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_11_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_11_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_12_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_12_b}};
	nfa_merge_states_0_12_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_12_b;
				nfa_merge_states_0_12_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_12_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_12_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_12_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_12_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_12_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_12_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_12_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_12_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_12_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_12_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_12_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_12_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_12_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_12_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_12_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_12_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_12_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_12_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_12_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_13_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_13_b}};
	nfa_merge_states_0_13_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_13_b;
				nfa_merge_states_0_13_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_13_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_13_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_13_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_13_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_13_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_13_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_13_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_13_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_13_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_13_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_13_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_13_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_13_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_13_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_13_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_13_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_13_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_13_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_13_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_merge_states_0_14_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_merge_states_0_14_b}};
	nfa_merge_states_0_14_write_enable_b = memory_controller_write_enable_b & select_nfa_merge_states_0_14_b;
				nfa_merge_states_0_14_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_merge_states_0_14_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_merge_states_0_14_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_merge_states_0_14_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_14_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_merge_states_0_14_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_merge_states_0_14_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_merge_states_0_14_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_merge_states_0_14_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_merge_states_0_14_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_merge_states_0_14_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_merge_states_0_14_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_merge_states_0_14_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_merge_states_0_14_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_merge_states_0_14_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_merge_states_0_14_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_merge_states_0_14_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_merge_states_0_14_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_merge_states_0_14_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_merge_states_0_14_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_next_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_next_b}};
	nfa_accept_sample_0_next_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_next_b;
				nfa_accept_sample_0_next_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_next_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_next_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_next_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_next_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_next_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_next_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_next_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_next_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_next_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_next_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_next_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_next_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_next_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_next_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_next_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_next_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_next_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_next_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_next_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_current_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_current_b}};
	nfa_accept_sample_0_current_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_current_b;
				nfa_accept_sample_0_current_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_current_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_current_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_current_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_current_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_current_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_current_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_current_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_current_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_current_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_current_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_current_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_current_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_current_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_current_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_current_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_current_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_current_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_current_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_current_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_tmp_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_tmp_b}};
	nfa_accept_sample_0_tmp_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_tmp_b;
				nfa_accept_sample_0_tmp_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_tmp_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_tmp_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_tmp_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_tmp_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_tmp_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_tmp_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_tmp_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_tmp_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_tmp_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_tmp_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_tmp_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_tmp_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_tmp_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_tmp_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_tmp_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_tmp_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_tmp_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_tmp_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_tmp_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_j_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_j_b}};
	nfa_accept_sample_0_j_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_j_b;
				nfa_accept_sample_0_j_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_j_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_j_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_j_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_j_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_j_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_j_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_j_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_j_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_j_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_j_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_j_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_j_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_j_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_j_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_j_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_j_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_j_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_j_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_j_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_1_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_1_b}};
	nfa_accept_sample_0_1_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_1_b;
				nfa_accept_sample_0_1_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_1_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_1_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_1_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_1_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_1_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_1_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_1_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_1_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_1_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_1_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_1_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_1_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_1_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_1_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_1_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_1_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_1_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_1_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_1_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_2_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_2_b}};
	nfa_accept_sample_0_2_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_2_b;
				nfa_accept_sample_0_2_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_2_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_2_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_2_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_2_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_2_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_2_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_2_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_2_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_2_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_2_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_2_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_2_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_2_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_2_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_2_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_2_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_2_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_2_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_2_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_accept_sample_0_3_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_accept_sample_0_3_b}};
	nfa_accept_sample_0_3_write_enable_b = memory_controller_write_enable_b & select_nfa_accept_sample_0_3_b;
				nfa_accept_sample_0_3_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_accept_sample_0_3_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_accept_sample_0_3_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_accept_sample_0_3_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_3_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_accept_sample_0_3_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_accept_sample_0_3_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_accept_sample_0_3_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_accept_sample_0_3_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_accept_sample_0_3_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_accept_sample_0_3_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_accept_sample_0_3_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_accept_sample_0_3_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_accept_sample_0_3_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_accept_sample_0_3_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_accept_sample_0_3_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_accept_sample_0_3_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_accept_sample_0_3_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_accept_sample_0_3_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_accept_sample_0_3_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_1_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_print_0_1_b}};
	nfa_print_0_1_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_1_b;
	nfa_print_0_1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_print_0_2_address_b = memory_controller_address_b [1-1+0:0] & {1{select_nfa_print_0_2_b}};
	nfa_print_0_2_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_2_b;
	nfa_print_0_2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	nfa_print_0_suc_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_suc_b}};
	nfa_print_0_suc_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_suc_b;
				nfa_print_0_suc_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_suc_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_suc_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_suc_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_suc_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_suc_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_suc_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_suc_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_suc_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_suc_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_suc_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_suc_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_suc_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_suc_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_suc_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_suc_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_suc_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_suc_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_suc_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_suc2_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_suc2_b}};
	nfa_print_0_suc2_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_suc2_b;
				nfa_print_0_suc2_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_suc2_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_suc2_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_suc2_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_suc2_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_suc2_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_suc2_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_suc2_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc2_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_suc2_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc2_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_suc2_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc2_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_suc2_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_suc2_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_suc2_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_suc2_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_suc2_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_suc2_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_suc2_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_suc2_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_suc2_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_suc2_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_suc2_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_qt_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_qt_b}};
	nfa_print_0_qt_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_qt_b;
				nfa_print_0_qt_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_qt_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_qt_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_qt_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_qt_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_qt_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_qt_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_qt_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_qt_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_qt_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_qt_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_qt_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_qt_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_qt_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_qt_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_qt_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_qt_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_qt_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_qt_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_qt_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_qt_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_qt_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_qt_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_qt_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_3_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_3_b}};
	nfa_print_0_3_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_3_b;
				nfa_print_0_3_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_3_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_3_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_3_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_3_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_3_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_3_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_3_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_3_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_3_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_3_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_3_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_3_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_3_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_3_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_3_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_3_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_3_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_3_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_3_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_3_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_3_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_3_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_3_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_4_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_4_b}};
	nfa_print_0_4_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_4_b;
				nfa_print_0_4_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_4_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_4_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_4_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_4_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_4_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_4_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_4_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_4_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_4_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_4_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_4_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_4_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_4_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_4_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_4_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_4_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_4_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_4_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_4_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_4_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_4_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_4_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_4_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_5_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_5_b}};
	nfa_print_0_5_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_5_b;
				nfa_print_0_5_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_5_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_5_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_5_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_5_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_5_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_5_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_5_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_5_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_5_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_5_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_5_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_5_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_5_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_5_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_5_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_5_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_5_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_5_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_5_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_5_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_5_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_5_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_5_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_6_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_6_b}};
	nfa_print_0_6_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_6_b;
				nfa_print_0_6_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_6_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_6_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_6_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_6_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_6_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_6_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_6_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_6_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_6_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_6_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_6_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_6_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_6_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_6_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_6_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_6_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_6_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_6_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_6_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_6_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_6_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_6_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_6_byteena_b = 8'd128;
					end
			endcase
		endcase

	nfa_print_0_7_address_b = memory_controller_address_b[4-1:3] & {1{select_nfa_print_0_7_b}};
	nfa_print_0_7_write_enable_b = memory_controller_write_enable_b & select_nfa_print_0_7_b;
				nfa_print_0_7_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				nfa_print_0_7_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				nfa_print_0_7_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					nfa_print_0_7_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					nfa_print_0_7_byteena_b = 8'b00001111;
				end
				else
				begin
					nfa_print_0_7_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					nfa_print_0_7_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						nfa_print_0_7_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						nfa_print_0_7_byteena_b = 8'd3;
					end
					1:
					begin
						nfa_print_0_7_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						nfa_print_0_7_byteena_b = 8'd12;
					end
					2:
					begin
						nfa_print_0_7_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						nfa_print_0_7_byteena_b = 8'd48;
					end
					3:
					begin
						nfa_print_0_7_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						nfa_print_0_7_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						nfa_print_0_7_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd1;
					end
					1:
					begin
						nfa_print_0_7_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd2;
					end
					2:
					begin
						nfa_print_0_7_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd4;
					end
					3:
					begin
						nfa_print_0_7_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd8;
					end
					4:
					begin
						nfa_print_0_7_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd16;
					end
					5:
					begin
						nfa_print_0_7_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd32;
					end
					6:
					begin
						nfa_print_0_7_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd64;
					end
					7:
					begin
						nfa_print_0_7_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						nfa_print_0_7_byteena_b = 8'd128;
					end
			endcase
		endcase

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_nfa_merge_states_0_bs_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_bs_out_b[64-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_bs_out_b[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_bs_out_b[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_bs_out_b[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_bs_out_b[32-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_bs_out_b[16-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_bs_out_b[16-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_bs_out_b[8-1:0] = memory_controller_nfa_merge_states_0_bs_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_i_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_i_out_b[64-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_i_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_i_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_i_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_i_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_i_out_b[16-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_i_out_b[16-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_i_out_b[8-1:0] = memory_controller_nfa_merge_states_0_i_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_7_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_7_out_b[64-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_7_out_b[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_7_out_b[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_7_out_b[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_7_out_b[32-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_7_out_b[16-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_7_out_b[16-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_7_out_b[8-1:0] = memory_controller_nfa_merge_states_0_7_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_8_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_8_out_b[64-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_8_out_b[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_8_out_b[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_8_out_b[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_8_out_b[32-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_8_out_b[16-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_8_out_b[16-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_8_out_b[8-1:0] = memory_controller_nfa_merge_states_0_8_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_9_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_9_out_b[64-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_9_out_b[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_9_out_b[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_9_out_b[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_9_out_b[32-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_9_out_b[16-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_9_out_b[16-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_9_out_b[8-1:0] = memory_controller_nfa_merge_states_0_9_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_10_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_10_out_b[64-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_10_out_b[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_10_out_b[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_10_out_b[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_10_out_b[32-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_10_out_b[16-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_10_out_b[16-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_10_out_b[8-1:0] = memory_controller_nfa_merge_states_0_10_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_i1_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_i1_out_b[64-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_i1_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_i1_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_i1_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_i1_out_b[32-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_i1_out_b[16-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_i1_out_b[16-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_i1_out_b[8-1:0] = memory_controller_nfa_merge_states_0_i1_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_11_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_11_out_b[64-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_11_out_b[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_11_out_b[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_11_out_b[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_11_out_b[32-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_11_out_b[16-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_11_out_b[16-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_11_out_b[8-1:0] = memory_controller_nfa_merge_states_0_11_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_12_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_12_out_b[64-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_12_out_b[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_12_out_b[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_12_out_b[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_12_out_b[32-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_12_out_b[16-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_12_out_b[16-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_12_out_b[8-1:0] = memory_controller_nfa_merge_states_0_12_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_13_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_13_out_b[64-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_13_out_b[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_13_out_b[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_13_out_b[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_13_out_b[32-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_13_out_b[16-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_13_out_b[16-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_13_out_b[8-1:0] = memory_controller_nfa_merge_states_0_13_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_merge_states_0_14_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_merge_states_0_14_out_b[64-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[64-1:0];
		1: memory_controller_nfa_merge_states_0_14_out_b[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[40-1:8];
		2: memory_controller_nfa_merge_states_0_14_out_b[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[48-1:16];
		3: memory_controller_nfa_merge_states_0_14_out_b[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[56-1:24];
		4: memory_controller_nfa_merge_states_0_14_out_b[32-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[64-1:32];
		5: memory_controller_nfa_merge_states_0_14_out_b[16-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[56-1:40];
		6: memory_controller_nfa_merge_states_0_14_out_b[16-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[64-1:48];
		7: memory_controller_nfa_merge_states_0_14_out_b[8-1:0] = memory_controller_nfa_merge_states_0_14_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_next_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_next_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_next_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_next_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_next_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_next_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_next_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_next_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_next_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_next_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_current_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_current_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_current_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_current_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_current_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_current_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_current_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_current_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_current_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_current_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_tmp_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_tmp_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_tmp_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_tmp_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_tmp_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_tmp_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_tmp_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_tmp_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_tmp_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_tmp_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_j_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_j_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_j_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_j_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_j_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_j_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_j_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_j_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_j_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_j_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_1_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_1_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_1_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_1_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_1_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_1_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_1_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_1_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_1_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_1_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_2_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_2_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_2_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_2_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_2_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_2_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_2_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_2_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_2_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_2_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_accept_sample_0_3_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_accept_sample_0_3_out_b[64-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[64-1:0];
		1: memory_controller_nfa_accept_sample_0_3_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[40-1:8];
		2: memory_controller_nfa_accept_sample_0_3_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[48-1:16];
		3: memory_controller_nfa_accept_sample_0_3_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[56-1:24];
		4: memory_controller_nfa_accept_sample_0_3_out_b[32-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[64-1:32];
		5: memory_controller_nfa_accept_sample_0_3_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[56-1:40];
		6: memory_controller_nfa_accept_sample_0_3_out_b[16-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[64-1:48];
		7: memory_controller_nfa_accept_sample_0_3_out_b[8-1:0] = memory_controller_nfa_accept_sample_0_3_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_suc_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_suc_out_b[64-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_suc_out_b[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_suc_out_b[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_suc_out_b[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_suc_out_b[32-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_suc_out_b[16-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_suc_out_b[16-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_suc_out_b[8-1:0] = memory_controller_nfa_print_0_suc_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_suc2_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_suc2_out_b[64-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_suc2_out_b[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_suc2_out_b[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_suc2_out_b[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_suc2_out_b[32-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_suc2_out_b[16-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_suc2_out_b[16-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_suc2_out_b[8-1:0] = memory_controller_nfa_print_0_suc2_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_qt_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_qt_out_b[64-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_qt_out_b[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_qt_out_b[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_qt_out_b[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_qt_out_b[32-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_qt_out_b[16-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_qt_out_b[16-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_qt_out_b[8-1:0] = memory_controller_nfa_print_0_qt_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_3_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_3_out_b[64-1:0] = memory_controller_nfa_print_0_3_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_3_out_b[32-1:0] = memory_controller_nfa_print_0_3_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_3_out_b[32-1:0] = memory_controller_nfa_print_0_3_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_3_out_b[32-1:0] = memory_controller_nfa_print_0_3_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_3_out_b[32-1:0] = memory_controller_nfa_print_0_3_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_3_out_b[16-1:0] = memory_controller_nfa_print_0_3_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_3_out_b[16-1:0] = memory_controller_nfa_print_0_3_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_3_out_b[8-1:0] = memory_controller_nfa_print_0_3_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_4_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_4_out_b[64-1:0] = memory_controller_nfa_print_0_4_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_4_out_b[32-1:0] = memory_controller_nfa_print_0_4_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_4_out_b[32-1:0] = memory_controller_nfa_print_0_4_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_4_out_b[32-1:0] = memory_controller_nfa_print_0_4_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_4_out_b[32-1:0] = memory_controller_nfa_print_0_4_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_4_out_b[16-1:0] = memory_controller_nfa_print_0_4_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_4_out_b[16-1:0] = memory_controller_nfa_print_0_4_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_4_out_b[8-1:0] = memory_controller_nfa_print_0_4_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_5_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_5_out_b[64-1:0] = memory_controller_nfa_print_0_5_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_5_out_b[32-1:0] = memory_controller_nfa_print_0_5_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_5_out_b[32-1:0] = memory_controller_nfa_print_0_5_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_5_out_b[32-1:0] = memory_controller_nfa_print_0_5_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_5_out_b[32-1:0] = memory_controller_nfa_print_0_5_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_5_out_b[16-1:0] = memory_controller_nfa_print_0_5_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_5_out_b[16-1:0] = memory_controller_nfa_print_0_5_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_5_out_b[8-1:0] = memory_controller_nfa_print_0_5_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_6_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_6_out_b[64-1:0] = memory_controller_nfa_print_0_6_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_6_out_b[32-1:0] = memory_controller_nfa_print_0_6_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_6_out_b[32-1:0] = memory_controller_nfa_print_0_6_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_6_out_b[32-1:0] = memory_controller_nfa_print_0_6_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_6_out_b[32-1:0] = memory_controller_nfa_print_0_6_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_6_out_b[16-1:0] = memory_controller_nfa_print_0_6_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_6_out_b[16-1:0] = memory_controller_nfa_print_0_6_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_6_out_b[8-1:0] = memory_controller_nfa_print_0_6_out_struct_b[64-1:56];
	endcase

	memory_controller_nfa_print_0_7_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_nfa_print_0_7_out_b[64-1:0] = memory_controller_nfa_print_0_7_out_struct_b[64-1:0];
		1: memory_controller_nfa_print_0_7_out_b[32-1:0] = memory_controller_nfa_print_0_7_out_struct_b[40-1:8];
		2: memory_controller_nfa_print_0_7_out_b[32-1:0] = memory_controller_nfa_print_0_7_out_struct_b[48-1:16];
		3: memory_controller_nfa_print_0_7_out_b[32-1:0] = memory_controller_nfa_print_0_7_out_struct_b[56-1:24];
		4: memory_controller_nfa_print_0_7_out_b[32-1:0] = memory_controller_nfa_print_0_7_out_struct_b[64-1:32];
		5: memory_controller_nfa_print_0_7_out_b[16-1:0] = memory_controller_nfa_print_0_7_out_struct_b[56-1:40];
		6: memory_controller_nfa_print_0_7_out_b[16-1:0] = memory_controller_nfa_print_0_7_out_struct_b[64-1:48];
		7: memory_controller_nfa_print_0_7_out_b[8-1:0] = memory_controller_nfa_print_0_7_out_struct_b[64-1:56];
	endcase

	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b | memory_controller__str1_out_b | memory_controller___PRETTY_FUNCTION___nfa_add_initial_out_b | memory_controller___PRETTY_FUNCTION___nfa_remove_initial_out_b | memory_controller___PRETTY_FUNCTION___nfa_is_initial_out_b | memory_controller___PRETTY_FUNCTION___nfa_add_final_out_b | memory_controller___PRETTY_FUNCTION___nfa_remove_final_out_b | memory_controller___PRETTY_FUNCTION___nfa_is_final_out_b | memory_controller__str2_out_b | memory_controller___PRETTY_FUNCTION___nfa_get_sucessors_out_b | memory_controller__str3_out_b | memory_controller___PRETTY_FUNCTION___nfa_get_predecessors_out_b | memory_controller__str5_out_b | memory_controller___PRETTY_FUNCTION___nfa_add_transition_out_b | memory_controller__str6_out_b | memory_controller__str7_out_b | memory_controller___PRETTY_FUNCTION___nfa_remove_transition_out_b | memory_controller___PRETTY_FUNCTION___nfa_merge_states_out_b | memory_controller__str8_out_b | memory_controller__str9_out_b | memory_controller___PRETTY_FUNCTION___nfa_accept_any_sample_out_b | memory_controller___PRETTY_FUNCTION___nfa_accept_all_samples_out_b | memory_controller___PRETTY_FUNCTION___nfa_accept_samples_out_b | memory_controller__str11_out_b | memory_controller__str12_out_b | memory_controller__str13_out_b | memory_controller_nfa_merge_states_0_1_out_b | memory_controller_nfa_merge_states_0_2_out_b | memory_controller_nfa_merge_states_0_3_out_b | memory_controller_nfa_merge_states_0_4_out_b | memory_controller_nfa_merge_states_0_5_out_b | memory_controller_nfa_merge_states_0_6_out_b | memory_controller_nfa_merge_states_0_bs_out_b | memory_controller_nfa_merge_states_0_i_out_b | memory_controller_nfa_merge_states_0_7_out_b | memory_controller_nfa_merge_states_0_8_out_b | memory_controller_nfa_merge_states_0_9_out_b | memory_controller_nfa_merge_states_0_10_out_b | memory_controller_nfa_merge_states_0_i1_out_b | memory_controller_nfa_merge_states_0_11_out_b | memory_controller_nfa_merge_states_0_12_out_b | memory_controller_nfa_merge_states_0_13_out_b | memory_controller_nfa_merge_states_0_14_out_b | memory_controller_nfa_accept_sample_0_next_out_b | memory_controller_nfa_accept_sample_0_current_out_b | memory_controller_nfa_accept_sample_0_tmp_out_b | memory_controller_nfa_accept_sample_0_j_out_b | memory_controller_nfa_accept_sample_0_1_out_b | memory_controller_nfa_accept_sample_0_2_out_b | memory_controller_nfa_accept_sample_0_3_out_b | memory_controller_nfa_print_0_1_out_b | memory_controller_nfa_print_0_2_out_b | memory_controller_nfa_print_0_suc_out_b | memory_controller_nfa_print_0_suc2_out_b | memory_controller_nfa_print_0_qt_out_b | memory_controller_nfa_print_0_3_out_b | memory_controller_nfa_print_0_4_out_b | memory_controller_nfa_print_0_5_out_b | memory_controller_nfa_print_0_6_out_b | memory_controller_nfa_print_0_7_out_b;
end

always @(posedge clk)
begin
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
select__str1_reg_b <= select__str1_b;
select___PRETTY_FUNCTION___nfa_add_initial_reg_b <= select___PRETTY_FUNCTION___nfa_add_initial_b;
select___PRETTY_FUNCTION___nfa_remove_initial_reg_b <= select___PRETTY_FUNCTION___nfa_remove_initial_b;
select___PRETTY_FUNCTION___nfa_is_initial_reg_b <= select___PRETTY_FUNCTION___nfa_is_initial_b;
select___PRETTY_FUNCTION___nfa_add_final_reg_b <= select___PRETTY_FUNCTION___nfa_add_final_b;
select___PRETTY_FUNCTION___nfa_remove_final_reg_b <= select___PRETTY_FUNCTION___nfa_remove_final_b;
select___PRETTY_FUNCTION___nfa_is_final_reg_b <= select___PRETTY_FUNCTION___nfa_is_final_b;
select__str2_reg_b <= select__str2_b;
select___PRETTY_FUNCTION___nfa_get_sucessors_reg_b <= select___PRETTY_FUNCTION___nfa_get_sucessors_b;
select__str3_reg_b <= select__str3_b;
select___PRETTY_FUNCTION___nfa_get_predecessors_reg_b <= select___PRETTY_FUNCTION___nfa_get_predecessors_b;
select__str5_reg_b <= select__str5_b;
select___PRETTY_FUNCTION___nfa_add_transition_reg_b <= select___PRETTY_FUNCTION___nfa_add_transition_b;
select__str6_reg_b <= select__str6_b;
select__str7_reg_b <= select__str7_b;
select___PRETTY_FUNCTION___nfa_remove_transition_reg_b <= select___PRETTY_FUNCTION___nfa_remove_transition_b;
select___PRETTY_FUNCTION___nfa_merge_states_reg_b <= select___PRETTY_FUNCTION___nfa_merge_states_b;
select__str8_reg_b <= select__str8_b;
select__str9_reg_b <= select__str9_b;
select___PRETTY_FUNCTION___nfa_accept_any_sample_reg_b <= select___PRETTY_FUNCTION___nfa_accept_any_sample_b;
select___PRETTY_FUNCTION___nfa_accept_all_samples_reg_b <= select___PRETTY_FUNCTION___nfa_accept_all_samples_b;
select___PRETTY_FUNCTION___nfa_accept_samples_reg_b <= select___PRETTY_FUNCTION___nfa_accept_samples_b;
select__str11_reg_b <= select__str11_b;
select__str12_reg_b <= select__str12_b;
select__str13_reg_b <= select__str13_b;
select_nfa_merge_states_0_1_reg_b <= select_nfa_merge_states_0_1_b;
select_nfa_merge_states_0_2_reg_b <= select_nfa_merge_states_0_2_b;
select_nfa_merge_states_0_3_reg_b <= select_nfa_merge_states_0_3_b;
select_nfa_merge_states_0_4_reg_b <= select_nfa_merge_states_0_4_b;
select_nfa_merge_states_0_5_reg_b <= select_nfa_merge_states_0_5_b;
select_nfa_merge_states_0_6_reg_b <= select_nfa_merge_states_0_6_b;
select_nfa_merge_states_0_bs_reg_b <= select_nfa_merge_states_0_bs_b;
select_nfa_merge_states_0_i_reg_b <= select_nfa_merge_states_0_i_b;
select_nfa_merge_states_0_7_reg_b <= select_nfa_merge_states_0_7_b;
select_nfa_merge_states_0_8_reg_b <= select_nfa_merge_states_0_8_b;
select_nfa_merge_states_0_9_reg_b <= select_nfa_merge_states_0_9_b;
select_nfa_merge_states_0_10_reg_b <= select_nfa_merge_states_0_10_b;
select_nfa_merge_states_0_i1_reg_b <= select_nfa_merge_states_0_i1_b;
select_nfa_merge_states_0_11_reg_b <= select_nfa_merge_states_0_11_b;
select_nfa_merge_states_0_12_reg_b <= select_nfa_merge_states_0_12_b;
select_nfa_merge_states_0_13_reg_b <= select_nfa_merge_states_0_13_b;
select_nfa_merge_states_0_14_reg_b <= select_nfa_merge_states_0_14_b;
select_nfa_accept_sample_0_next_reg_b <= select_nfa_accept_sample_0_next_b;
select_nfa_accept_sample_0_current_reg_b <= select_nfa_accept_sample_0_current_b;
select_nfa_accept_sample_0_tmp_reg_b <= select_nfa_accept_sample_0_tmp_b;
select_nfa_accept_sample_0_j_reg_b <= select_nfa_accept_sample_0_j_b;
select_nfa_accept_sample_0_1_reg_b <= select_nfa_accept_sample_0_1_b;
select_nfa_accept_sample_0_2_reg_b <= select_nfa_accept_sample_0_2_b;
select_nfa_accept_sample_0_3_reg_b <= select_nfa_accept_sample_0_3_b;
select_nfa_print_0_1_reg_b <= select_nfa_print_0_1_b;
select_nfa_print_0_2_reg_b <= select_nfa_print_0_2_b;
select_nfa_print_0_suc_reg_b <= select_nfa_print_0_suc_b;
select_nfa_print_0_suc2_reg_b <= select_nfa_print_0_suc2_b;
select_nfa_print_0_qt_reg_b <= select_nfa_print_0_qt_b;
select_nfa_print_0_3_reg_b <= select_nfa_print_0_3_b;
select_nfa_print_0_4_reg_b <= select_nfa_print_0_4_b;
select_nfa_print_0_5_reg_b <= select_nfa_print_0_5_b;
select_nfa_print_0_6_reg_b <= select_nfa_print_0_6_b;
select_nfa_print_0_7_reg_b <= select_nfa_print_0_7_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module _conformance_check_nfa
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F__conformance_check_nfa_BB_0_1 = 1'd1;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg  cur_state;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F__conformance_check_nfa_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F__conformance_check_nfa_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F__conformance_check_nfa_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F__conformance_check_nfa_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F__conformance_check_nfa_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F__conformance_check_nfa_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* _conformance_check_nfa: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F__conformance_check_nfa_BB_0_1))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_get_states
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_nfa_get_states_BB_0_1 = 1'd1;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [7:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg  cur_state;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_states_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_states_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_states_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_states_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_states_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_states_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_get_states: %0*/
/*   ret i8 63*/
if ((cur_state == LEGUP_F_nfa_get_states_BB_0_1))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_get_states: %0*/
/*   ret i8 63*/
if ((cur_state == LEGUP_F_nfa_get_states_BB_0_1))
begin
return_val <= 8'd63;
if (^reset !== 1'bX && ^(8'd63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_add_initial
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_add_initial_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_add_initial_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_add_initial_BB_2_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_add_initial_BB_3_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_add_initial_BB_3_7 = 3'd7;
parameter [2:0] LEGUP_function_call_3 = 3'd3;
parameter [2:0] LEGUP_function_call_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg  nfa_add_initial_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_initial_3_4;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_add_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_arg_0;
reg [7:0] bitset_add_arg_1;
reg  bitset_add_memory_controller_waitrequest;
wire  bitset_add_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_a;
wire  bitset_add_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_a;
wire [1:0] bitset_add_memory_controller_size_a;
wire  bitset_add_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_b;
wire  bitset_add_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_b;
wire [1:0] bitset_add_memory_controller_size_b;
wire  bitset_add_finish;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_add bitset_add_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_add_start),
	.finish (bitset_add_finish),
	.memory_controller_enable_a (bitset_add_memory_controller_enable_a),
	.memory_controller_address_a (bitset_add_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_add_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_add_memory_controller_in_a),
	.memory_controller_size_a (bitset_add_memory_controller_size_a),
	.memory_controller_out_a (bitset_add_memory_controller_out_a),
	.memory_controller_enable_b (bitset_add_memory_controller_enable_b),
	.memory_controller_address_b (bitset_add_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_add_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_add_memory_controller_in_b),
	.memory_controller_size_b (bitset_add_memory_controller_size_b),
	.memory_controller_out_b (bitset_add_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_add_memory_controller_waitrequest),
	.arg_0 (bitset_add_arg_0),
	.arg_1 (bitset_add_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_initial_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_initial_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_initial_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_initial_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_initial_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_initial_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_initial_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_add_initial: %0*/
/*   %1 = icmp ult i8 %q, 63*/
begin
nfa_add_initial_0_1 = (arg_q < 8'd63);
end
end
always @(*) begin
/* nfa_add_initial: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
begin
nfa_add_initial_3_4 = arg_nfa;
end
end
always @(posedge clk) begin
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str_a;
if (^reset !== 1'bX && ^(`TAG_g__str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd36;
if (^reset !== 1'bX && ^(32'd36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_add_initial_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_add_initial_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_3_5))
begin
bitset_add_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_3_5))
begin
bitset_add_arg_0 <= nfa_add_initial_3_4;
if (^reset !== 1'bX && ^(nfa_add_initial_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_3_5))
begin
bitset_add_arg_1 <= arg_q;
if (^reset !== 1'bX && ^(arg_q) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_1"); $finish; end
end
end
always @(*) begin
bitset_add_memory_controller_waitrequest = 1'd0;
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_add_memory_controller_out_a = 1'd0;
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_add_memory_controller_out_b = 1'd0;
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_add_initial: %3*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_add_initial_BB_3_7))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_a = bitset_add_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_a = bitset_add_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_a = bitset_add_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_a = bitset_add_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_a = bitset_add_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_b = bitset_add_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_b = bitset_add_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_b = bitset_add_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_b = bitset_add_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_add_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 36, i8* getelementptr inbounds ([39 x i8]* @__PRETTY_FUNCTION__.nfa_add_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_add_initial: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_b = bitset_add_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_remove_initial
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_remove_initial_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_remove_initial_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_remove_initial_BB_2_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_remove_initial_BB_3_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_remove_initial_BB_3_7 = 3'd7;
parameter [2:0] LEGUP_function_call_3 = 3'd3;
parameter [2:0] LEGUP_function_call_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg  nfa_remove_initial_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_initial_3_4;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_remove_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_arg_0;
reg [7:0] bitset_remove_arg_1;
reg  bitset_remove_memory_controller_waitrequest;
wire  bitset_remove_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_a;
wire  bitset_remove_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_a;
wire [1:0] bitset_remove_memory_controller_size_a;
wire  bitset_remove_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_b;
wire  bitset_remove_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_b;
wire [1:0] bitset_remove_memory_controller_size_b;
wire  bitset_remove_finish;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_remove bitset_remove_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_remove_start),
	.finish (bitset_remove_finish),
	.memory_controller_enable_a (bitset_remove_memory_controller_enable_a),
	.memory_controller_address_a (bitset_remove_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_remove_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_remove_memory_controller_in_a),
	.memory_controller_size_a (bitset_remove_memory_controller_size_a),
	.memory_controller_out_a (bitset_remove_memory_controller_out_a),
	.memory_controller_enable_b (bitset_remove_memory_controller_enable_b),
	.memory_controller_address_b (bitset_remove_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_remove_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_remove_memory_controller_in_b),
	.memory_controller_size_b (bitset_remove_memory_controller_size_b),
	.memory_controller_out_b (bitset_remove_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_remove_memory_controller_waitrequest),
	.arg_0 (bitset_remove_arg_0),
	.arg_1 (bitset_remove_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_initial_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_initial_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_initial_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_initial_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_initial_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_initial_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_initial_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_remove_initial: %0*/
/*   %1 = icmp ult i8 %q, 63*/
begin
nfa_remove_initial_0_1 = (arg_q < 8'd63);
end
end
always @(*) begin
/* nfa_remove_initial: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
begin
nfa_remove_initial_3_4 = arg_nfa;
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str_a;
if (^reset !== 1'bX && ^(`TAG_g__str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd43;
if (^reset !== 1'bX && ^(32'd43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_remove_initial_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_remove_initial_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_3_5))
begin
bitset_remove_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_3_5))
begin
bitset_remove_arg_0 <= nfa_remove_initial_3_4;
if (^reset !== 1'bX && ^(nfa_remove_initial_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_3_5))
begin
bitset_remove_arg_1 <= arg_q;
if (^reset !== 1'bX && ^(arg_q) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_1"); $finish; end
end
end
always @(*) begin
bitset_remove_memory_controller_waitrequest = 1'd0;
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_remove_memory_controller_out_a = 1'd0;
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_remove_memory_controller_out_b = 1'd0;
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_remove_initial: %3*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_remove_initial_BB_3_7))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_a = bitset_remove_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_a = bitset_remove_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_a = bitset_remove_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_a = bitset_remove_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_a = bitset_remove_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_b = bitset_remove_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_b = bitset_remove_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_b = bitset_remove_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_b = bitset_remove_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_remove_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 43, i8* getelementptr inbounds ([42 x i8]* @__PRETTY_FUNCTION__.nfa_remove_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_remove_initial: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_b = bitset_remove_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_is_initial
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	arg_q,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_is_initial_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_is_initial_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_is_initial_BB_2_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_is_initial_BB_3_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_is_initial_BB_3_7 = 3'd7;
parameter [2:0] LEGUP_function_call_3 = 3'd3;
parameter [2:0] LEGUP_function_call_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg  nfa_is_initial_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_is_initial_3_4;
reg [31:0] nfa_is_initial_3_5;
reg  nfa_is_initial_3_6;
reg  nfa_is_initial_3_6_reg;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_contains_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_arg_0;
reg [31:0] bitset_contains_arg_1;
reg  bitset_contains_memory_controller_waitrequest;
wire  bitset_contains_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_a;
wire  bitset_contains_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_a;
wire [1:0] bitset_contains_memory_controller_size_a;
wire  bitset_contains_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_b;
wire  bitset_contains_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_b;
wire [1:0] bitset_contains_memory_controller_size_b;
wire  bitset_contains_finish;
wire  bitset_contains_return_val;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_contains bitset_contains_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_contains_start),
	.finish (bitset_contains_finish),
	.return_val (bitset_contains_return_val),
	.memory_controller_enable_a (bitset_contains_memory_controller_enable_a),
	.memory_controller_address_a (bitset_contains_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_contains_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_contains_memory_controller_in_a),
	.memory_controller_size_a (bitset_contains_memory_controller_size_a),
	.memory_controller_out_a (bitset_contains_memory_controller_out_a),
	.memory_controller_enable_b (bitset_contains_memory_controller_enable_b),
	.memory_controller_address_b (bitset_contains_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_contains_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_contains_memory_controller_in_b),
	.memory_controller_size_b (bitset_contains_memory_controller_size_b),
	.memory_controller_out_b (bitset_contains_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_contains_memory_controller_waitrequest),
	.arg_0 (bitset_contains_arg_0),
	.arg_1 (bitset_contains_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_is_initial_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_is_initial_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_is_initial_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_is_initial_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_initial_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_initial_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_initial_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_is_initial: %0*/
/*   %1 = icmp ult i8 %q, 63*/
begin
nfa_is_initial_0_1 = (arg_q < 8'd63);
end
end
always @(*) begin
/* nfa_is_initial: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
begin
nfa_is_initial_3_4 = arg_nfa;
end
end
always @(*) begin
/* nfa_is_initial: %3*/
/*   %5 = zext i8 %q to i32*/
begin
nfa_is_initial_3_5 = {arg_q};
end
end
always @(*) begin
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
begin
nfa_is_initial_3_6 = bitset_contains_return_val;
end
end
always @(posedge clk) begin
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
nfa_is_initial_3_6_reg <= nfa_is_initial_3_6;
if (^reset !== 1'bX && ^(nfa_is_initial_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_is_initial_3_6_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str_a;
if (^reset !== 1'bX && ^(`TAG_g__str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd50;
if (^reset !== 1'bX && ^(32'd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_is_initial_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_is_initial_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_3_5))
begin
bitset_contains_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_3_5))
begin
bitset_contains_arg_0 <= nfa_is_initial_3_4;
if (^reset !== 1'bX && ^(nfa_is_initial_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_3_5))
begin
bitset_contains_arg_1 <= nfa_is_initial_3_5;
if (^reset !== 1'bX && ^(nfa_is_initial_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_1"); $finish; end
end
end
always @(*) begin
bitset_contains_memory_controller_waitrequest = 1'd0;
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_contains_memory_controller_out_a = 1'd0;
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_contains_memory_controller_out_b = 1'd0;
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_is_initial: %3*/
/*   ret i1 %6*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_3_7))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_is_initial: %3*/
/*   ret i1 %6*/
if ((cur_state == LEGUP_F_nfa_is_initial_BB_3_7))
begin
return_val <= nfa_is_initial_3_6_reg;
if (^reset !== 1'bX && ^(nfa_is_initial_3_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_a = bitset_contains_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_a = bitset_contains_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_a = bitset_contains_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_a = bitset_contains_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_a = bitset_contains_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_b = bitset_contains_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_b = bitset_contains_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_b = bitset_contains_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_b = bitset_contains_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_is_initial: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 50, i8* getelementptr inbounds ([45 x i8]* @__PRETTY_FUNCTION__.nfa_is_initial, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_is_initial: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_b = bitset_contains_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_get_initials
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_initials,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_get_initials_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_get_initials_BB_1_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_get_initials_BB_4_3 = 3'd3;
parameter [2:0] LEGUP_F_nfa_get_initials_BB_4_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_get_initials_BB_4_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_initials;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_0_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_0_tmp1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_1_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_1_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_1_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_1_dt_i_0_reg;
reg [31:0] nfa_get_initials_1_2;
reg [31:0] nfa_get_initials_1_2_reg;
reg  nfa_get_initials_1_3;
reg [31:0] nfa_get_initials_4_5;
reg [31:0] nfa_get_initials_4_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_4_6_reg;
reg [31:0] nfa_get_initials_4_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_4_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_4_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_1_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_initials_1_dt_i_0_phi_temp;
reg [31:0] nfa_get_initials_1_2_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_initials_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_initials_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_initials_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_initials_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_get_initials: %0*/
/*   %tmp = getelementptr inbounds %struct._bitset_t* %initials, i32 0, i32 0, i32 0*/
begin
nfa_get_initials_0_tmp = arg_initials;
end
end
always @(*) begin
/* nfa_get_initials: %0*/
/*   %tmp1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0, i32 0, i32 0*/
begin
nfa_get_initials_0_tmp1 = arg_nfa;
end
end
always @(*) begin
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_st_i_0 = nfa_get_initials_1_st_i_0_phi_temp;
end
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_st_i_0 = nfa_get_initials_1_st_i_0_phi_temp;
end
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2)) */
begin
nfa_get_initials_1_st_i_0 = nfa_get_initials_1_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_st_i_0_reg <= nfa_get_initials_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_st_i_0_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_st_i_0_reg <= nfa_get_initials_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_st_i_0_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_st_i_0_reg <= nfa_get_initials_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_st_i_0_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_st_i_0_reg <= nfa_get_initials_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_dt_i_0 = nfa_get_initials_1_dt_i_0_phi_temp;
end
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_dt_i_0 = nfa_get_initials_1_dt_i_0_phi_temp;
end
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2)) */
begin
nfa_get_initials_1_dt_i_0 = nfa_get_initials_1_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_dt_i_0_reg <= nfa_get_initials_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_dt_i_0_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_dt_i_0_reg <= nfa_get_initials_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_dt_i_0_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_dt_i_0_reg <= nfa_get_initials_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_dt_i_0_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_dt_i_0_reg <= nfa_get_initials_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_initials_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_2 = nfa_get_initials_1_2_phi_temp;
end
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2)) */
begin
nfa_get_initials_1_2 = nfa_get_initials_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_2_reg <= nfa_get_initials_1_2;
if (^reset !== 1'bX && ^(nfa_get_initials_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_2_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_2_reg <= nfa_get_initials_1_2;
if (^reset !== 1'bX && ^(nfa_get_initials_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_2_reg"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_1_2))
begin
nfa_get_initials_1_2_reg <= nfa_get_initials_1_2;
if (^reset !== 1'bX && ^(nfa_get_initials_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_initials: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
nfa_get_initials_1_3 = (nfa_get_initials_1_2 == 32'd0);
end
end
always @(*) begin
/* nfa_get_initials: %4*/
/*   %5 = add i32 %2, -1*/
begin
nfa_get_initials_4_5 = (nfa_get_initials_1_2_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_get_initials: %4*/
/*   %5 = add i32 %2, -1*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
nfa_get_initials_4_5_reg <= nfa_get_initials_4_5;
if (^reset !== 1'bX && ^(nfa_get_initials_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_4_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_initials: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
nfa_get_initials_4_6 = (nfa_get_initials_1_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_initials: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
nfa_get_initials_4_6_reg <= nfa_get_initials_4_6;
if (^reset !== 1'bX && ^(nfa_get_initials_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_4_6_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_initials: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
begin
nfa_get_initials_4_7 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_get_initials: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
nfa_get_initials_4_8 = (nfa_get_initials_1_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_initials: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
nfa_get_initials_4_8_reg <= nfa_get_initials_4_8;
if (^reset !== 1'bX && ^(nfa_get_initials_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_4_8_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_initials_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_initials_1_st_i_0_phi_temp <= nfa_get_initials_0_tmp1;
if (^reset !== 1'bX && ^(nfa_get_initials_0_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_st_i_0_phi_temp"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_initials_1_st_i_0_phi_temp <= nfa_get_initials_4_6_reg;
if (^reset !== 1'bX && ^(nfa_get_initials_4_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_initials_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_initials_1_dt_i_0_phi_temp <= nfa_get_initials_0_tmp;
if (^reset !== 1'bX && ^(nfa_get_initials_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_dt_i_0_phi_temp"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_initials_1_dt_i_0_phi_temp <= nfa_get_initials_4_8_reg;
if (^reset !== 1'bX && ^(nfa_get_initials_4_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_initials_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_initials_1_2_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_2_phi_temp"); $finish; end
end
/* nfa_get_initials: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_initials_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_initials_1_2_phi_temp <= nfa_get_initials_4_5_reg;
if (^reset !== 1'bX && ^(nfa_get_initials_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_initials_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_get_initials: %legup_memcpy_4.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_legup_memcpy_4_exit_6))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_get_initials: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_get_initials: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_5))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_get_initials: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
memory_controller_address_a = nfa_get_initials_1_st_i_0_reg;
end
/* nfa_get_initials: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_5))
begin
memory_controller_address_a = nfa_get_initials_1_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_initials: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_initials: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_5))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_get_initials: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_5))
begin
memory_controller_in_a = {nfa_get_initials_4_7};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_get_initials: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_3))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_get_initials: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_initials_BB_4_5))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_add_final
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_add_final_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_add_final_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_add_final_BB_2_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_add_final_BB_3_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_add_final_BB_3_7 = 3'd7;
parameter [2:0] LEGUP_function_call_3 = 3'd3;
parameter [2:0] LEGUP_function_call_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg  nfa_add_final_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_final_3_4;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_add_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_arg_0;
reg [7:0] bitset_add_arg_1;
reg  bitset_add_memory_controller_waitrequest;
wire  bitset_add_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_a;
wire  bitset_add_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_a;
wire [1:0] bitset_add_memory_controller_size_a;
wire  bitset_add_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_b;
wire  bitset_add_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_b;
wire [1:0] bitset_add_memory_controller_size_b;
wire  bitset_add_finish;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_add bitset_add_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_add_start),
	.finish (bitset_add_finish),
	.memory_controller_enable_a (bitset_add_memory_controller_enable_a),
	.memory_controller_address_a (bitset_add_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_add_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_add_memory_controller_in_a),
	.memory_controller_size_a (bitset_add_memory_controller_size_a),
	.memory_controller_out_a (bitset_add_memory_controller_out_a),
	.memory_controller_enable_b (bitset_add_memory_controller_enable_b),
	.memory_controller_address_b (bitset_add_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_add_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_add_memory_controller_in_b),
	.memory_controller_size_b (bitset_add_memory_controller_size_b),
	.memory_controller_out_b (bitset_add_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_add_memory_controller_waitrequest),
	.arg_0 (bitset_add_arg_0),
	.arg_1 (bitset_add_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_final_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_final_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_final_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_final_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_final_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_final_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_final_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_add_final: %0*/
/*   %1 = icmp ult i8 %q, 63*/
begin
nfa_add_final_0_1 = (arg_q < 8'd63);
end
end
always @(*) begin
/* nfa_add_final: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
begin
nfa_add_final_3_4 = (arg_nfa + 12);
end
end
always @(posedge clk) begin
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str_a;
if (^reset !== 1'bX && ^(`TAG_g__str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd62;
if (^reset !== 1'bX && ^(32'd62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_add_final_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_add_final_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_3_5))
begin
bitset_add_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_3_5))
begin
bitset_add_arg_0 <= nfa_add_final_3_4;
if (^reset !== 1'bX && ^(nfa_add_final_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_3_5))
begin
bitset_add_arg_1 <= arg_q;
if (^reset !== 1'bX && ^(arg_q) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_1"); $finish; end
end
end
always @(*) begin
bitset_add_memory_controller_waitrequest = 1'd0;
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_add_memory_controller_out_a = 1'd0;
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_add_memory_controller_out_b = 1'd0;
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_add_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_add_final: %3*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_add_final_BB_3_7))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_a = bitset_add_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_a = bitset_add_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_a = bitset_add_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_a = bitset_add_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_a = bitset_add_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_b = bitset_add_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_b = bitset_add_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_b = bitset_add_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_b = bitset_add_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_add_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 62, i8* getelementptr inbounds ([37 x i8]* @__PRETTY_FUNCTION__.nfa_add_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_add_final: %3*/
/*   call void @bitset_add(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_b = bitset_add_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_remove_final
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_remove_final_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_remove_final_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_remove_final_BB_2_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_remove_final_BB_3_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_remove_final_BB_3_7 = 3'd7;
parameter [2:0] LEGUP_function_call_3 = 3'd3;
parameter [2:0] LEGUP_function_call_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg  nfa_remove_final_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_final_3_4;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_remove_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_arg_0;
reg [7:0] bitset_remove_arg_1;
reg  bitset_remove_memory_controller_waitrequest;
wire  bitset_remove_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_a;
wire  bitset_remove_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_a;
wire [1:0] bitset_remove_memory_controller_size_a;
wire  bitset_remove_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_b;
wire  bitset_remove_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_b;
wire [1:0] bitset_remove_memory_controller_size_b;
wire  bitset_remove_finish;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_remove bitset_remove_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_remove_start),
	.finish (bitset_remove_finish),
	.memory_controller_enable_a (bitset_remove_memory_controller_enable_a),
	.memory_controller_address_a (bitset_remove_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_remove_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_remove_memory_controller_in_a),
	.memory_controller_size_a (bitset_remove_memory_controller_size_a),
	.memory_controller_out_a (bitset_remove_memory_controller_out_a),
	.memory_controller_enable_b (bitset_remove_memory_controller_enable_b),
	.memory_controller_address_b (bitset_remove_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_remove_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_remove_memory_controller_in_b),
	.memory_controller_size_b (bitset_remove_memory_controller_size_b),
	.memory_controller_out_b (bitset_remove_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_remove_memory_controller_waitrequest),
	.arg_0 (bitset_remove_arg_0),
	.arg_1 (bitset_remove_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_final_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_final_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_final_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_final_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_final_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_final_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_final_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_remove_final: %0*/
/*   %1 = icmp ult i8 %q, 63*/
begin
nfa_remove_final_0_1 = (arg_q < 8'd63);
end
end
always @(*) begin
/* nfa_remove_final: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
begin
nfa_remove_final_3_4 = (arg_nfa + 12);
end
end
always @(posedge clk) begin
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str_a;
if (^reset !== 1'bX && ^(`TAG_g__str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd69;
if (^reset !== 1'bX && ^(32'd69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_remove_final_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_remove_final_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_3_5))
begin
bitset_remove_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_3_5))
begin
bitset_remove_arg_0 <= nfa_remove_final_3_4;
if (^reset !== 1'bX && ^(nfa_remove_final_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_3_5))
begin
bitset_remove_arg_1 <= arg_q;
if (^reset !== 1'bX && ^(arg_q) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_1"); $finish; end
end
end
always @(*) begin
bitset_remove_memory_controller_waitrequest = 1'd0;
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_remove_memory_controller_out_a = 1'd0;
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_remove_memory_controller_out_b = 1'd0;
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_remove_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_remove_final: %3*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_remove_final_BB_3_7))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_a = bitset_remove_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_a = bitset_remove_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_a = bitset_remove_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_a = bitset_remove_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_a = bitset_remove_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_b = bitset_remove_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_b = bitset_remove_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_b = bitset_remove_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_b = bitset_remove_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_remove_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 69, i8* getelementptr inbounds ([40 x i8]* @__PRETTY_FUNCTION__.nfa_remove_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_remove_final: %3*/
/*   call void @bitset_remove(%struct._bitset_t* %4, i8 zeroext %q) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_b = bitset_remove_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_is_final
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	arg_q,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_is_final_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_is_final_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_is_final_BB_2_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_is_final_BB_3_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_is_final_BB_3_7 = 3'd7;
parameter [2:0] LEGUP_function_call_3 = 3'd3;
parameter [2:0] LEGUP_function_call_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg  nfa_is_final_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_is_final_3_4;
reg [31:0] nfa_is_final_3_5;
reg  nfa_is_final_3_6;
reg  nfa_is_final_3_6_reg;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_contains_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_arg_0;
reg [31:0] bitset_contains_arg_1;
reg  bitset_contains_memory_controller_waitrequest;
wire  bitset_contains_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_a;
wire  bitset_contains_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_a;
wire [1:0] bitset_contains_memory_controller_size_a;
wire  bitset_contains_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_b;
wire  bitset_contains_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_b;
wire [1:0] bitset_contains_memory_controller_size_b;
wire  bitset_contains_finish;
wire  bitset_contains_return_val;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_contains bitset_contains_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_contains_start),
	.finish (bitset_contains_finish),
	.return_val (bitset_contains_return_val),
	.memory_controller_enable_a (bitset_contains_memory_controller_enable_a),
	.memory_controller_address_a (bitset_contains_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_contains_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_contains_memory_controller_in_a),
	.memory_controller_size_a (bitset_contains_memory_controller_size_a),
	.memory_controller_out_a (bitset_contains_memory_controller_out_a),
	.memory_controller_enable_b (bitset_contains_memory_controller_enable_b),
	.memory_controller_address_b (bitset_contains_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_contains_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_contains_memory_controller_in_b),
	.memory_controller_size_b (bitset_contains_memory_controller_size_b),
	.memory_controller_out_b (bitset_contains_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_contains_memory_controller_waitrequest),
	.arg_0 (bitset_contains_arg_0),
	.arg_1 (bitset_contains_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_is_final_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_is_final_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_is_final_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_is_final_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_is_final_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_is_final_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_is_final_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_is_final: %0*/
/*   %1 = icmp ult i8 %q, 63*/
begin
nfa_is_final_0_1 = (arg_q < 8'd63);
end
end
always @(*) begin
/* nfa_is_final: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
begin
nfa_is_final_3_4 = (arg_nfa + 12);
end
end
always @(*) begin
/* nfa_is_final: %3*/
/*   %5 = zext i8 %q to i32*/
begin
nfa_is_final_3_5 = {arg_q};
end
end
always @(*) begin
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
begin
nfa_is_final_3_6 = bitset_contains_return_val;
end
end
always @(posedge clk) begin
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
nfa_is_final_3_6_reg <= nfa_is_final_3_6;
if (^reset !== 1'bX && ^(nfa_is_final_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_is_final_3_6_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str_a;
if (^reset !== 1'bX && ^(`TAG_g__str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd76;
if (^reset !== 1'bX && ^(32'd76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_is_final_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_is_final_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_3_5))
begin
bitset_contains_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_3_5))
begin
bitset_contains_arg_0 <= nfa_is_final_3_4;
if (^reset !== 1'bX && ^(nfa_is_final_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_3_5))
begin
bitset_contains_arg_1 <= nfa_is_final_3_5;
if (^reset !== 1'bX && ^(nfa_is_final_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_1"); $finish; end
end
end
always @(*) begin
bitset_contains_memory_controller_waitrequest = 1'd0;
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_contains_memory_controller_out_a = 1'd0;
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_contains_memory_controller_out_b = 1'd0;
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
bitset_contains_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_is_final: %3*/
/*   ret i1 %6*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_3_7))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_is_final: %3*/
/*   ret i1 %6*/
if ((cur_state == LEGUP_F_nfa_is_final_BB_3_7))
begin
return_val <= nfa_is_final_3_6_reg;
if (^reset !== 1'bX && ^(nfa_is_final_3_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_a = bitset_contains_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_a = bitset_contains_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_a = bitset_contains_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_a = bitset_contains_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_a = bitset_contains_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_enable_b = bitset_contains_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_address_b = bitset_contains_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_write_enable_b = bitset_contains_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_in_b = bitset_contains_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_is_final: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([43 x i8]* @__PRETTY_FUNCTION__.nfa_is_final, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_is_final: %3*/
/*   %6 = call zeroext i1 @bitset_contains(%struct._bitset_t* %4, i32 %5) nounwind*/
if ((cur_state == LEGUP_function_call_6))
begin
memory_controller_size_b = bitset_contains_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_get_finals
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_finals,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_get_finals_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_get_finals_BB_1_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_get_finals_BB_4_3 = 3'd3;
parameter [2:0] LEGUP_F_nfa_get_finals_BB_4_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_get_finals_BB_4_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_finals;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_0_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_0_tmp1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_1_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_1_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_1_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_1_dt_i_0_reg;
reg [31:0] nfa_get_finals_1_2;
reg [31:0] nfa_get_finals_1_2_reg;
reg  nfa_get_finals_1_3;
reg [31:0] nfa_get_finals_4_5;
reg [31:0] nfa_get_finals_4_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_4_6_reg;
reg [31:0] nfa_get_finals_4_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_4_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_4_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_1_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_finals_1_dt_i_0_phi_temp;
reg [31:0] nfa_get_finals_1_2_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_finals_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_finals_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_finals_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_finals_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_get_finals: %0*/
/*   %tmp = getelementptr inbounds %struct._bitset_t* %finals, i32 0, i32 0, i32 0*/
begin
nfa_get_finals_0_tmp = arg_finals;
end
end
always @(*) begin
/* nfa_get_finals: %0*/
/*   %tmp1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1, i32 0, i32 0*/
begin
nfa_get_finals_0_tmp1 = (arg_nfa + 12);
end
end
always @(*) begin
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_st_i_0 = nfa_get_finals_1_st_i_0_phi_temp;
end
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_st_i_0 = nfa_get_finals_1_st_i_0_phi_temp;
end
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2)) */
begin
nfa_get_finals_1_st_i_0 = nfa_get_finals_1_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_st_i_0_reg <= nfa_get_finals_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_st_i_0_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_st_i_0_reg <= nfa_get_finals_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_st_i_0_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_st_i_0_reg <= nfa_get_finals_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_st_i_0_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_st_i_0_reg <= nfa_get_finals_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_dt_i_0 = nfa_get_finals_1_dt_i_0_phi_temp;
end
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_dt_i_0 = nfa_get_finals_1_dt_i_0_phi_temp;
end
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2)) */
begin
nfa_get_finals_1_dt_i_0 = nfa_get_finals_1_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_dt_i_0_reg <= nfa_get_finals_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_dt_i_0_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_dt_i_0_reg <= nfa_get_finals_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_dt_i_0_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_dt_i_0_reg <= nfa_get_finals_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_dt_i_0_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_dt_i_0_reg <= nfa_get_finals_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_finals_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_2 = nfa_get_finals_1_2_phi_temp;
end
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2)) */
begin
nfa_get_finals_1_2 = nfa_get_finals_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_2_reg <= nfa_get_finals_1_2;
if (^reset !== 1'bX && ^(nfa_get_finals_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_2_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_2_reg <= nfa_get_finals_1_2;
if (^reset !== 1'bX && ^(nfa_get_finals_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_2_reg"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_1_2))
begin
nfa_get_finals_1_2_reg <= nfa_get_finals_1_2;
if (^reset !== 1'bX && ^(nfa_get_finals_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_finals: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
nfa_get_finals_1_3 = (nfa_get_finals_1_2 == 32'd0);
end
end
always @(*) begin
/* nfa_get_finals: %4*/
/*   %5 = add i32 %2, -1*/
begin
nfa_get_finals_4_5 = (nfa_get_finals_1_2_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_get_finals: %4*/
/*   %5 = add i32 %2, -1*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
nfa_get_finals_4_5_reg <= nfa_get_finals_4_5;
if (^reset !== 1'bX && ^(nfa_get_finals_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_4_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_finals: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
nfa_get_finals_4_6 = (nfa_get_finals_1_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_finals: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
nfa_get_finals_4_6_reg <= nfa_get_finals_4_6;
if (^reset !== 1'bX && ^(nfa_get_finals_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_4_6_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_finals: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
begin
nfa_get_finals_4_7 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_get_finals: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
nfa_get_finals_4_8 = (nfa_get_finals_1_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_finals: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
nfa_get_finals_4_8_reg <= nfa_get_finals_4_8;
if (^reset !== 1'bX && ^(nfa_get_finals_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_4_8_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_finals_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_finals_1_st_i_0_phi_temp <= nfa_get_finals_0_tmp1;
if (^reset !== 1'bX && ^(nfa_get_finals_0_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_st_i_0_phi_temp"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_finals_1_st_i_0_phi_temp <= nfa_get_finals_4_6_reg;
if (^reset !== 1'bX && ^(nfa_get_finals_4_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_finals_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_finals_1_dt_i_0_phi_temp <= nfa_get_finals_0_tmp;
if (^reset !== 1'bX && ^(nfa_get_finals_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_dt_i_0_phi_temp"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_finals_1_dt_i_0_phi_temp <= nfa_get_finals_4_8_reg;
if (^reset !== 1'bX && ^(nfa_get_finals_4_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_finals_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_finals_1_2_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_2_phi_temp"); $finish; end
end
/* nfa_get_finals: %1*/
/*   %2 = phi i32 [ 3, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_nfa_get_finals_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_finals_1_2_phi_temp <= nfa_get_finals_4_5_reg;
if (^reset !== 1'bX && ^(nfa_get_finals_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_finals_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_get_finals: %legup_memcpy_4.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_legup_memcpy_4_exit_6))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_get_finals: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_get_finals: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_5))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_get_finals: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
memory_controller_address_a = nfa_get_finals_1_st_i_0_reg;
end
/* nfa_get_finals: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_5))
begin
memory_controller_address_a = nfa_get_finals_1_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_finals: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_finals: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_5))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_get_finals: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_5))
begin
memory_controller_in_a = {nfa_get_finals_4_7};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_get_finals: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_3))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_get_finals: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_finals_BB_4_5))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_get_symbols
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_nfa_get_symbols_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_nfa_get_symbols_BB_0_2 = 2'd2;
parameter [1:0] LEGUP_F_nfa_get_symbols_BB_0_3 = 2'd3;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [7:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [1:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_symbols_0_1;
reg [31:0] nfa_get_symbols_0_2;
reg [7:0] nfa_get_symbols_0_3;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_symbols_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_symbols_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_symbols_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_symbols_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_symbols_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_symbols_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_symbols_BB_0_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_symbols_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_symbols_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_symbols_BB_0_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_symbols_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_symbols_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_symbols_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_symbols_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_symbols_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_symbols_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_symbols_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_symbols_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (^reset !== 1'bX && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_get_symbols: %0*/
/*   %1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_get_symbols_0_1 = (arg_nfa + 385584);
end
end
always @(*) begin
/* nfa_get_symbols: %0*/
/*   %2 = load i32* %1, align 4*/
begin
nfa_get_symbols_0_2 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_get_symbols: %0*/
/*   %3 = trunc i32 %2 to i8*/
begin
nfa_get_symbols_0_3 = nfa_get_symbols_0_2[7:0];
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_get_symbols: %0*/
/*   ret i8 %3*/
if ((cur_state == LEGUP_F_nfa_get_symbols_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_get_symbols: %0*/
/*   ret i8 %3*/
if ((cur_state == LEGUP_F_nfa_get_symbols_BB_0_3))
begin
return_val <= nfa_get_symbols_0_3;
if (^reset !== 1'bX && ^(nfa_get_symbols_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_get_symbols: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_get_symbols_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_get_symbols: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_get_symbols_BB_0_1))
begin
memory_controller_address_a = nfa_get_symbols_0_1;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_symbols: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_get_symbols_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_get_symbols: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_get_symbols_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_get_sucessors
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_state,
	arg_sym,
	arg_bs,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_2_2 = 5'd2;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_2_4 = 5'd4;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_3_5 = 5'd5;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_3_6 = 5'd6;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_3_7 = 5'd7;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_8_8 = 5'd8;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_8_10 = 5'd10;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_9_11 = 5'd11;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_15_12 = 5'd12;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_18_13 = 5'd13;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_18_14 = 5'd14;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_18_15 = 5'd15;
parameter [4:0] LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16 = 5'd16;
parameter [4:0] LEGUP_function_call_3 = 5'd3;
parameter [4:0] LEGUP_function_call_9 = 5'd9;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_state;
input [7:0] arg_sym;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bs;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [4:0] cur_state;
reg  nfa_get_sucessors_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_3_4;
reg [31:0] nfa_get_sucessors_3_5;
reg [31:0] nfa_get_sucessors_3_5_reg;
reg [7:0] nfa_get_sucessors_3_6;
reg  nfa_get_sucessors_3_7;
reg [31:0] nfa_get_sucessors_9_10;
reg [31:0] nfa_get_sucessors_9_11;
reg [31:0] nfa_get_sucessors_9_12;
reg [31:0] nfa_get_sucessors_9_13;
reg [31:0] nfa_get_sucessors_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_9_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_9_tmp1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_15_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_15_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_15_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_15_dt_i_0_reg;
reg [31:0] nfa_get_sucessors_15_16;
reg [31:0] nfa_get_sucessors_15_16_reg;
reg  nfa_get_sucessors_15_17;
reg [31:0] nfa_get_sucessors_18_19;
reg [31:0] nfa_get_sucessors_18_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_18_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_18_20_reg;
reg [31:0] nfa_get_sucessors_18_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_18_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_18_22_reg;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_15_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_15_dt_i_0_phi_temp;
reg [31:0] nfa_get_sucessors_15_16_phi_temp;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_sucessors_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_sucessors_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_3_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_3_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_3_7 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_3_7 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_9_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_15_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_15_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_15_17 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_15_17 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_18_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_18_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_18_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_18_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_18_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_18_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_18_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_18_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_15_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (^reset !== 1'bX && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %0*/
/*   %1 = icmp ult i8 %state, 63*/
begin
nfa_get_sucessors_0_1 = (arg_state < 8'd63);
end
end
always @(*) begin
/* nfa_get_sucessors: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_get_sucessors_3_4 = (arg_nfa + 385584);
end
end
always @(*) begin
/* nfa_get_sucessors: %3*/
/*   %5 = load i32* %4, align 4*/
begin
nfa_get_sucessors_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_7))
begin
nfa_get_sucessors_3_5_reg <= nfa_get_sucessors_3_5;
if (^reset !== 1'bX && ^(nfa_get_sucessors_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_3_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %3*/
/*   %6 = trunc i32 %5 to i8*/
begin
nfa_get_sucessors_3_6 = nfa_get_sucessors_3_5[7:0];
end
end
always @(*) begin
/* nfa_get_sucessors: %3*/
/*   %7 = icmp ugt i8 %6, %sym*/
begin
nfa_get_sucessors_3_7 = (nfa_get_sucessors_3_6 > arg_sym);
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %10 = zext i8 %state to i32*/
begin
nfa_get_sucessors_9_10 = {arg_state};
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %11 = and i32 %5, 255*/
begin
nfa_get_sucessors_9_11 = (nfa_get_sucessors_3_5_reg & 32'd255);
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %12 = mul nsw i32 %10, %11*/
begin
nfa_get_sucessors_9_12 = (nfa_get_sucessors_9_10 * nfa_get_sucessors_9_11);
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %13 = zext i8 %sym to i32*/
begin
nfa_get_sucessors_9_13 = {arg_sym};
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %14 = add nsw i32 %12, %13*/
begin
nfa_get_sucessors_9_14 = (nfa_get_sucessors_9_12 + nfa_get_sucessors_9_13);
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %tmp = getelementptr inbounds %struct._bitset_t* %bs, i32 0, i32 0, i32 0*/
begin
nfa_get_sucessors_9_tmp = arg_bs;
end
end
always @(*) begin
/* nfa_get_sucessors: %9*/
/*   %tmp1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 2, i32 %14, i32 0, i32 0*/
begin
nfa_get_sucessors_9_tmp1 = (arg_nfa + (24 + (12 * nfa_get_sucessors_9_14)));
end
end
always @(*) begin
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_st_i_0 = nfa_get_sucessors_15_st_i_0_phi_temp;
end
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
else if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_st_i_0 = nfa_get_sucessors_15_st_i_0_phi_temp;
end
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12)) */
begin
nfa_get_sucessors_15_st_i_0 = nfa_get_sucessors_15_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_st_i_0_reg <= nfa_get_sucessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_st_i_0_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_st_i_0_reg <= nfa_get_sucessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_st_i_0_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_st_i_0_reg <= nfa_get_sucessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_st_i_0_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_st_i_0_reg <= nfa_get_sucessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_dt_i_0 = nfa_get_sucessors_15_dt_i_0_phi_temp;
end
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
else if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_dt_i_0 = nfa_get_sucessors_15_dt_i_0_phi_temp;
end
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12)) */
begin
nfa_get_sucessors_15_dt_i_0 = nfa_get_sucessors_15_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_dt_i_0_reg <= nfa_get_sucessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_dt_i_0_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_dt_i_0_reg <= nfa_get_sucessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_dt_i_0_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_dt_i_0_reg <= nfa_get_sucessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_dt_i_0_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_dt_i_0_reg <= nfa_get_sucessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_16 = nfa_get_sucessors_15_16_phi_temp;
end
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12)) */
begin
nfa_get_sucessors_15_16 = nfa_get_sucessors_15_16_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_16_reg <= nfa_get_sucessors_15_16;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_16_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_16_reg <= nfa_get_sucessors_15_16;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_16_reg"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_15_12))
begin
nfa_get_sucessors_15_16_reg <= nfa_get_sucessors_15_16;
if (^reset !== 1'bX && ^(nfa_get_sucessors_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_16_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %15*/
/*   %17 = icmp eq i32 %16, 0*/
begin
nfa_get_sucessors_15_17 = (nfa_get_sucessors_15_16 == 32'd0);
end
end
always @(*) begin
/* nfa_get_sucessors: %18*/
/*   %19 = add i32 %16, -1*/
begin
nfa_get_sucessors_18_19 = (nfa_get_sucessors_15_16_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %18*/
/*   %19 = add i32 %16, -1*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
nfa_get_sucessors_18_19_reg <= nfa_get_sucessors_18_19;
if (^reset !== 1'bX && ^(nfa_get_sucessors_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_18_19_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %18*/
/*   %20 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
nfa_get_sucessors_18_20 = (nfa_get_sucessors_15_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %18*/
/*   %20 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
nfa_get_sucessors_18_20_reg <= nfa_get_sucessors_18_20;
if (^reset !== 1'bX && ^(nfa_get_sucessors_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_18_20_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_sucessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
begin
nfa_get_sucessors_18_21 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_get_sucessors: %18*/
/*   %22 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
nfa_get_sucessors_18_22 = (nfa_get_sucessors_15_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %18*/
/*   %22 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
nfa_get_sucessors_18_22_reg <= nfa_get_sucessors_18_22;
if (^reset !== 1'bX && ^(nfa_get_sucessors_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_18_22_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str2_a;
if (^reset !== 1'bX && ^(`TAG_g__str2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8))
begin
__assert_fail_arg_0 <= `TAG_g__str3_a;
if (^reset !== 1'bX && ^(`TAG_g__str3_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd95;
if (^reset !== 1'bX && ^(32'd95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8))
begin
__assert_fail_arg_2 <= 32'd96;
if (^reset !== 1'bX && ^(32'd96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_get_sucessors_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_get_sucessors_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_8_8))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_get_sucessors_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_get_sucessors_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_sucessors_15_st_i_0_phi_temp <= nfa_get_sucessors_9_tmp1;
if (^reset !== 1'bX && ^(nfa_get_sucessors_9_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_st_i_0_phi_temp"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_sucessors_15_st_i_0_phi_temp <= nfa_get_sucessors_18_20_reg;
if (^reset !== 1'bX && ^(nfa_get_sucessors_18_20_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_sucessors_15_dt_i_0_phi_temp <= nfa_get_sucessors_9_tmp;
if (^reset !== 1'bX && ^(nfa_get_sucessors_9_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_dt_i_0_phi_temp"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_sucessors_15_dt_i_0_phi_temp <= nfa_get_sucessors_18_22_reg;
if (^reset !== 1'bX && ^(nfa_get_sucessors_18_22_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_sucessors_15_16_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_16_phi_temp"); $finish; end
end
/* nfa_get_sucessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_sucessors_15_16_phi_temp <= nfa_get_sucessors_18_19_reg;
if (^reset !== 1'bX && ^(nfa_get_sucessors_18_19_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_15_16_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_get_sucessors: %legup_memcpy_4.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_legup_memcpy_4_exit_16))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_get_sucessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_5))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_get_sucessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_get_sucessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_get_sucessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_5))
begin
memory_controller_address_a = nfa_get_sucessors_3_4;
end
/* nfa_get_sucessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
memory_controller_address_a = nfa_get_sucessors_15_st_i_0_reg;
end
/* nfa_get_sucessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15))
begin
memory_controller_address_a = nfa_get_sucessors_15_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_get_sucessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_sucessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_sucessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_get_sucessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15))
begin
memory_controller_in_a = {nfa_get_sucessors_18_21};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_get_sucessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_3_5))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_get_sucessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_13))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_get_sucessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_sucessors_BB_18_15))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_get_sucessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 95, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_get_sucessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 96, i8* getelementptr inbounds ([69 x i8]* @__PRETTY_FUNCTION__.nfa_get_sucessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_get_predecessors
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_state,
	arg_sym,
	arg_bs,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_2_2 = 5'd2;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_2_4 = 5'd4;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_3_5 = 5'd5;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_3_6 = 5'd6;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_3_7 = 5'd7;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_8_8 = 5'd8;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_8_10 = 5'd10;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_9_11 = 5'd11;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_15_12 = 5'd12;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_18_13 = 5'd13;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_18_14 = 5'd14;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_18_15 = 5'd15;
parameter [4:0] LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16 = 5'd16;
parameter [4:0] LEGUP_function_call_3 = 5'd3;
parameter [4:0] LEGUP_function_call_9 = 5'd9;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_state;
input [7:0] arg_sym;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bs;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [4:0] cur_state;
reg  nfa_get_predecessors_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_3_4;
reg [31:0] nfa_get_predecessors_3_5;
reg [31:0] nfa_get_predecessors_3_5_reg;
reg [7:0] nfa_get_predecessors_3_6;
reg  nfa_get_predecessors_3_7;
reg [31:0] nfa_get_predecessors_9_10;
reg [31:0] nfa_get_predecessors_9_11;
reg [31:0] nfa_get_predecessors_9_12;
reg [31:0] nfa_get_predecessors_9_13;
reg [31:0] nfa_get_predecessors_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_9_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_9_tmp1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_15_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_15_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_15_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_15_dt_i_0_reg;
reg [31:0] nfa_get_predecessors_15_16;
reg [31:0] nfa_get_predecessors_15_16_reg;
reg  nfa_get_predecessors_15_17;
reg [31:0] nfa_get_predecessors_18_19;
reg [31:0] nfa_get_predecessors_18_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_18_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_18_20_reg;
reg [31:0] nfa_get_predecessors_18_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_18_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_18_22_reg;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_15_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_15_dt_i_0_phi_temp;
reg [31:0] nfa_get_predecessors_15_16_phi_temp;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_predecessors_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_predecessors_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_2_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_3_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_3_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_3_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_3_7 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_3_7 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_9_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_15_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_15_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_15_17 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_15_17 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_18_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_18_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_18_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_18_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_18_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_18_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_18_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_18_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_15_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (^reset !== 1'bX && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %0*/
/*   %1 = icmp ult i8 %state, 63*/
begin
nfa_get_predecessors_0_1 = (arg_state < 8'd63);
end
end
always @(*) begin
/* nfa_get_predecessors: %3*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_get_predecessors_3_4 = (arg_nfa + 385584);
end
end
always @(*) begin
/* nfa_get_predecessors: %3*/
/*   %5 = load i32* %4, align 4*/
begin
nfa_get_predecessors_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_7))
begin
nfa_get_predecessors_3_5_reg <= nfa_get_predecessors_3_5;
if (^reset !== 1'bX && ^(nfa_get_predecessors_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_3_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %3*/
/*   %6 = trunc i32 %5 to i8*/
begin
nfa_get_predecessors_3_6 = nfa_get_predecessors_3_5[7:0];
end
end
always @(*) begin
/* nfa_get_predecessors: %3*/
/*   %7 = icmp ugt i8 %6, %sym*/
begin
nfa_get_predecessors_3_7 = (nfa_get_predecessors_3_6 > arg_sym);
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %10 = zext i8 %state to i32*/
begin
nfa_get_predecessors_9_10 = {arg_state};
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %11 = and i32 %5, 255*/
begin
nfa_get_predecessors_9_11 = (nfa_get_predecessors_3_5_reg & 32'd255);
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %12 = mul nsw i32 %10, %11*/
begin
nfa_get_predecessors_9_12 = (nfa_get_predecessors_9_10 * nfa_get_predecessors_9_11);
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %13 = zext i8 %sym to i32*/
begin
nfa_get_predecessors_9_13 = {arg_sym};
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %14 = add nsw i32 %12, %13*/
begin
nfa_get_predecessors_9_14 = (nfa_get_predecessors_9_12 + nfa_get_predecessors_9_13);
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %tmp = getelementptr inbounds %struct._bitset_t* %bs, i32 0, i32 0, i32 0*/
begin
nfa_get_predecessors_9_tmp = arg_bs;
end
end
always @(*) begin
/* nfa_get_predecessors: %9*/
/*   %tmp1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 3, i32 %14, i32 0, i32 0*/
begin
nfa_get_predecessors_9_tmp1 = (arg_nfa + (192804 + (12 * nfa_get_predecessors_9_14)));
end
end
always @(*) begin
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_st_i_0 = nfa_get_predecessors_15_st_i_0_phi_temp;
end
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
else if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_st_i_0 = nfa_get_predecessors_15_st_i_0_phi_temp;
end
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12)) */
begin
nfa_get_predecessors_15_st_i_0 = nfa_get_predecessors_15_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_st_i_0_reg <= nfa_get_predecessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_st_i_0_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_st_i_0_reg <= nfa_get_predecessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_st_i_0_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_st_i_0_reg <= nfa_get_predecessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_st_i_0_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_st_i_0_reg <= nfa_get_predecessors_15_st_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_dt_i_0 = nfa_get_predecessors_15_dt_i_0_phi_temp;
end
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
else if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_dt_i_0 = nfa_get_predecessors_15_dt_i_0_phi_temp;
end
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12)) */
begin
nfa_get_predecessors_15_dt_i_0 = nfa_get_predecessors_15_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_dt_i_0_reg <= nfa_get_predecessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_dt_i_0_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_dt_i_0_reg <= nfa_get_predecessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_dt_i_0_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_dt_i_0_reg <= nfa_get_predecessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_dt_i_0_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_dt_i_0_reg <= nfa_get_predecessors_15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_16 = nfa_get_predecessors_15_16_phi_temp;
end
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
else /* if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12)) */
begin
nfa_get_predecessors_15_16 = nfa_get_predecessors_15_16_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_16_reg <= nfa_get_predecessors_15_16;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_16_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_16_reg <= nfa_get_predecessors_15_16;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_16_reg"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_15_12))
begin
nfa_get_predecessors_15_16_reg <= nfa_get_predecessors_15_16;
if (^reset !== 1'bX && ^(nfa_get_predecessors_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_16_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %15*/
/*   %17 = icmp eq i32 %16, 0*/
begin
nfa_get_predecessors_15_17 = (nfa_get_predecessors_15_16 == 32'd0);
end
end
always @(*) begin
/* nfa_get_predecessors: %18*/
/*   %19 = add i32 %16, -1*/
begin
nfa_get_predecessors_18_19 = (nfa_get_predecessors_15_16_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %18*/
/*   %19 = add i32 %16, -1*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
nfa_get_predecessors_18_19_reg <= nfa_get_predecessors_18_19;
if (^reset !== 1'bX && ^(nfa_get_predecessors_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_18_19_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %18*/
/*   %20 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
nfa_get_predecessors_18_20 = (nfa_get_predecessors_15_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %18*/
/*   %20 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
nfa_get_predecessors_18_20_reg <= nfa_get_predecessors_18_20;
if (^reset !== 1'bX && ^(nfa_get_predecessors_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_18_20_reg"); $finish; end
end
end
always @(*) begin
/* nfa_get_predecessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
begin
nfa_get_predecessors_18_21 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_get_predecessors: %18*/
/*   %22 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
nfa_get_predecessors_18_22 = (nfa_get_predecessors_15_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %18*/
/*   %22 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
nfa_get_predecessors_18_22_reg <= nfa_get_predecessors_18_22;
if (^reset !== 1'bX && ^(nfa_get_predecessors_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_18_22_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2))
begin
__assert_fail_arg_0 <= `TAG_g__str2_a;
if (^reset !== 1'bX && ^(`TAG_g__str2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8))
begin
__assert_fail_arg_0 <= `TAG_g__str3_a;
if (^reset !== 1'bX && ^(`TAG_g__str3_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2))
begin
__assert_fail_arg_2 <= 32'd105;
if (^reset !== 1'bX && ^(32'd105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8))
begin
__assert_fail_arg_2 <= 32'd106;
if (^reset !== 1'bX && ^(32'd106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_2_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_get_predecessors_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_get_predecessors_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_8_8))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_get_predecessors_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_get_predecessors_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_predecessors_15_st_i_0_phi_temp <= nfa_get_predecessors_9_tmp1;
if (^reset !== 1'bX && ^(nfa_get_predecessors_9_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_st_i_0_phi_temp"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %st.i.0 = phi i32* [ %tmp1, %9 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_predecessors_15_st_i_0_phi_temp <= nfa_get_predecessors_18_20_reg;
if (^reset !== 1'bX && ^(nfa_get_predecessors_18_20_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_predecessors_15_dt_i_0_phi_temp <= nfa_get_predecessors_9_tmp;
if (^reset !== 1'bX && ^(nfa_get_predecessors_9_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_dt_i_0_phi_temp"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %dt.i.0 = phi i32* [ %tmp, %9 ], [ %22, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_predecessors_15_dt_i_0_phi_temp <= nfa_get_predecessors_18_22_reg;
if (^reset !== 1'bX && ^(nfa_get_predecessors_18_22_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_9_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_predecessors_15_16_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_16_phi_temp"); $finish; end
end
/* nfa_get_predecessors: %15*/
/*   %16 = phi i32 [ 3, %9 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_get_predecessors_15_16_phi_temp <= nfa_get_predecessors_18_19_reg;
if (^reset !== 1'bX && ^(nfa_get_predecessors_18_19_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_15_16_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_get_predecessors: %legup_memcpy_4.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_legup_memcpy_4_exit_16))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_get_predecessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_5))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_get_predecessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_get_predecessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_get_predecessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_5))
begin
memory_controller_address_a = nfa_get_predecessors_3_4;
end
/* nfa_get_predecessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
memory_controller_address_a = nfa_get_predecessors_15_st_i_0_reg;
end
/* nfa_get_predecessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15))
begin
memory_controller_address_a = nfa_get_predecessors_15_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_get_predecessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_predecessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_get_predecessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_get_predecessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15))
begin
memory_controller_in_a = {nfa_get_predecessors_18_21};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_get_predecessors: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_3_5))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_get_predecessors: %18*/
/*   %21 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_13))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_get_predecessors: %18*/
/*   store i32 %21, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_get_predecessors_BB_18_15))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_get_predecessors: %2*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_get_predecessors: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 106, i8* getelementptr inbounds ([72 x i8]* @__PRETTY_FUNCTION__.nfa_get_predecessors, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_init
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_symbols,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_nfa_init_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_nfa_init_BB_0_3 = 4'd3;
parameter [3:0] LEGUP_F_nfa_init_BB_0_5 = 4'd5;
parameter [3:0] LEGUP_F_nfa_init_BB_6_6 = 4'd6;
parameter [3:0] LEGUP_F_nfa_init_BB_8_7 = 4'd7;
parameter [3:0] LEGUP_F_nfa_init_BB_8_9 = 4'd9;
parameter [3:0] LEGUP_F_nfa_init_BB_8_11 = 4'd11;
parameter [3:0] LEGUP_F_nfa_init_BB_12_12 = 4'd12;
parameter [3:0] LEGUP_function_call_2 = 4'd2;
parameter [3:0] LEGUP_function_call_4 = 4'd4;
parameter [3:0] LEGUP_function_call_8 = 4'd8;
parameter [3:0] LEGUP_function_call_10 = 4'd10;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_symbols;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [3:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_0_2_reg;
reg [31:0] nfa_init_0_3;
reg [31:0] nfa_init_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_0_4_reg;
reg [31:0] nfa_init_0_5;
reg [31:0] nfa_init_0_5_reg;
reg [31:0] nfa_init_6_storemerge;
reg [31:0] nfa_init_6_storemerge_reg;
reg  nfa_init_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_8_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_8_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_init_8_10_reg;
reg [31:0] nfa_init_8_11;
reg [31:0] nfa_init_8_11_reg;
reg  bitset_init_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_init_arg_0;
reg  bitset_init_memory_controller_waitrequest;
wire  bitset_init_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_init_memory_controller_address_a;
wire  bitset_init_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_out_a;
wire [1:0] bitset_init_memory_controller_size_a;
wire  bitset_init_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_init_memory_controller_address_b;
wire  bitset_init_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_out_b;
wire [1:0] bitset_init_memory_controller_size_b;
wire  bitset_init_finish;
reg [31:0] nfa_init_6_storemerge_phi_temp;


bitset_init bitset_init_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_init_start),
	.finish (bitset_init_finish),
	.memory_controller_enable_a (bitset_init_memory_controller_enable_a),
	.memory_controller_address_a (bitset_init_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_init_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_init_memory_controller_in_a),
	.memory_controller_size_a (bitset_init_memory_controller_size_a),
	.memory_controller_out_a (bitset_init_memory_controller_out_a),
	.memory_controller_enable_b (bitset_init_memory_controller_enable_b),
	.memory_controller_address_b (bitset_init_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_init_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_init_memory_controller_in_b),
	.memory_controller_size_b (bitset_init_memory_controller_size_b),
	.memory_controller_out_b (bitset_init_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_init_memory_controller_waitrequest),
	.arg_0 (bitset_init_arg_0)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (^reset !== 1'bX && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (^reset !== 1'bX && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (^reset !== 1'bX && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_4;
if (^reset !== 1'bX && ^(LEGUP_function_call_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_4;
if (^reset !== 1'bX && ^(LEGUP_function_call_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_4) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_0_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_4) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_4;
if (^reset !== 1'bX && ^(LEGUP_function_call_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_0_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_init_BB_6_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_6_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_6_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_init_BB_6_6) & (memory_controller_waitrequest == 1'd0)) & (nfa_init_6_7 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_8_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_init_BB_6_6) & (memory_controller_waitrequest == 1'd0)) & (nfa_init_6_7 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_init_BB_12_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_8_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_8_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_8_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_8_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_8;
if (^reset !== 1'bX && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_8;
if (^reset !== 1'bX && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_8;
if (^reset !== 1'bX && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_init_BB_6_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_12_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_init_BB_12_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_init_BB_12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_init_BB_12_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (^reset !== 1'bX && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_init: %0*/
/*   %1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
begin
nfa_init_0_1 = arg_nfa;
end
end
always @(*) begin
/* nfa_init: %0*/
/*   %2 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
begin
nfa_init_0_2 = (arg_nfa + 12);
end
end
always @(posedge clk) begin
/* nfa_init: %0*/
/*   %2 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_1))
begin
nfa_init_0_2_reg <= nfa_init_0_2;
if (^reset !== 1'bX && ^(nfa_init_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_0_2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_init: %0*/
/*   %3 = zext i8 %symbols to i32*/
begin
nfa_init_0_3 = {arg_symbols};
end
end
always @(posedge clk) begin
/* nfa_init: %0*/
/*   %3 = zext i8 %symbols to i32*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_1))
begin
nfa_init_0_3_reg <= nfa_init_0_3;
if (^reset !== 1'bX && ^(nfa_init_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_0_3_reg"); $finish; end
end
end
always @(*) begin
/* nfa_init: %0*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_init_0_4 = (arg_nfa + 385584);
end
end
always @(posedge clk) begin
/* nfa_init: %0*/
/*   %4 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_1))
begin
nfa_init_0_4_reg <= nfa_init_0_4;
if (^reset !== 1'bX && ^(nfa_init_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_0_4_reg"); $finish; end
end
end
always @(*) begin
/* nfa_init: %0*/
/*   %5 = mul i32 %3, 63*/
begin
nfa_init_0_5 = (nfa_init_0_3 * 32'd63);
end
end
always @(posedge clk) begin
/* nfa_init: %0*/
/*   %5 = mul i32 %3, 63*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_1))
begin
nfa_init_0_5_reg <= nfa_init_0_5;
if (^reset !== 1'bX && ^(nfa_init_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_0_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge = nfa_init_6_storemerge_phi_temp;
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
else if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge = nfa_init_6_storemerge_phi_temp;
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
else if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge = nfa_init_6_storemerge_phi_temp;
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
else /* if ((cur_state == LEGUP_F_nfa_init_BB_6_6)) */
begin
nfa_init_6_storemerge = nfa_init_6_storemerge_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge_reg <= nfa_init_6_storemerge;
if (^reset !== 1'bX && ^(nfa_init_6_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_reg"); $finish; end
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge_reg <= nfa_init_6_storemerge;
if (^reset !== 1'bX && ^(nfa_init_6_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_reg"); $finish; end
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge_reg <= nfa_init_6_storemerge;
if (^reset !== 1'bX && ^(nfa_init_6_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_reg"); $finish; end
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge_reg <= nfa_init_6_storemerge;
if (^reset !== 1'bX && ^(nfa_init_6_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_reg"); $finish; end
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if ((cur_state == LEGUP_F_nfa_init_BB_6_6))
begin
nfa_init_6_storemerge_reg <= nfa_init_6_storemerge;
if (^reset !== 1'bX && ^(nfa_init_6_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* nfa_init: %6*/
/*   %7 = icmp ult i32 %storemerge, %5*/
begin
nfa_init_6_7 = (nfa_init_6_storemerge < nfa_init_0_5_reg);
end
end
always @(*) begin
/* nfa_init: %8*/
/*   %9 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 2, i32 %storemerge*/
begin
nfa_init_8_9 = (arg_nfa + (24 + (12 * nfa_init_6_storemerge_reg)));
end
end
always @(*) begin
/* nfa_init: %8*/
/*   %10 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 3, i32 %storemerge*/
begin
nfa_init_8_10 = (arg_nfa + (192804 + (12 * nfa_init_6_storemerge_reg)));
end
end
always @(posedge clk) begin
/* nfa_init: %8*/
/*   %10 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 3, i32 %storemerge*/
if ((cur_state == LEGUP_F_nfa_init_BB_8_7))
begin
nfa_init_8_10_reg <= nfa_init_8_10;
if (^reset !== 1'bX && ^(nfa_init_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_8_10_reg"); $finish; end
end
end
always @(*) begin
/* nfa_init: %8*/
/*   %11 = add i32 %storemerge, 1*/
begin
nfa_init_8_11 = (nfa_init_6_storemerge_reg + 32'd1);
end
end
always @(posedge clk) begin
/* nfa_init: %8*/
/*   %11 = add i32 %storemerge, 1*/
if ((cur_state == LEGUP_F_nfa_init_BB_8_7))
begin
nfa_init_8_11_reg <= nfa_init_8_11;
if (^reset !== 1'bX && ^(nfa_init_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_8_11_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_1))
begin
bitset_init_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_3))
begin
bitset_init_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
bitset_init_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_8_7))
begin
bitset_init_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
bitset_init_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_8_9))
begin
bitset_init_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_init_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_1))
begin
bitset_init_arg_0 <= nfa_init_0_1;
if (^reset !== 1'bX && ^(nfa_init_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_arg_0"); $finish; end
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_3))
begin
bitset_init_arg_0 <= nfa_init_0_2_reg;
if (^reset !== 1'bX && ^(nfa_init_0_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_arg_0"); $finish; end
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_8_7))
begin
bitset_init_arg_0 <= nfa_init_8_9;
if (^reset !== 1'bX && ^(nfa_init_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_arg_0"); $finish; end
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_F_nfa_init_BB_8_9))
begin
bitset_init_arg_0 <= nfa_init_8_10_reg;
if (^reset !== 1'bX && ^(nfa_init_8_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_arg_0"); $finish; end
end
end
always @(*) begin
bitset_init_memory_controller_waitrequest = 1'd0;
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
bitset_init_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
bitset_init_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_init_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_init_memory_controller_out_a = 1'd0;
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
bitset_init_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
bitset_init_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_init_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_init_memory_controller_out_b = 1'd0;
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
bitset_init_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
bitset_init_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_init_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if (((cur_state == LEGUP_F_nfa_init_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_init_6_storemerge_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_phi_temp"); $finish; end
end
/* nfa_init: %6*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %11, %8 ]*/
if (((cur_state == LEGUP_F_nfa_init_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_init_6_storemerge_phi_temp <= nfa_init_8_11_reg;
if (^reset !== 1'bX && ^(nfa_init_8_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_init_6_storemerge_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_init: %12*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_init_BB_12_12))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = bitset_init_memory_controller_enable_a;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_enable_a = bitset_init_memory_controller_enable_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_enable_a = bitset_init_memory_controller_enable_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_a = bitset_init_memory_controller_enable_a;
end
/* nfa_init: %0*/
/*   store i32 %3, i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a = bitset_init_memory_controller_address_a;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_address_a = bitset_init_memory_controller_address_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_address_a = bitset_init_memory_controller_address_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_a = bitset_init_memory_controller_address_a;
end
/* nfa_init: %0*/
/*   store i32 %3, i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_5))
begin
memory_controller_address_a = nfa_init_0_4_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = bitset_init_memory_controller_write_enable_a;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_write_enable_a = bitset_init_memory_controller_write_enable_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_write_enable_a = bitset_init_memory_controller_write_enable_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_a = bitset_init_memory_controller_write_enable_a;
end
/* nfa_init: %0*/
/*   store i32 %3, i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_5))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a = bitset_init_memory_controller_in_a;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_in_a = bitset_init_memory_controller_in_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_in_a = bitset_init_memory_controller_in_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_a = bitset_init_memory_controller_in_a;
end
/* nfa_init: %0*/
/*   store i32 %3, i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_5))
begin
memory_controller_in_a = {nfa_init_0_3_reg};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a = bitset_init_memory_controller_size_a;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_size_a = bitset_init_memory_controller_size_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_size_a = bitset_init_memory_controller_size_a;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_a = bitset_init_memory_controller_size_a;
end
/* nfa_init: %0*/
/*   store i32 %3, i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_init_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = bitset_init_memory_controller_enable_b;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_enable_b = bitset_init_memory_controller_enable_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_enable_b = bitset_init_memory_controller_enable_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_b = bitset_init_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b = bitset_init_memory_controller_address_b;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_address_b = bitset_init_memory_controller_address_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_address_b = bitset_init_memory_controller_address_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_b = bitset_init_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = bitset_init_memory_controller_write_enable_b;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_write_enable_b = bitset_init_memory_controller_write_enable_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_write_enable_b = bitset_init_memory_controller_write_enable_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_b = bitset_init_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b = bitset_init_memory_controller_in_b;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_in_b = bitset_init_memory_controller_in_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_in_b = bitset_init_memory_controller_in_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_b = bitset_init_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %1) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b = bitset_init_memory_controller_size_b;
end
/* nfa_init: %0*/
/*   call void @bitset_init(%struct._bitset_t* %2) nounwind*/
if ((cur_state == LEGUP_function_call_4))
begin
memory_controller_size_b = bitset_init_memory_controller_size_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %9) nounwind*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_size_b = bitset_init_memory_controller_size_b;
end
/* nfa_init: %8*/
/*   call void @bitset_init(%struct._bitset_t* %10) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_b = bitset_init_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_add_transition
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q0,
	arg_q1,
	arg_a,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_0_2 = 5'd2;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_0_3 = 5'd3;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_5_4 = 5'd4;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_5_6 = 5'd6;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_6_7 = 5'd7;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_8_8 = 5'd8;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_8_10 = 5'd10;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_9_11 = 5'd11;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_11_12 = 5'd12;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_11_14 = 5'd14;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_12_15 = 5'd15;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_12_17 = 5'd17;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_12_18 = 5'd18;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_12_19 = 5'd19;
parameter [4:0] LEGUP_F_nfa_add_transition_BB_12_21 = 5'd21;
parameter [4:0] LEGUP_function_call_5 = 5'd5;
parameter [4:0] LEGUP_function_call_9 = 5'd9;
parameter [4:0] LEGUP_function_call_13 = 5'd13;
parameter [4:0] LEGUP_function_call_16 = 5'd16;
parameter [4:0] LEGUP_function_call_20 = 5'd20;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q0;
input [7:0] arg_q1;
input [7:0] arg_a;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [4:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_0_1_reg;
reg [31:0] nfa_add_transition_0_2;
reg [31:0] nfa_add_transition_0_2_reg;
reg [7:0] nfa_add_transition_0_3;
reg  nfa_add_transition_0_4;
reg  nfa_add_transition_6_7;
reg  nfa_add_transition_9_10;
reg [31:0] nfa_add_transition_12_13;
reg [31:0] nfa_add_transition_12_14;
reg [31:0] nfa_add_transition_12_15;
reg [31:0] nfa_add_transition_12_16;
reg [31:0] nfa_add_transition_12_16_reg;
reg [31:0] nfa_add_transition_12_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_12_18;
reg [31:0] nfa_add_transition_12_19;
reg [31:0] nfa_add_transition_12_19_reg;
reg [31:0] nfa_add_transition_12_20;
reg [31:0] nfa_add_transition_12_21;
reg [31:0] nfa_add_transition_12_22;
reg [31:0] nfa_add_transition_12_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_12_24;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_add_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_arg_0;
reg [7:0] bitset_add_arg_1;
reg  bitset_add_memory_controller_waitrequest;
wire  bitset_add_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_a;
wire  bitset_add_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_a;
wire [1:0] bitset_add_memory_controller_size_a;
wire  bitset_add_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_b;
wire  bitset_add_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_b;
wire [1:0] bitset_add_memory_controller_size_b;
wire  bitset_add_finish;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_add bitset_add_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_add_start),
	.finish (bitset_add_finish),
	.memory_controller_enable_a (bitset_add_memory_controller_enable_a),
	.memory_controller_address_a (bitset_add_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_add_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_add_memory_controller_in_a),
	.memory_controller_size_a (bitset_add_memory_controller_size_a),
	.memory_controller_out_a (bitset_add_memory_controller_out_a),
	.memory_controller_enable_b (bitset_add_memory_controller_enable_b),
	.memory_controller_address_b (bitset_add_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_add_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_add_memory_controller_in_b),
	.memory_controller_size_b (bitset_add_memory_controller_size_b),
	.memory_controller_out_b (bitset_add_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_add_memory_controller_waitrequest),
	.arg_0 (bitset_add_arg_0),
	.arg_1 (bitset_add_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_0_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_0_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_transition_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_0_4 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_6_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_transition_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_0_4 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_5_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_5_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_5_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_5_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_5;
if (^reset !== 1'bX && ^(LEGUP_function_call_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_5;
if (^reset !== 1'bX && ^(LEGUP_function_call_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_5) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_5_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_5) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_5;
if (^reset !== 1'bX && ^(LEGUP_function_call_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_5_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_5_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_5_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_6_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_6_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_transition_BB_6_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_6_7 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_transition_BB_6_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_6_7 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_9_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_transition_BB_9_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_9_10 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_add_transition_BB_9_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_9_10 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_11_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_11_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_11_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_11_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_11_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_16;
if (^reset !== 1'bX && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_16;
if (^reset !== 1'bX && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_16;
if (^reset !== 1'bX && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_add_transition_BB_12_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_add_transition_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_add_transition_BB_12_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (^reset !== 1'bX && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_add_transition: %0*/
/*   %1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_add_transition_0_1 = (arg_nfa + 385584);
end
end
always @(posedge clk) begin
/* nfa_add_transition: %0*/
/*   %1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_0_1))
begin
nfa_add_transition_0_1_reg <= nfa_add_transition_0_1;
if (^reset !== 1'bX && ^(nfa_add_transition_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_0_1_reg"); $finish; end
end
end
always @(*) begin
/* nfa_add_transition: %0*/
/*   %2 = load i32* %1, align 4*/
begin
nfa_add_transition_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_add_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_0_3))
begin
nfa_add_transition_0_2_reg <= nfa_add_transition_0_2;
if (^reset !== 1'bX && ^(nfa_add_transition_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_0_2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_add_transition: %0*/
/*   %3 = trunc i32 %2 to i8*/
begin
nfa_add_transition_0_3 = nfa_add_transition_0_2[7:0];
end
end
always @(*) begin
/* nfa_add_transition: %0*/
/*   %4 = icmp ugt i8 %3, %a*/
begin
nfa_add_transition_0_4 = (nfa_add_transition_0_3 > arg_a);
end
end
always @(*) begin
/* nfa_add_transition: %6*/
/*   %7 = icmp ult i8 %q0, 63*/
begin
nfa_add_transition_6_7 = (arg_q0 < 8'd63);
end
end
always @(*) begin
/* nfa_add_transition: %9*/
/*   %10 = icmp ult i8 %q1, 63*/
begin
nfa_add_transition_9_10 = (arg_q1 < 8'd63);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %13 = zext i8 %q0 to i32*/
begin
nfa_add_transition_12_13 = {arg_q0};
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %14 = and i32 %2, 255*/
begin
nfa_add_transition_12_14 = (nfa_add_transition_0_2_reg & 32'd255);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %15 = mul nsw i32 %13, %14*/
begin
nfa_add_transition_12_15 = (nfa_add_transition_12_13 * nfa_add_transition_12_14);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %16 = zext i8 %a to i32*/
begin
nfa_add_transition_12_16 = {arg_a};
end
end
always @(posedge clk) begin
/* nfa_add_transition: %12*/
/*   %16 = zext i8 %a to i32*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_15))
begin
nfa_add_transition_12_16_reg <= nfa_add_transition_12_16;
if (^reset !== 1'bX && ^(nfa_add_transition_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_12_16_reg"); $finish; end
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %17 = add nsw i32 %15, %16*/
begin
nfa_add_transition_12_17 = (nfa_add_transition_12_15 + nfa_add_transition_12_16);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %18 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 2, i32 %17*/
begin
nfa_add_transition_12_18 = (arg_nfa + (24 + (12 * nfa_add_transition_12_17)));
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %19 = zext i8 %q1 to i32*/
begin
nfa_add_transition_12_19 = {arg_q1};
end
end
always @(posedge clk) begin
/* nfa_add_transition: %12*/
/*   %19 = zext i8 %q1 to i32*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_15))
begin
nfa_add_transition_12_19_reg <= nfa_add_transition_12_19;
if (^reset !== 1'bX && ^(nfa_add_transition_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_12_19_reg"); $finish; end
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %20 = load i32* %1, align 4*/
begin
nfa_add_transition_12_20 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %21 = and i32 %20, 255*/
begin
nfa_add_transition_12_21 = (nfa_add_transition_12_20 & 32'd255);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %22 = mul nsw i32 %19, %21*/
begin
nfa_add_transition_12_22 = (nfa_add_transition_12_19_reg * nfa_add_transition_12_21);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %23 = add nsw i32 %22, %16*/
begin
nfa_add_transition_12_23 = (nfa_add_transition_12_22 + nfa_add_transition_12_16_reg);
end
end
always @(*) begin
/* nfa_add_transition: %12*/
/*   %24 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 3, i32 %23*/
begin
nfa_add_transition_12_24 = (arg_nfa + (192804 + (12 * nfa_add_transition_12_23)));
end
end
always @(posedge clk) begin
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_5_4))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_8_8))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_11_12))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_5_4))
begin
__assert_fail_arg_0 <= `TAG_g__str5_a;
if (^reset !== 1'bX && ^(`TAG_g__str5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_8_8))
begin
__assert_fail_arg_0 <= `TAG_g__str6_a;
if (^reset !== 1'bX && ^(`TAG_g__str6_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_11_12))
begin
__assert_fail_arg_0 <= `TAG_g__str7_a;
if (^reset !== 1'bX && ^(`TAG_g__str7_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_5_4))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_8_8))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_11_12))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_5_4))
begin
__assert_fail_arg_2 <= 32'd135;
if (^reset !== 1'bX && ^(32'd135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_8_8))
begin
__assert_fail_arg_2 <= 32'd136;
if (^reset !== 1'bX && ^(32'd136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_11_12))
begin
__assert_fail_arg_2 <= 32'd137;
if (^reset !== 1'bX && ^(32'd137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_5_4))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_add_transition_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_add_transition_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_8_8))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_add_transition_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_add_transition_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_11_12))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_add_transition_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_add_transition_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_15))
begin
bitset_add_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_add_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_19))
begin
bitset_add_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_add_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_15))
begin
bitset_add_arg_0 <= nfa_add_transition_12_18;
if (^reset !== 1'bX && ^(nfa_add_transition_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_0"); $finish; end
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_19))
begin
bitset_add_arg_0 <= nfa_add_transition_12_24;
if (^reset !== 1'bX && ^(nfa_add_transition_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_15))
begin
bitset_add_arg_1 <= arg_q1;
if (^reset !== 1'bX && ^(arg_q1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_1"); $finish; end
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_19))
begin
bitset_add_arg_1 <= arg_q0;
if (^reset !== 1'bX && ^(arg_q0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_1"); $finish; end
end
end
always @(*) begin
bitset_add_memory_controller_waitrequest = 1'd0;
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_add_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_add_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_add_memory_controller_out_a = 1'd0;
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_add_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_add_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_add_memory_controller_out_b = 1'd0;
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_add_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_add_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_add_transition: %12*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_21))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_enable_a = bitset_add_memory_controller_enable_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_a = bitset_add_memory_controller_enable_a;
end
/* nfa_add_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_add_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_17))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_address_a = bitset_add_memory_controller_address_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_a = bitset_add_memory_controller_address_a;
end
/* nfa_add_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_0_1))
begin
memory_controller_address_a = nfa_add_transition_0_1;
end
/* nfa_add_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_17))
begin
memory_controller_address_a = nfa_add_transition_0_1_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_write_enable_a = bitset_add_memory_controller_write_enable_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_a = bitset_add_memory_controller_write_enable_a;
end
/* nfa_add_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_add_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_17))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_in_a = bitset_add_memory_controller_in_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_a = bitset_add_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_size_a = bitset_add_memory_controller_size_a;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_a = bitset_add_memory_controller_size_a;
end
/* nfa_add_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_add_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_add_transition_BB_12_17))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_enable_b = bitset_add_memory_controller_enable_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_b = bitset_add_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_address_b = bitset_add_memory_controller_address_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_b = bitset_add_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_write_enable_b = bitset_add_memory_controller_write_enable_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_b = bitset_add_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_in_b = bitset_add_memory_controller_in_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_b = bitset_add_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_add_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_add_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_add_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([61 x i8]* @__PRETTY_FUNCTION__.nfa_add_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_size_b = bitset_add_memory_controller_size_b;
end
/* nfa_add_transition: %12*/
/*   call void @bitset_add(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_b = bitset_add_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_remove_transition
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q0,
	arg_q1,
	arg_a,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_0_2 = 5'd2;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_0_3 = 5'd3;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_5_4 = 5'd4;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_5_6 = 5'd6;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_6_7 = 5'd7;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_8_8 = 5'd8;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_8_10 = 5'd10;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_9_11 = 5'd11;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_11_12 = 5'd12;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_11_14 = 5'd14;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_12_15 = 5'd15;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_12_17 = 5'd17;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_12_18 = 5'd18;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_12_19 = 5'd19;
parameter [4:0] LEGUP_F_nfa_remove_transition_BB_12_21 = 5'd21;
parameter [4:0] LEGUP_function_call_5 = 5'd5;
parameter [4:0] LEGUP_function_call_9 = 5'd9;
parameter [4:0] LEGUP_function_call_13 = 5'd13;
parameter [4:0] LEGUP_function_call_16 = 5'd16;
parameter [4:0] LEGUP_function_call_20 = 5'd20;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q0;
input [7:0] arg_q1;
input [7:0] arg_a;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [4:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_0_1_reg;
reg [31:0] nfa_remove_transition_0_2;
reg [31:0] nfa_remove_transition_0_2_reg;
reg [7:0] nfa_remove_transition_0_3;
reg  nfa_remove_transition_0_4;
reg  nfa_remove_transition_6_7;
reg  nfa_remove_transition_9_10;
reg [31:0] nfa_remove_transition_12_13;
reg [31:0] nfa_remove_transition_12_14;
reg [31:0] nfa_remove_transition_12_15;
reg [31:0] nfa_remove_transition_12_16;
reg [31:0] nfa_remove_transition_12_16_reg;
reg [31:0] nfa_remove_transition_12_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_12_18;
reg [31:0] nfa_remove_transition_12_19;
reg [31:0] nfa_remove_transition_12_19_reg;
reg [31:0] nfa_remove_transition_12_20;
reg [31:0] nfa_remove_transition_12_21;
reg [31:0] nfa_remove_transition_12_22;
reg [31:0] nfa_remove_transition_12_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_12_24;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_remove_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_arg_0;
reg [7:0] bitset_remove_arg_1;
reg  bitset_remove_memory_controller_waitrequest;
wire  bitset_remove_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_a;
wire  bitset_remove_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_a;
wire [1:0] bitset_remove_memory_controller_size_a;
wire  bitset_remove_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_b;
wire  bitset_remove_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_b;
wire [1:0] bitset_remove_memory_controller_size_b;
wire  bitset_remove_finish;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_remove bitset_remove_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_remove_start),
	.finish (bitset_remove_finish),
	.memory_controller_enable_a (bitset_remove_memory_controller_enable_a),
	.memory_controller_address_a (bitset_remove_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_remove_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_remove_memory_controller_in_a),
	.memory_controller_size_a (bitset_remove_memory_controller_size_a),
	.memory_controller_out_a (bitset_remove_memory_controller_out_a),
	.memory_controller_enable_b (bitset_remove_memory_controller_enable_b),
	.memory_controller_address_b (bitset_remove_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_remove_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_remove_memory_controller_in_b),
	.memory_controller_size_b (bitset_remove_memory_controller_size_b),
	.memory_controller_out_b (bitset_remove_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_remove_memory_controller_waitrequest),
	.arg_0 (bitset_remove_arg_0),
	.arg_1 (bitset_remove_arg_1)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_0_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_0_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_transition_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_0_4 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_6_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_transition_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_0_4 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_5_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_5_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_5;
if (^reset !== 1'bX && ^(LEGUP_function_call_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_5;
if (^reset !== 1'bX && ^(LEGUP_function_call_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_5) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_5_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_5) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_5;
if (^reset !== 1'bX && ^(LEGUP_function_call_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_5_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_5_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_5_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_6_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_6_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_transition_BB_6_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_6_7 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_transition_BB_6_7) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_6_7 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_8_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_8_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_9) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_8_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_9_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_9_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_transition_BB_9_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_9_10 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_remove_transition_BB_9_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_9_10 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_11_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_11_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_11_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_11_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_16;
if (^reset !== 1'bX && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_16;
if (^reset !== 1'bX && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_16;
if (^reset !== 1'bX && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_remove_transition_BB_12_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_remove_transition_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_remove_transition_BB_12_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (^reset !== 1'bX && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_remove_transition: %0*/
/*   %1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_remove_transition_0_1 = (arg_nfa + 385584);
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %0*/
/*   %1 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1))
begin
nfa_remove_transition_0_1_reg <= nfa_remove_transition_0_1;
if (^reset !== 1'bX && ^(nfa_remove_transition_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_0_1_reg"); $finish; end
end
end
always @(*) begin
/* nfa_remove_transition: %0*/
/*   %2 = load i32* %1, align 4*/
begin
nfa_remove_transition_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_0_3))
begin
nfa_remove_transition_0_2_reg <= nfa_remove_transition_0_2;
if (^reset !== 1'bX && ^(nfa_remove_transition_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_0_2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_remove_transition: %0*/
/*   %3 = trunc i32 %2 to i8*/
begin
nfa_remove_transition_0_3 = nfa_remove_transition_0_2[7:0];
end
end
always @(*) begin
/* nfa_remove_transition: %0*/
/*   %4 = icmp ugt i8 %3, %a*/
begin
nfa_remove_transition_0_4 = (nfa_remove_transition_0_3 > arg_a);
end
end
always @(*) begin
/* nfa_remove_transition: %6*/
/*   %7 = icmp ult i8 %q0, 63*/
begin
nfa_remove_transition_6_7 = (arg_q0 < 8'd63);
end
end
always @(*) begin
/* nfa_remove_transition: %9*/
/*   %10 = icmp ult i8 %q1, 63*/
begin
nfa_remove_transition_9_10 = (arg_q1 < 8'd63);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %13 = zext i8 %q0 to i32*/
begin
nfa_remove_transition_12_13 = {arg_q0};
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %14 = and i32 %2, 255*/
begin
nfa_remove_transition_12_14 = (nfa_remove_transition_0_2_reg & 32'd255);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %15 = mul nsw i32 %13, %14*/
begin
nfa_remove_transition_12_15 = (nfa_remove_transition_12_13 * nfa_remove_transition_12_14);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %16 = zext i8 %a to i32*/
begin
nfa_remove_transition_12_16 = {arg_a};
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %12*/
/*   %16 = zext i8 %a to i32*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15))
begin
nfa_remove_transition_12_16_reg <= nfa_remove_transition_12_16;
if (^reset !== 1'bX && ^(nfa_remove_transition_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_12_16_reg"); $finish; end
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %17 = add nsw i32 %15, %16*/
begin
nfa_remove_transition_12_17 = (nfa_remove_transition_12_15 + nfa_remove_transition_12_16);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %18 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 2, i32 %17*/
begin
nfa_remove_transition_12_18 = (arg_nfa + (24 + (12 * nfa_remove_transition_12_17)));
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %19 = zext i8 %q1 to i32*/
begin
nfa_remove_transition_12_19 = {arg_q1};
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %12*/
/*   %19 = zext i8 %q1 to i32*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15))
begin
nfa_remove_transition_12_19_reg <= nfa_remove_transition_12_19;
if (^reset !== 1'bX && ^(nfa_remove_transition_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_12_19_reg"); $finish; end
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %20 = load i32* %1, align 4*/
begin
nfa_remove_transition_12_20 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %21 = and i32 %20, 255*/
begin
nfa_remove_transition_12_21 = (nfa_remove_transition_12_20 & 32'd255);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %22 = mul nsw i32 %19, %21*/
begin
nfa_remove_transition_12_22 = (nfa_remove_transition_12_19_reg * nfa_remove_transition_12_21);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %23 = add nsw i32 %22, %16*/
begin
nfa_remove_transition_12_23 = (nfa_remove_transition_12_22 + nfa_remove_transition_12_16_reg);
end
end
always @(*) begin
/* nfa_remove_transition: %12*/
/*   %24 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 3, i32 %23*/
begin
nfa_remove_transition_12_24 = (arg_nfa + (192804 + (12 * nfa_remove_transition_12_23)));
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4))
begin
__assert_fail_arg_0 <= `TAG_g__str5_a;
if (^reset !== 1'bX && ^(`TAG_g__str5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8))
begin
__assert_fail_arg_0 <= `TAG_g__str6_a;
if (^reset !== 1'bX && ^(`TAG_g__str6_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12))
begin
__assert_fail_arg_0 <= `TAG_g__str7_a;
if (^reset !== 1'bX && ^(`TAG_g__str7_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4))
begin
__assert_fail_arg_2 <= 32'd156;
if (^reset !== 1'bX && ^(32'd156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8))
begin
__assert_fail_arg_2 <= 32'd157;
if (^reset !== 1'bX && ^(32'd157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12))
begin
__assert_fail_arg_2 <= 32'd158;
if (^reset !== 1'bX && ^(32'd158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_5_4))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_8_8))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_11_12))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_remove_transition_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15))
begin
bitset_remove_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_remove_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_19))
begin
bitset_remove_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15))
begin
bitset_remove_arg_0 <= nfa_remove_transition_12_18;
if (^reset !== 1'bX && ^(nfa_remove_transition_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_0"); $finish; end
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_19))
begin
bitset_remove_arg_0 <= nfa_remove_transition_12_24;
if (^reset !== 1'bX && ^(nfa_remove_transition_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_15))
begin
bitset_remove_arg_1 <= arg_q1;
if (^reset !== 1'bX && ^(arg_q1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_1"); $finish; end
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_19))
begin
bitset_remove_arg_1 <= arg_q0;
if (^reset !== 1'bX && ^(arg_q0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_1"); $finish; end
end
end
always @(*) begin
bitset_remove_memory_controller_waitrequest = 1'd0;
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_remove_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_remove_memory_controller_out_a = 1'd0;
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_remove_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_remove_memory_controller_out_b = 1'd0;
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
bitset_remove_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_remove_transition: %12*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_21))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_enable_a = bitset_remove_memory_controller_enable_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_a = bitset_remove_memory_controller_enable_a;
end
/* nfa_remove_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_remove_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_17))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_address_a = bitset_remove_memory_controller_address_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_a = bitset_remove_memory_controller_address_a;
end
/* nfa_remove_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1))
begin
memory_controller_address_a = nfa_remove_transition_0_1;
end
/* nfa_remove_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_17))
begin
memory_controller_address_a = nfa_remove_transition_0_1_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_write_enable_a = bitset_remove_memory_controller_write_enable_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_a = bitset_remove_memory_controller_write_enable_a;
end
/* nfa_remove_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_remove_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_17))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_in_a = bitset_remove_memory_controller_in_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_a = bitset_remove_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_size_a = bitset_remove_memory_controller_size_a;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_a = bitset_remove_memory_controller_size_a;
end
/* nfa_remove_transition: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_remove_transition: %12*/
/*   %20 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_nfa_remove_transition_BB_12_17))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_enable_b = bitset_remove_memory_controller_enable_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_b = bitset_remove_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_address_b = bitset_remove_memory_controller_address_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_b = bitset_remove_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_write_enable_b = bitset_remove_memory_controller_write_enable_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_b = bitset_remove_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_in_b = bitset_remove_memory_controller_in_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_b = bitset_remove_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_remove_transition: %5*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 156, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_5))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_remove_transition: %8*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_9))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_remove_transition: %11*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([64 x i8]* @__PRETTY_FUNCTION__.nfa_remove_transition, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %18, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_16))
begin
memory_controller_size_b = bitset_remove_memory_controller_size_b;
end
/* nfa_remove_transition: %12*/
/*   call void @bitset_remove(%struct._bitset_t* %24, i8 zeroext %q0) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_b = bitset_remove_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_clone
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_dest,
	arg_src,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_nfa_clone_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_nfa_clone_BB_1_2 = 3'd2;
parameter [2:0] LEGUP_F_nfa_clone_BB_4_3 = 3'd3;
parameter [2:0] LEGUP_F_nfa_clone_BB_4_4 = 3'd4;
parameter [2:0] LEGUP_F_nfa_clone_BB_4_5 = 3'd5;
parameter [2:0] LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_src;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_0_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_0_tmp1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_1_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_1_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_1_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_1_dt_i_0_reg;
reg [31:0] nfa_clone_1_2;
reg [31:0] nfa_clone_1_2_reg;
reg  nfa_clone_1_3;
reg [31:0] nfa_clone_4_5;
reg [31:0] nfa_clone_4_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_4_6_reg;
reg [31:0] nfa_clone_4_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_4_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_4_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_1_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_clone_1_dt_i_0_phi_temp;
reg [31:0] nfa_clone_1_2_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_clone_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_clone_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_clone_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_clone_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_clone: %0*/
/*   %tmp = getelementptr inbounds %struct._nfa_t* %dest, i32 0, i32 0, i32 0, i32 0*/
begin
nfa_clone_0_tmp = arg_dest;
end
end
always @(*) begin
/* nfa_clone: %0*/
/*   %tmp1 = getelementptr inbounds %struct._nfa_t* %src, i32 0, i32 0, i32 0, i32 0*/
begin
nfa_clone_0_tmp1 = arg_src;
end
end
always @(*) begin
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_st_i_0 = nfa_clone_1_st_i_0_phi_temp;
end
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_st_i_0 = nfa_clone_1_st_i_0_phi_temp;
end
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_clone_BB_1_2)) */
begin
nfa_clone_1_st_i_0 = nfa_clone_1_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_st_i_0_reg <= nfa_clone_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_st_i_0_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_st_i_0_reg <= nfa_clone_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_st_i_0_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_st_i_0_reg <= nfa_clone_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_st_i_0_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_st_i_0_reg <= nfa_clone_1_st_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_dt_i_0 = nfa_clone_1_dt_i_0_phi_temp;
end
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_dt_i_0 = nfa_clone_1_dt_i_0_phi_temp;
end
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_clone_BB_1_2)) */
begin
nfa_clone_1_dt_i_0 = nfa_clone_1_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_dt_i_0_reg <= nfa_clone_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_dt_i_0_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_dt_i_0_reg <= nfa_clone_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_dt_i_0_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_dt_i_0_reg <= nfa_clone_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_dt_i_0_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_dt_i_0_reg <= nfa_clone_1_dt_i_0;
if (^reset !== 1'bX && ^(nfa_clone_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_2 = nfa_clone_1_2_phi_temp;
end
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_nfa_clone_BB_1_2)) */
begin
nfa_clone_1_2 = nfa_clone_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_2_reg <= nfa_clone_1_2;
if (^reset !== 1'bX && ^(nfa_clone_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_2_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_2_reg <= nfa_clone_1_2;
if (^reset !== 1'bX && ^(nfa_clone_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_2_reg"); $finish; end
end
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_nfa_clone_BB_1_2))
begin
nfa_clone_1_2_reg <= nfa_clone_1_2;
if (^reset !== 1'bX && ^(nfa_clone_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_clone: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
nfa_clone_1_3 = (nfa_clone_1_2 == 32'd0);
end
end
always @(*) begin
/* nfa_clone: %4*/
/*   %5 = add i32 %2, -1*/
begin
nfa_clone_4_5 = (nfa_clone_1_2_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_clone: %4*/
/*   %5 = add i32 %2, -1*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
nfa_clone_4_5_reg <= nfa_clone_4_5;
if (^reset !== 1'bX && ^(nfa_clone_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_4_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_clone: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
nfa_clone_4_6 = (nfa_clone_1_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_clone: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
nfa_clone_4_6_reg <= nfa_clone_4_6;
if (^reset !== 1'bX && ^(nfa_clone_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_4_6_reg"); $finish; end
end
end
always @(*) begin
/* nfa_clone: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
begin
nfa_clone_4_7 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_clone: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
nfa_clone_4_8 = (nfa_clone_1_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_clone: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
nfa_clone_4_8_reg <= nfa_clone_4_8;
if (^reset !== 1'bX && ^(nfa_clone_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_4_8_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_nfa_clone_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_clone_1_st_i_0_phi_temp <= nfa_clone_0_tmp1;
if (^reset !== 1'bX && ^(nfa_clone_0_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_st_i_0_phi_temp"); $finish; end
end
/* nfa_clone: %1*/
/*   %st.i.0 = phi i32* [ %tmp1, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_nfa_clone_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_clone_1_st_i_0_phi_temp <= nfa_clone_4_6_reg;
if (^reset !== 1'bX && ^(nfa_clone_4_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_nfa_clone_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_clone_1_dt_i_0_phi_temp <= nfa_clone_0_tmp;
if (^reset !== 1'bX && ^(nfa_clone_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_dt_i_0_phi_temp"); $finish; end
end
/* nfa_clone: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_nfa_clone_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_clone_1_dt_i_0_phi_temp <= nfa_clone_4_8_reg;
if (^reset !== 1'bX && ^(nfa_clone_4_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_nfa_clone_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_clone_1_2_phi_temp <= 32'd96397;
if (^reset !== 1'bX && ^(32'd96397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_2_phi_temp"); $finish; end
end
/* nfa_clone: %1*/
/*   %2 = phi i32 [ 96397, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_nfa_clone_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_clone_1_2_phi_temp <= nfa_clone_4_5_reg;
if (^reset !== 1'bX && ^(nfa_clone_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_clone_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_clone: %legup_memcpy_4.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_clone_BB_legup_memcpy_4_exit_6))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_clone: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_clone: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_5))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_clone: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
memory_controller_address_a = nfa_clone_1_st_i_0_reg;
end
/* nfa_clone: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_5))
begin
memory_controller_address_a = nfa_clone_1_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_clone: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_clone: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_5))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_clone: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_5))
begin
memory_controller_in_a = {nfa_clone_4_7};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_clone: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_3))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_clone: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_clone_BB_4_5))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_merge_states
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	arg_q1,
	arg_q2,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_16_2 = 7'd2;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_16_4 = 7'd4;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_17_5 = 7'd5;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_19_6 = 7'd6;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_19_8 = 7'd8;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9 = 7'd9;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10 = 7'd10;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11 = 7'd11;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13 = 7'd13;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14 = 7'd14;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15 = 7'd15;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16 = 7'd16;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18 = 7'd18;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19 = 7'd19;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21 = 7'd21;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22 = 7'd22;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23 = 7'd23;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24 = 7'd24;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26 = 7'd26;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27 = 7'd27;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28 = 7'd28;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29 = 7'd29;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31 = 7'd31;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32 = 7'd32;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34 = 7'd34;
parameter [6:0] LEGUP_F_nfa_merge_states_BB__preheader_35 = 7'd35;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_36_36 = 7'd36;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_36_37 = 7'd37;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_36_38 = 7'd38;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_40_39 = 7'd39;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_40_41 = 7'd41;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_40_43 = 7'd43;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_41_44 = 7'd44;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_44_45 = 7'd45;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_44_46 = 7'd46;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_44_47 = 7'd47;
parameter [6:0] LEGUP_F_nfa_merge_states_BB__backedge_48 = 7'd48;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49 = 7'd49;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51 = 7'd51;
parameter [6:0] LEGUP_F_nfa_merge_states_BB__preheader1_52 = 7'd52;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_50_53 = 7'd53;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_53_54 = 7'd54;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_53_55 = 7'd55;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_53_56 = 7'd56;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57 = 7'd57;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59 = 7'd59;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61 = 7'd61;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_59_62 = 7'd62;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_62_63 = 7'd63;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_62_64 = 7'd64;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_62_65 = 7'd65;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_67_66 = 7'd66;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_67_68 = 7'd68;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_67_70 = 7'd70;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_69_71 = 7'd71;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_72_72 = 7'd72;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_72_73 = 7'd73;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_72_74 = 7'd74;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75 = 7'd75;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77 = 7'd77;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_77_78 = 7'd78;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_77_80 = 7'd80;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_77_82 = 7'd82;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_78_83 = 7'd83;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_81_84 = 7'd84;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_81_85 = 7'd85;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_81_86 = 7'd86;
parameter [6:0] LEGUP_F_nfa_merge_states_BB__backedge3_87 = 7'd87;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88 = 7'd88;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90 = 7'd90;
parameter [6:0] LEGUP_F_nfa_merge_states_BB__preheader2_91 = 7'd91;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_87_92 = 7'd92;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_90_93 = 7'd93;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_90_94 = 7'd94;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_90_95 = 7'd95;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96 = 7'd96;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98 = 7'd98;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100 = 7'd100;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_96_101 = 7'd101;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_99_102 = 7'd102;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_99_103 = 7'd103;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_99_104 = 7'd104;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_104_105 = 7'd105;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_104_107 = 7'd107;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_104_109 = 7'd109;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_106_110 = 7'd110;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_109_111 = 7'd111;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_109_112 = 7'd112;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_109_113 = 7'd113;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114 = 7'd114;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116 = 7'd116;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_114_117 = 7'd117;
parameter [6:0] LEGUP_F_nfa_merge_states_BB_116_118 = 7'd118;
parameter [6:0] LEGUP_function_call_3 = 7'd3;
parameter [6:0] LEGUP_function_call_7 = 7'd7;
parameter [6:0] LEGUP_function_call_12 = 7'd12;
parameter [6:0] LEGUP_function_call_17 = 7'd17;
parameter [6:0] LEGUP_function_call_20 = 7'd20;
parameter [6:0] LEGUP_function_call_25 = 7'd25;
parameter [6:0] LEGUP_function_call_30 = 7'd30;
parameter [6:0] LEGUP_function_call_33 = 7'd33;
parameter [6:0] LEGUP_function_call_40 = 7'd40;
parameter [6:0] LEGUP_function_call_42 = 7'd42;
parameter [6:0] LEGUP_function_call_50 = 7'd50;
parameter [6:0] LEGUP_function_call_58 = 7'd58;
parameter [6:0] LEGUP_function_call_60 = 7'd60;
parameter [6:0] LEGUP_function_call_67 = 7'd67;
parameter [6:0] LEGUP_function_call_69 = 7'd69;
parameter [6:0] LEGUP_function_call_76 = 7'd76;
parameter [6:0] LEGUP_function_call_79 = 7'd79;
parameter [6:0] LEGUP_function_call_81 = 7'd81;
parameter [6:0] LEGUP_function_call_89 = 7'd89;
parameter [6:0] LEGUP_function_call_97 = 7'd97;
parameter [6:0] LEGUP_function_call_99 = 7'd99;
parameter [6:0] LEGUP_function_call_106 = 7'd106;
parameter [6:0] LEGUP_function_call_108 = 7'd108;
parameter [6:0] LEGUP_function_call_115 = 7'd115;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [7:0] arg_q1;
input [7:0] arg_q2;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [6:0] cur_state;
reg  nfa_merge_states_0_15;
reg  nfa_merge_states_17_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_nfa_is_initial_exit_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_nfa_is_initial_exit_20_reg;
reg [31:0] nfa_merge_states_nfa_is_initial_exit_21;
reg [31:0] nfa_merge_states_nfa_is_initial_exit_21_reg;
reg  nfa_merge_states_nfa_is_initial_exit_22;
reg  nfa_merge_states_nfa_is_initial_exit_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_nfa_is_final_exit_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_nfa_is_final_exit_23_reg;
reg  nfa_merge_states_nfa_is_final_exit_24;
reg  nfa_merge_states_nfa_is_final_exit_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__preheader_35_reg;
reg [7:0] nfa_merge_states_36_storemerge;
reg [7:0] nfa_merge_states_36_storemerge_reg;
reg [31:0] nfa_merge_states_36_37;
reg [31:0] nfa_merge_states_36_37_reg;
reg [31:0] nfa_merge_states_36_38;
reg  nfa_merge_states_36_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_41_st_i5_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_41_st_i5_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_41_dt_i4_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_41_dt_i4_0_reg;
reg [31:0] nfa_merge_states_41_42;
reg [31:0] nfa_merge_states_41_42_reg;
reg  nfa_merge_states_41_43;
reg [31:0] nfa_merge_states_44_45;
reg [31:0] nfa_merge_states_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_44_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_44_46_reg;
reg [7:0] nfa_merge_states_44_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_44_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_44_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge_st_i5_0_be;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge_dt_i4_0_be;
reg [31:0] nfa_merge_states__backedge__be;
reg  nfa_merge_states_legup_memcpy_1_exit6_49;
reg  nfa_merge_states_legup_memcpy_1_exit6_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_50_st_i8_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_50_st_i8_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_50_dt_i7_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_50_dt_i7_0_reg;
reg [31:0] nfa_merge_states_50_51;
reg [31:0] nfa_merge_states_50_51_reg;
reg  nfa_merge_states_50_52;
reg [31:0] nfa_merge_states_53_54;
reg [31:0] nfa_merge_states_53_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_53_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_53_55_reg;
reg [7:0] nfa_merge_states_53_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_53_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_53_57_reg;
reg [7:0] nfa_merge_states_legup_memcpy_1_exit9_58;
reg [7:0] nfa_merge_states_legup_memcpy_1_exit9_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_59_st_i11_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_59_st_i11_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_59_dt_i10_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_59_dt_i10_0_reg;
reg [31:0] nfa_merge_states_59_60;
reg [31:0] nfa_merge_states_59_60_reg;
reg  nfa_merge_states_59_61;
reg [31:0] nfa_merge_states_62_63;
reg [31:0] nfa_merge_states_62_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_62_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_62_64_reg;
reg [7:0] nfa_merge_states_62_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_62_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_62_66_reg;
reg [7:0] nfa_merge_states_67_68;
reg [7:0] nfa_merge_states_67_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_69_st_i14_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_69_st_i14_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_69_dt_i13_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_69_dt_i13_0_reg;
reg [31:0] nfa_merge_states_69_70;
reg [31:0] nfa_merge_states_69_70_reg;
reg  nfa_merge_states_69_71;
reg [31:0] nfa_merge_states_72_73;
reg [31:0] nfa_merge_states_72_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_72_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_72_74_reg;
reg [7:0] nfa_merge_states_72_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_72_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_72_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_78_st_i17_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_78_st_i17_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_78_dt_i16_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_78_dt_i16_0_reg;
reg [31:0] nfa_merge_states_78_79;
reg [31:0] nfa_merge_states_78_79_reg;
reg  nfa_merge_states_78_80;
reg [31:0] nfa_merge_states_81_82;
reg [31:0] nfa_merge_states_81_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_81_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_81_83_reg;
reg [7:0] nfa_merge_states_81_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_81_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_81_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge3_st_i17_0_be;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge3_dt_i16_0_be;
reg [31:0] nfa_merge_states__backedge3__be4;
reg  nfa_merge_states_legup_memcpy_1_exit18_86;
reg  nfa_merge_states_legup_memcpy_1_exit18_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_87_st_i20_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_87_st_i20_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_87_dt_i19_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_87_dt_i19_0_reg;
reg [31:0] nfa_merge_states_87_88;
reg [31:0] nfa_merge_states_87_88_reg;
reg  nfa_merge_states_87_89;
reg [31:0] nfa_merge_states_90_91;
reg [31:0] nfa_merge_states_90_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_90_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_90_92_reg;
reg [7:0] nfa_merge_states_90_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_90_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_90_94_reg;
reg [7:0] nfa_merge_states_legup_memcpy_1_exit21_95;
reg [7:0] nfa_merge_states_legup_memcpy_1_exit21_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_96_dt_i1_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_96_dt_i1_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_96_st_i2_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_96_st_i2_0_reg;
reg [31:0] nfa_merge_states_96_97;
reg [31:0] nfa_merge_states_96_97_reg;
reg  nfa_merge_states_96_98;
reg [31:0] nfa_merge_states_99_100;
reg [31:0] nfa_merge_states_99_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_99_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_99_101_reg;
reg [7:0] nfa_merge_states_99_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_99_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_99_103_reg;
reg [7:0] nfa_merge_states_104_105;
reg [7:0] nfa_merge_states_104_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_106_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_106_dt_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_106_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_106_st_i_0_reg;
reg [31:0] nfa_merge_states_106_107;
reg [31:0] nfa_merge_states_106_107_reg;
reg  nfa_merge_states_106_108;
reg [31:0] nfa_merge_states_109_110;
reg [31:0] nfa_merge_states_109_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_109_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_109_111_reg;
reg [7:0] nfa_merge_states_109_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_109_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_109_113_reg;
reg [7:0] nfa_merge_states_114_115;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  bitset_contains_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_arg_0;
reg [31:0] bitset_contains_arg_1;
reg  bitset_contains_memory_controller_waitrequest;
wire  bitset_contains_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_a;
wire  bitset_contains_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_a;
wire [1:0] bitset_contains_memory_controller_size_a;
wire  bitset_contains_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_b;
wire  bitset_contains_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_b;
wire [1:0] bitset_contains_memory_controller_size_b;
wire  bitset_contains_finish;
wire  bitset_contains_return_val;
reg  bitset_add_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_arg_0;
reg [7:0] bitset_add_arg_1;
reg  bitset_add_memory_controller_waitrequest;
wire  bitset_add_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_a;
wire  bitset_add_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_a;
wire [1:0] bitset_add_memory_controller_size_a;
wire  bitset_add_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_add_memory_controller_address_b;
wire  bitset_add_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_add_memory_controller_out_b;
wire [1:0] bitset_add_memory_controller_size_b;
wire  bitset_add_finish;
reg  bitset_remove_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_arg_0;
reg [7:0] bitset_remove_arg_1;
reg  bitset_remove_memory_controller_waitrequest;
wire  bitset_remove_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_a;
wire  bitset_remove_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_a;
wire [1:0] bitset_remove_memory_controller_size_a;
wire  bitset_remove_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_remove_memory_controller_address_b;
wire  bitset_remove_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_remove_memory_controller_out_b;
wire [1:0] bitset_remove_memory_controller_size_b;
wire  bitset_remove_finish;
reg  nfa_get_predecessors_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_arg_nfa;
reg [7:0] nfa_get_predecessors_arg_state;
reg [7:0] nfa_merge_states_36_storemerge_phi_temp;
reg [7:0] nfa_get_predecessors_arg_sym;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_arg_bs;
reg  nfa_get_predecessors_memory_controller_waitrequest;
wire  nfa_get_predecessors_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_memory_controller_address_a;
wire  nfa_get_predecessors_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_predecessors_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_predecessors_memory_controller_out_a;
wire [1:0] nfa_get_predecessors_memory_controller_size_a;
wire  nfa_get_predecessors_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_predecessors_memory_controller_address_b;
wire  nfa_get_predecessors_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_predecessors_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_predecessors_memory_controller_out_b;
wire [1:0] nfa_get_predecessors_memory_controller_size_b;
wire  nfa_get_predecessors_finish;
reg  bitset_first_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_arg_1;
reg  bitset_first_memory_controller_waitrequest;
wire  bitset_first_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_memory_controller_address_a;
wire  bitset_first_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_out_a;
wire [1:0] bitset_first_memory_controller_size_a;
wire  bitset_first_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_memory_controller_address_b;
wire  bitset_first_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_out_b;
wire [1:0] bitset_first_memory_controller_size_b;
wire  bitset_first_finish;
reg  bitset_end_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_arg_0;
reg  bitset_end_memory_controller_waitrequest;
wire  bitset_end_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_memory_controller_address_a;
wire  bitset_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_out_a;
wire [1:0] bitset_end_memory_controller_size_a;
wire  bitset_end_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_memory_controller_address_b;
wire  bitset_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_out_b;
wire [1:0] bitset_end_memory_controller_size_b;
wire  bitset_end_finish;
wire  bitset_end_return_val;
reg  bitset_element_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_arg_0;
reg  bitset_element_memory_controller_waitrequest;
wire  bitset_element_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_memory_controller_address_a;
wire  bitset_element_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_out_a;
wire [1:0] bitset_element_memory_controller_size_a;
wire  bitset_element_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_memory_controller_address_b;
wire  bitset_element_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_out_b;
wire [1:0] bitset_element_memory_controller_size_b;
wire  bitset_element_finish;
wire [7:0] bitset_element_return_val;
reg  nfa_add_transition_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_arg_nfa;
reg [7:0] nfa_add_transition_arg_q0;
reg [7:0] nfa_add_transition_arg_q1;
reg [7:0] nfa_add_transition_arg_a;
reg  nfa_add_transition_memory_controller_waitrequest;
wire  nfa_add_transition_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_memory_controller_address_a;
wire  nfa_add_transition_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_add_transition_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_add_transition_memory_controller_out_a;
wire [1:0] nfa_add_transition_memory_controller_size_a;
wire  nfa_add_transition_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_add_transition_memory_controller_address_b;
wire  nfa_add_transition_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_add_transition_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_add_transition_memory_controller_out_b;
wire [1:0] nfa_add_transition_memory_controller_size_b;
wire  nfa_add_transition_finish;
reg  nfa_remove_transition_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_arg_nfa;
reg [7:0] nfa_remove_transition_arg_q0;
reg [7:0] nfa_remove_transition_arg_q1;
reg [7:0] nfa_remove_transition_arg_a;
reg  nfa_remove_transition_memory_controller_waitrequest;
wire  nfa_remove_transition_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_memory_controller_address_a;
wire  nfa_remove_transition_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_remove_transition_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_remove_transition_memory_controller_out_a;
wire [1:0] nfa_remove_transition_memory_controller_size_a;
wire  nfa_remove_transition_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_remove_transition_memory_controller_address_b;
wire  nfa_remove_transition_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_remove_transition_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_remove_transition_memory_controller_out_b;
wire [1:0] nfa_remove_transition_memory_controller_size_b;
wire  nfa_remove_transition_finish;
reg  bitset_next_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_2;
reg  bitset_next_memory_controller_waitrequest;
wire  bitset_next_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_memory_controller_address_a;
wire  bitset_next_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_out_a;
wire [1:0] bitset_next_memory_controller_size_a;
wire  bitset_next_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_memory_controller_address_b;
wire  bitset_next_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_out_b;
wire [1:0] bitset_next_memory_controller_size_b;
wire  bitset_next_finish;
reg  nfa_get_sucessors_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_arg_nfa;
reg [7:0] nfa_get_sucessors_arg_state;
reg [7:0] nfa_get_sucessors_arg_sym;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_arg_bs;
reg  nfa_get_sucessors_memory_controller_waitrequest;
wire  nfa_get_sucessors_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_memory_controller_address_a;
wire  nfa_get_sucessors_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_out_a;
wire [1:0] nfa_get_sucessors_memory_controller_size_a;
wire  nfa_get_sucessors_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_memory_controller_address_b;
wire  nfa_get_sucessors_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_out_b;
wire [1:0] nfa_get_sucessors_memory_controller_size_b;
wire  nfa_get_sucessors_finish;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_41_st_i5_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_41_dt_i4_0_phi_temp;
reg [31:0] nfa_merge_states_41_42_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge_st_i5_0_be_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge_dt_i4_0_be_phi_temp;
reg [31:0] nfa_merge_states__backedge__be_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_50_st_i8_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_50_dt_i7_0_phi_temp;
reg [31:0] nfa_merge_states_50_51_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_59_st_i11_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_59_dt_i10_0_phi_temp;
reg [31:0] nfa_merge_states_59_60_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_69_st_i14_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_69_dt_i13_0_phi_temp;
reg [31:0] nfa_merge_states_69_70_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_78_st_i17_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_78_dt_i16_0_phi_temp;
reg [31:0] nfa_merge_states_78_79_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge3_st_i17_0_be_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states__backedge3_dt_i16_0_be_phi_temp;
reg [31:0] nfa_merge_states__backedge3__be4_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_87_st_i20_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_87_dt_i19_0_phi_temp;
reg [31:0] nfa_merge_states_87_88_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_96_dt_i1_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_96_st_i2_0_phi_temp;
reg [31:0] nfa_merge_states_96_97_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_106_dt_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_merge_states_106_st_i_0_phi_temp;
reg [31:0] nfa_merge_states_106_107_phi_temp;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



bitset_contains bitset_contains_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_contains_start),
	.finish (bitset_contains_finish),
	.return_val (bitset_contains_return_val),
	.memory_controller_enable_a (bitset_contains_memory_controller_enable_a),
	.memory_controller_address_a (bitset_contains_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_contains_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_contains_memory_controller_in_a),
	.memory_controller_size_a (bitset_contains_memory_controller_size_a),
	.memory_controller_out_a (bitset_contains_memory_controller_out_a),
	.memory_controller_enable_b (bitset_contains_memory_controller_enable_b),
	.memory_controller_address_b (bitset_contains_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_contains_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_contains_memory_controller_in_b),
	.memory_controller_size_b (bitset_contains_memory_controller_size_b),
	.memory_controller_out_b (bitset_contains_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_contains_memory_controller_waitrequest),
	.arg_0 (bitset_contains_arg_0),
	.arg_1 (bitset_contains_arg_1)
);



bitset_add bitset_add_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_add_start),
	.finish (bitset_add_finish),
	.memory_controller_enable_a (bitset_add_memory_controller_enable_a),
	.memory_controller_address_a (bitset_add_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_add_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_add_memory_controller_in_a),
	.memory_controller_size_a (bitset_add_memory_controller_size_a),
	.memory_controller_out_a (bitset_add_memory_controller_out_a),
	.memory_controller_enable_b (bitset_add_memory_controller_enable_b),
	.memory_controller_address_b (bitset_add_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_add_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_add_memory_controller_in_b),
	.memory_controller_size_b (bitset_add_memory_controller_size_b),
	.memory_controller_out_b (bitset_add_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_add_memory_controller_waitrequest),
	.arg_0 (bitset_add_arg_0),
	.arg_1 (bitset_add_arg_1)
);



bitset_remove bitset_remove_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_remove_start),
	.finish (bitset_remove_finish),
	.memory_controller_enable_a (bitset_remove_memory_controller_enable_a),
	.memory_controller_address_a (bitset_remove_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_remove_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_remove_memory_controller_in_a),
	.memory_controller_size_a (bitset_remove_memory_controller_size_a),
	.memory_controller_out_a (bitset_remove_memory_controller_out_a),
	.memory_controller_enable_b (bitset_remove_memory_controller_enable_b),
	.memory_controller_address_b (bitset_remove_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_remove_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_remove_memory_controller_in_b),
	.memory_controller_size_b (bitset_remove_memory_controller_size_b),
	.memory_controller_out_b (bitset_remove_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_remove_memory_controller_waitrequest),
	.arg_0 (bitset_remove_arg_0),
	.arg_1 (bitset_remove_arg_1)
);



nfa_get_predecessors nfa_get_predecessors_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_get_predecessors_start),
	.finish (nfa_get_predecessors_finish),
	.memory_controller_enable_a (nfa_get_predecessors_memory_controller_enable_a),
	.memory_controller_address_a (nfa_get_predecessors_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_get_predecessors_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_get_predecessors_memory_controller_in_a),
	.memory_controller_size_a (nfa_get_predecessors_memory_controller_size_a),
	.memory_controller_out_a (nfa_get_predecessors_memory_controller_out_a),
	.memory_controller_enable_b (nfa_get_predecessors_memory_controller_enable_b),
	.memory_controller_address_b (nfa_get_predecessors_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_get_predecessors_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_get_predecessors_memory_controller_in_b),
	.memory_controller_size_b (nfa_get_predecessors_memory_controller_size_b),
	.memory_controller_out_b (nfa_get_predecessors_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_get_predecessors_memory_controller_waitrequest),
	.arg_nfa (nfa_get_predecessors_arg_nfa),
	.arg_state (nfa_get_predecessors_arg_state),
	.arg_sym (nfa_get_predecessors_arg_sym),
	.arg_bs (nfa_get_predecessors_arg_bs)
);



bitset_first bitset_first_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_first_start),
	.finish (bitset_first_finish),
	.memory_controller_enable_a (bitset_first_memory_controller_enable_a),
	.memory_controller_address_a (bitset_first_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_first_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_first_memory_controller_in_a),
	.memory_controller_size_a (bitset_first_memory_controller_size_a),
	.memory_controller_out_a (bitset_first_memory_controller_out_a),
	.memory_controller_enable_b (bitset_first_memory_controller_enable_b),
	.memory_controller_address_b (bitset_first_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_first_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_first_memory_controller_in_b),
	.memory_controller_size_b (bitset_first_memory_controller_size_b),
	.memory_controller_out_b (bitset_first_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_first_memory_controller_waitrequest),
	.arg_0 (bitset_first_arg_0),
	.arg_1 (bitset_first_arg_1)
);



bitset_end bitset_end_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_end_start),
	.finish (bitset_end_finish),
	.return_val (bitset_end_return_val),
	.memory_controller_enable_a (bitset_end_memory_controller_enable_a),
	.memory_controller_address_a (bitset_end_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_end_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_end_memory_controller_in_a),
	.memory_controller_size_a (bitset_end_memory_controller_size_a),
	.memory_controller_out_a (bitset_end_memory_controller_out_a),
	.memory_controller_enable_b (bitset_end_memory_controller_enable_b),
	.memory_controller_address_b (bitset_end_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_end_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_end_memory_controller_in_b),
	.memory_controller_size_b (bitset_end_memory_controller_size_b),
	.memory_controller_out_b (bitset_end_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_end_memory_controller_waitrequest),
	.arg_0 (bitset_end_arg_0)
);



bitset_element bitset_element_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_element_start),
	.finish (bitset_element_finish),
	.return_val (bitset_element_return_val),
	.memory_controller_enable_a (bitset_element_memory_controller_enable_a),
	.memory_controller_address_a (bitset_element_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_element_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_element_memory_controller_in_a),
	.memory_controller_size_a (bitset_element_memory_controller_size_a),
	.memory_controller_out_a (bitset_element_memory_controller_out_a),
	.memory_controller_enable_b (bitset_element_memory_controller_enable_b),
	.memory_controller_address_b (bitset_element_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_element_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_element_memory_controller_in_b),
	.memory_controller_size_b (bitset_element_memory_controller_size_b),
	.memory_controller_out_b (bitset_element_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_element_memory_controller_waitrequest),
	.arg_0 (bitset_element_arg_0)
);



nfa_add_transition nfa_add_transition_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_add_transition_start),
	.finish (nfa_add_transition_finish),
	.memory_controller_enable_a (nfa_add_transition_memory_controller_enable_a),
	.memory_controller_address_a (nfa_add_transition_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_add_transition_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_add_transition_memory_controller_in_a),
	.memory_controller_size_a (nfa_add_transition_memory_controller_size_a),
	.memory_controller_out_a (nfa_add_transition_memory_controller_out_a),
	.memory_controller_enable_b (nfa_add_transition_memory_controller_enable_b),
	.memory_controller_address_b (nfa_add_transition_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_add_transition_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_add_transition_memory_controller_in_b),
	.memory_controller_size_b (nfa_add_transition_memory_controller_size_b),
	.memory_controller_out_b (nfa_add_transition_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_add_transition_memory_controller_waitrequest),
	.arg_nfa (nfa_add_transition_arg_nfa),
	.arg_q0 (nfa_add_transition_arg_q0),
	.arg_q1 (nfa_add_transition_arg_q1),
	.arg_a (nfa_add_transition_arg_a)
);



nfa_remove_transition nfa_remove_transition_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_remove_transition_start),
	.finish (nfa_remove_transition_finish),
	.memory_controller_enable_a (nfa_remove_transition_memory_controller_enable_a),
	.memory_controller_address_a (nfa_remove_transition_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_remove_transition_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_remove_transition_memory_controller_in_a),
	.memory_controller_size_a (nfa_remove_transition_memory_controller_size_a),
	.memory_controller_out_a (nfa_remove_transition_memory_controller_out_a),
	.memory_controller_enable_b (nfa_remove_transition_memory_controller_enable_b),
	.memory_controller_address_b (nfa_remove_transition_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_remove_transition_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_remove_transition_memory_controller_in_b),
	.memory_controller_size_b (nfa_remove_transition_memory_controller_size_b),
	.memory_controller_out_b (nfa_remove_transition_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_remove_transition_memory_controller_waitrequest),
	.arg_nfa (nfa_remove_transition_arg_nfa),
	.arg_q0 (nfa_remove_transition_arg_q0),
	.arg_q1 (nfa_remove_transition_arg_q1),
	.arg_a (nfa_remove_transition_arg_a)
);



bitset_next bitset_next_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_next_start),
	.finish (bitset_next_finish),
	.memory_controller_enable_a (bitset_next_memory_controller_enable_a),
	.memory_controller_address_a (bitset_next_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_next_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_next_memory_controller_in_a),
	.memory_controller_size_a (bitset_next_memory_controller_size_a),
	.memory_controller_out_a (bitset_next_memory_controller_out_a),
	.memory_controller_enable_b (bitset_next_memory_controller_enable_b),
	.memory_controller_address_b (bitset_next_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_next_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_next_memory_controller_in_b),
	.memory_controller_size_b (bitset_next_memory_controller_size_b),
	.memory_controller_out_b (bitset_next_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_next_memory_controller_waitrequest),
	.arg_0 (bitset_next_arg_0),
	.arg_1 (bitset_next_arg_1),
	.arg_2 (bitset_next_arg_2)
);



nfa_get_sucessors nfa_get_sucessors_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_get_sucessors_start),
	.finish (nfa_get_sucessors_finish),
	.memory_controller_enable_a (nfa_get_sucessors_memory_controller_enable_a),
	.memory_controller_address_a (nfa_get_sucessors_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_get_sucessors_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_get_sucessors_memory_controller_in_a),
	.memory_controller_size_a (nfa_get_sucessors_memory_controller_size_a),
	.memory_controller_out_a (nfa_get_sucessors_memory_controller_out_a),
	.memory_controller_enable_b (nfa_get_sucessors_memory_controller_enable_b),
	.memory_controller_address_b (nfa_get_sucessors_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_get_sucessors_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_get_sucessors_memory_controller_in_b),
	.memory_controller_size_b (nfa_get_sucessors_memory_controller_size_b),
	.memory_controller_out_b (nfa_get_sucessors_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_get_sucessors_memory_controller_waitrequest),
	.arg_nfa (nfa_get_sucessors_arg_nfa),
	.arg_state (nfa_get_sucessors_arg_state),
	.arg_sym (nfa_get_sucessors_arg_sym),
	.arg_bs (nfa_get_sucessors_arg_bs)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_0_15 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_17_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_17_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_0_15 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_16_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_16_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_16_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_16_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_16_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_16_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_16_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_16_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_3) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_3;
if (^reset !== 1'bX && ^(LEGUP_function_call_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_16_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_16_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_16_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_16_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_17_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_17_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_17_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_17_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_17_18 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_17_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_17_18 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_19_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_19_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_19_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_19_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_19_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_19_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_19_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_19_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_19_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_19_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_19_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_19_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_12;
if (^reset !== 1'bX && ^(LEGUP_function_call_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_12;
if (^reset !== 1'bX && ^(LEGUP_function_call_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_12) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_12) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_12;
if (^reset !== 1'bX && ^(LEGUP_function_call_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_nfa_is_initial_exit_22_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_13) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_nfa_is_initial_exit_22_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_17;
if (^reset !== 1'bX && ^(LEGUP_function_call_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_17;
if (^reset !== 1'bX && ^(LEGUP_function_call_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_17) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_17) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_17;
if (^reset !== 1'bX && ^(LEGUP_function_call_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_25;
if (^reset !== 1'bX && ^(LEGUP_function_call_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_25;
if (^reset !== 1'bX && ^(LEGUP_function_call_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_25) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_25) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_25;
if (^reset !== 1'bX && ^(LEGUP_function_call_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_nfa_is_final_exit_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_26) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_nfa_is_final_exit_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader_35;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_30;
if (^reset !== 1'bX && ^(LEGUP_function_call_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_30;
if (^reset !== 1'bX && ^(LEGUP_function_call_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_30) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_30) & (memory_controller_waitrequest == 1'd0)) & (bitset_add_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_30;
if (^reset !== 1'bX && ^(LEGUP_function_call_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_33;
if (^reset !== 1'bX && ^(LEGUP_function_call_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_33;
if (^reset !== 1'bX && ^(LEGUP_function_call_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_33) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_33) & (memory_controller_waitrequest == 1'd0)) & (bitset_remove_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_33;
if (^reset !== 1'bX && ^(LEGUP_function_call_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader_35;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader_35;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_36_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_36_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_37;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_36_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_37;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_36_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_38;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_36_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_38;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_36_38) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_36_39 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_40_39;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_40_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_36_38) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_36_39 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_116_118;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_40_39;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_40_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_40;
if (^reset !== 1'bX && ^(LEGUP_function_call_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_40;
if (^reset !== 1'bX && ^(LEGUP_function_call_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_40) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_40_41;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_40) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_predecessors_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_40;
if (^reset !== 1'bX && ^(LEGUP_function_call_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_40_41;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_42;
if (^reset !== 1'bX && ^(LEGUP_function_call_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_42;
if (^reset !== 1'bX && ^(LEGUP_function_call_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_42) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_40_43;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_40_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_42) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_42;
if (^reset !== 1'bX && ^(LEGUP_function_call_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_40_43;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_40_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_41_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_41_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_41_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_41_44) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_41_43 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_41_44) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_41_43 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_44_45;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_44_45;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_44_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_44_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_44_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_44_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__backedge_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__backedge_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__backedge_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__backedge_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_41_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_50;
if (^reset !== 1'bX && ^(LEGUP_function_call_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_50;
if (^reset !== 1'bX && ^(LEGUP_function_call_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_50) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_50) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_50;
if (^reset !== 1'bX && ^(LEGUP_function_call_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_legup_memcpy_1_exit6_49_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_77_78;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_51) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_legup_memcpy_1_exit6_49_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader1_52;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader1_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader1_52;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader1_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_50_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_50_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_50_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_50_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_50_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_50_53) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_50_52 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_50_53) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_50_52 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_53_54;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_53_54;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_53_55;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_53_55;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_53_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_53_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_50_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_50_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_58;
if (^reset !== 1'bX && ^(LEGUP_function_call_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_58;
if (^reset !== 1'bX && ^(LEGUP_function_call_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_58) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_58) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_58;
if (^reset !== 1'bX && ^(LEGUP_function_call_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_60;
if (^reset !== 1'bX && ^(LEGUP_function_call_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_60;
if (^reset !== 1'bX && ^(LEGUP_function_call_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_60) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_60) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_60;
if (^reset !== 1'bX && ^(LEGUP_function_call_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_59_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_59_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_59_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_59_62) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_59_61 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_67_66;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_67_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_59_62) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_59_61 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_62_63;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_62_63;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_62_64;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_62_64;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_62_65;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_62_65;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_59_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_67_66;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_67_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_67;
if (^reset !== 1'bX && ^(LEGUP_function_call_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_67;
if (^reset !== 1'bX && ^(LEGUP_function_call_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_67) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_67_68;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_67) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_67;
if (^reset !== 1'bX && ^(LEGUP_function_call_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_67_68;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_69;
if (^reset !== 1'bX && ^(LEGUP_function_call_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_69;
if (^reset !== 1'bX && ^(LEGUP_function_call_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_69) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_67_70;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_69) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_69;
if (^reset !== 1'bX && ^(LEGUP_function_call_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_67_70;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_69_71;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_69_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_69_71;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_69_71) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_69_71 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_69_71) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_69_71 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_72_72;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_72_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_72_72;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_72_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_72_73;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_72_73;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_72_74;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_72_74;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_69_71;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_76;
if (^reset !== 1'bX && ^(LEGUP_function_call_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_76;
if (^reset !== 1'bX && ^(LEGUP_function_call_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_76) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_76) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_76;
if (^reset !== 1'bX && ^(LEGUP_function_call_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__backedge_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__backedge_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_77_78;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_79;
if (^reset !== 1'bX && ^(LEGUP_function_call_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_79;
if (^reset !== 1'bX && ^(LEGUP_function_call_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_79) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_77_80;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_77_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_79) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_79;
if (^reset !== 1'bX && ^(LEGUP_function_call_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_77_80;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_77_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_81;
if (^reset !== 1'bX && ^(LEGUP_function_call_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_81;
if (^reset !== 1'bX && ^(LEGUP_function_call_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_81) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_77_82;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_77_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_81) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_81;
if (^reset !== 1'bX && ^(LEGUP_function_call_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_77_82;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_77_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_78_83;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_78_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_78_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_78_83;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_78_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_78_83) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_78_80 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_78_83) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_78_80 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_81_84;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_81_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_81_84;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_81_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_81_85;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_81_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_81_85;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_81_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_81_86;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_81_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_81_86;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_81_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__backedge3_87;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__backedge3_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge3_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__backedge3_87;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__backedge3_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge3_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_78_83;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_78_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_89;
if (^reset !== 1'bX && ^(LEGUP_function_call_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_89;
if (^reset !== 1'bX && ^(LEGUP_function_call_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_89) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_89) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_89;
if (^reset !== 1'bX && ^(LEGUP_function_call_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_legup_memcpy_1_exit18_86_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_114_117;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_90) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_legup_memcpy_1_exit18_86_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader2_91;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader2_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader2_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__preheader2_91;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__preheader2_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader2_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_87_92;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_87_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_87_92;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_87_92) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_87_89 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_87_92) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_87_89 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_90_93;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_90_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_90_93;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_90_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_90_94;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_90_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_90_94;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_90_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_90_95;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_90_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_90_95;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_90_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_87_92;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_97;
if (^reset !== 1'bX && ^(LEGUP_function_call_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_97;
if (^reset !== 1'bX && ^(LEGUP_function_call_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_97) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_97) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_97;
if (^reset !== 1'bX && ^(LEGUP_function_call_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_99;
if (^reset !== 1'bX && ^(LEGUP_function_call_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_99;
if (^reset !== 1'bX && ^(LEGUP_function_call_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_99) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_99) & (memory_controller_waitrequest == 1'd0)) & (nfa_add_transition_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_99;
if (^reset !== 1'bX && ^(LEGUP_function_call_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_96_101;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_96_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_96_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_96_101;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_96_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_96_101) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_96_98 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_104_105;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_96_101) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_96_98 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_99_102;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_99_102;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_99_103;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_99_103;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_99_104;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_99_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_99_104;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_99_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_96_101;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_96_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_104_105;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_106;
if (^reset !== 1'bX && ^(LEGUP_function_call_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_106;
if (^reset !== 1'bX && ^(LEGUP_function_call_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_106) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_104_107;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_106) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_106;
if (^reset !== 1'bX && ^(LEGUP_function_call_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_104_107;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_108;
if (^reset !== 1'bX && ^(LEGUP_function_call_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_108;
if (^reset !== 1'bX && ^(LEGUP_function_call_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_108) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_104_109;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_104_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_108) & (memory_controller_waitrequest == 1'd0)) & (nfa_remove_transition_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_108;
if (^reset !== 1'bX && ^(LEGUP_function_call_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_104_109;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_104_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_106_110;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_106_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_106_110;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_106_110) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_106_108 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_merge_states_BB_106_110) & (memory_controller_waitrequest == 1'd0)) & (nfa_merge_states_106_108 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_109_111;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_109_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_109_111;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_109_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_109_112;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_109_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_109_112;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_109_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_109_113;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_109_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_109_113;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_109_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_106_110;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_115;
if (^reset !== 1'bX && ^(LEGUP_function_call_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_115;
if (^reset !== 1'bX && ^(LEGUP_function_call_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_115) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_115) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_115;
if (^reset !== 1'bX && ^(LEGUP_function_call_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB__backedge3_87;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB__backedge3_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_114_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_114_117;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_114_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_36_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_36_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_116_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_merge_states_BB_116_118;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_merge_states_BB_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_merge_states_BB_116_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (^reset !== 1'bX && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %0*/
/*   %15 = icmp ult i8 %q1, 63*/
begin
nfa_merge_states_0_15 = (arg_q1 < 8'd63);
end
end
always @(*) begin
/* nfa_merge_states: %17*/
/*   %18 = icmp ult i8 %q2, 63*/
begin
nfa_merge_states_17_18 = (arg_q2 < 8'd63);
end
end
always @(*) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %20 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
begin
nfa_merge_states_nfa_is_initial_exit_20 = arg_nfa;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %20 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9))
begin
nfa_merge_states_nfa_is_initial_exit_20_reg <= nfa_merge_states_nfa_is_initial_exit_20;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_nfa_is_initial_exit_20_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %21 = zext i8 %q2 to i32*/
begin
nfa_merge_states_nfa_is_initial_exit_21 = {arg_q2};
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %21 = zext i8 %q2 to i32*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_9))
begin
nfa_merge_states_nfa_is_initial_exit_21_reg <= nfa_merge_states_nfa_is_initial_exit_21;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_nfa_is_initial_exit_21_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
begin
nfa_merge_states_nfa_is_initial_exit_22 = bitset_contains_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
nfa_merge_states_nfa_is_initial_exit_22_reg <= nfa_merge_states_nfa_is_initial_exit_22;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_nfa_is_initial_exit_22_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %23 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
begin
nfa_merge_states_nfa_is_final_exit_23 = (arg_nfa + 12);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %23 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_22))
begin
nfa_merge_states_nfa_is_final_exit_23_reg <= nfa_merge_states_nfa_is_final_exit_23;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_final_exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_nfa_is_final_exit_23_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
begin
nfa_merge_states_nfa_is_final_exit_24 = bitset_contains_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
nfa_merge_states_nfa_is_final_exit_24_reg <= nfa_merge_states_nfa_is_final_exit_24;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_final_exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_nfa_is_final_exit_24_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %25 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_merge_states__preheader_25 = (arg_nfa + 385584);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %25 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_25_reg <= nfa_merge_states__preheader_25;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_25_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %26 = getelementptr inbounds %struct._bitset_iterator_t* %7, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_26 = 0; end
begin
nfa_merge_states__preheader_26 = `TAG_nfa_merge_states_0_7_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %26 = getelementptr inbounds %struct._bitset_iterator_t* %7, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_26_reg <= nfa_merge_states__preheader_26;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_26_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %27 = getelementptr inbounds %struct._bitset_iterator_t* %i, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_27 = 0; end
begin
nfa_merge_states__preheader_27 = `TAG_nfa_merge_states_0_i_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %27 = getelementptr inbounds %struct._bitset_iterator_t* %i, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_27_reg <= nfa_merge_states__preheader_27;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_27_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %28 = getelementptr inbounds %struct._bitset_iterator_t* %8, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_28 = 0; end
begin
nfa_merge_states__preheader_28 = `TAG_nfa_merge_states_0_8_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %28 = getelementptr inbounds %struct._bitset_iterator_t* %8, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_28_reg <= nfa_merge_states__preheader_28;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_28_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %29 = getelementptr inbounds %struct._bitset_iterator_t* %9, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_29 = 0; end
begin
nfa_merge_states__preheader_29 = `TAG_nfa_merge_states_0_9_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %29 = getelementptr inbounds %struct._bitset_iterator_t* %9, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_29_reg <= nfa_merge_states__preheader_29;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_29_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %30 = getelementptr inbounds %struct._bitset_iterator_t* %10, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_30 = 0; end
begin
nfa_merge_states__preheader_30 = `TAG_nfa_merge_states_0_10_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %30 = getelementptr inbounds %struct._bitset_iterator_t* %10, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_30_reg <= nfa_merge_states__preheader_30;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_30_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %31 = getelementptr inbounds %struct._bitset_iterator_t* %11, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_31 = 0; end
begin
nfa_merge_states__preheader_31 = `TAG_nfa_merge_states_0_11_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %31 = getelementptr inbounds %struct._bitset_iterator_t* %11, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_31_reg <= nfa_merge_states__preheader_31;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_31_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %32 = getelementptr inbounds %struct._bitset_iterator_t* %i1, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_32 = 0; end
begin
nfa_merge_states__preheader_32 = `TAG_nfa_merge_states_0_i1_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %32 = getelementptr inbounds %struct._bitset_iterator_t* %i1, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_32_reg <= nfa_merge_states__preheader_32;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_32_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %33 = getelementptr inbounds %struct._bitset_iterator_t* %12, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_33 = 0; end
begin
nfa_merge_states__preheader_33 = `TAG_nfa_merge_states_0_12_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %33 = getelementptr inbounds %struct._bitset_iterator_t* %12, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_33_reg <= nfa_merge_states__preheader_33;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_33_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %34 = getelementptr inbounds %struct._bitset_iterator_t* %13, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_34 = 0; end
begin
nfa_merge_states__preheader_34 = `TAG_nfa_merge_states_0_13_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %34 = getelementptr inbounds %struct._bitset_iterator_t* %13, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_34_reg <= nfa_merge_states__preheader_34;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_34_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.preheader*/
/*   %35 = getelementptr inbounds %struct._bitset_iterator_t* %14, i32 0, i32 0*/
if (reset) begin nfa_merge_states__preheader_35 = 0; end
begin
nfa_merge_states__preheader_35 = `TAG_nfa_merge_states_0_14_a;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.preheader*/
/*   %35 = getelementptr inbounds %struct._bitset_iterator_t* %14, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35))
begin
nfa_merge_states__preheader_35_reg <= nfa_merge_states__preheader_35;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__preheader_35_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36)) */
begin
nfa_merge_states_36_storemerge = nfa_merge_states_36_storemerge_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_storemerge_reg <= nfa_merge_states_36_storemerge;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %36*/
/*   %37 = zext i8 %storemerge to i32*/
begin
nfa_merge_states_36_37 = {nfa_merge_states_36_storemerge};
end
end
always @(posedge clk) begin
/* nfa_merge_states: %36*/
/*   %37 = zext i8 %storemerge to i32*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
nfa_merge_states_36_37_reg <= nfa_merge_states_36_37;
if (^reset !== 1'bX && ^(nfa_merge_states_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_37_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %36*/
/*   %38 = load i32* %25, align 4*/
begin
nfa_merge_states_36_38 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_merge_states: %36*/
/*   %39 = icmp slt i32 %37, %38*/
begin
nfa_merge_states_36_39 = ($signed(nfa_merge_states_36_37_reg) < $signed(nfa_merge_states_36_38));
end
end
always @(*) begin
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_st_i5_0 = nfa_merge_states_41_st_i5_0_phi_temp;
end
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_st_i5_0 = nfa_merge_states_41_st_i5_0_phi_temp;
end
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44)) */
begin
nfa_merge_states_41_st_i5_0 = nfa_merge_states_41_st_i5_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_st_i5_0_reg <= nfa_merge_states_41_st_i5_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_st_i5_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_st_i5_0_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_st_i5_0_reg <= nfa_merge_states_41_st_i5_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_st_i5_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_st_i5_0_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_st_i5_0_reg <= nfa_merge_states_41_st_i5_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_st_i5_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_st_i5_0_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_st_i5_0_reg <= nfa_merge_states_41_st_i5_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_st_i5_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_st_i5_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_dt_i4_0 = nfa_merge_states_41_dt_i4_0_phi_temp;
end
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_dt_i4_0 = nfa_merge_states_41_dt_i4_0_phi_temp;
end
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44)) */
begin
nfa_merge_states_41_dt_i4_0 = nfa_merge_states_41_dt_i4_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_dt_i4_0_reg <= nfa_merge_states_41_dt_i4_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_dt_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_dt_i4_0_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_dt_i4_0_reg <= nfa_merge_states_41_dt_i4_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_dt_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_dt_i4_0_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_dt_i4_0_reg <= nfa_merge_states_41_dt_i4_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_dt_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_dt_i4_0_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_dt_i4_0_reg <= nfa_merge_states_41_dt_i4_0;
if (^reset !== 1'bX && ^(nfa_merge_states_41_dt_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_dt_i4_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_42 = nfa_merge_states_41_42_phi_temp;
end
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44)) */
begin
nfa_merge_states_41_42 = nfa_merge_states_41_42_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_42_reg <= nfa_merge_states_41_42;
if (^reset !== 1'bX && ^(nfa_merge_states_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_42_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_42_reg <= nfa_merge_states_41_42;
if (^reset !== 1'bX && ^(nfa_merge_states_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_42_reg"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_41_44))
begin
nfa_merge_states_41_42_reg <= nfa_merge_states_41_42;
if (^reset !== 1'bX && ^(nfa_merge_states_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_42_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %41*/
/*   %43 = icmp eq i32 %42, 0*/
begin
nfa_merge_states_41_43 = (nfa_merge_states_41_42 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %44*/
/*   %45 = add i32 %42, -1*/
begin
nfa_merge_states_44_45 = (nfa_merge_states_41_42_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %44*/
/*   %45 = add i32 %42, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
nfa_merge_states_44_45_reg <= nfa_merge_states_44_45;
if (^reset !== 1'bX && ^(nfa_merge_states_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_44_45_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %44*/
/*   %46 = getelementptr inbounds i8* %st.i5.0, i32 1*/
begin
nfa_merge_states_44_46 = (nfa_merge_states_41_st_i5_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %44*/
/*   %46 = getelementptr inbounds i8* %st.i5.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
nfa_merge_states_44_46_reg <= nfa_merge_states_44_46;
if (^reset !== 1'bX && ^(nfa_merge_states_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_44_46_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %44*/
/*   %47 = load i8* %st.i5.0, align 1*/
begin
nfa_merge_states_44_47 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %44*/
/*   %48 = getelementptr inbounds i8* %dt.i4.0, i32 1*/
begin
nfa_merge_states_44_48 = (nfa_merge_states_41_dt_i4_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %44*/
/*   %48 = getelementptr inbounds i8* %dt.i4.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
nfa_merge_states_44_48_reg <= nfa_merge_states_44_48;
if (^reset !== 1'bX && ^(nfa_merge_states_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_44_48_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.backedge*/
/*   %st.i5.0.be = phi i8* [ %46, %44 ], [ %27, %legup_memcpy_1.exit15 ]*/
begin
nfa_merge_states__backedge_st_i5_0_be = nfa_merge_states__backedge_st_i5_0_be_phi_temp;
end
end
always @(*) begin
/* nfa_merge_states: %.backedge*/
/*   %dt.i4.0.be = phi i8* [ %48, %44 ], [ %26, %legup_memcpy_1.exit15 ]*/
begin
nfa_merge_states__backedge_dt_i4_0_be = nfa_merge_states__backedge_dt_i4_0_be_phi_temp;
end
end
always @(*) begin
/* nfa_merge_states: %.backedge*/
/*   %.be = phi i32 [ %45, %44 ], [ 3, %legup_memcpy_1.exit15 ]*/
begin
nfa_merge_states__backedge__be = nfa_merge_states__backedge__be_phi_temp;
end
end
always @(*) begin
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
begin
nfa_merge_states_legup_memcpy_1_exit6_49 = bitset_end_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
nfa_merge_states_legup_memcpy_1_exit6_49_reg <= nfa_merge_states_legup_memcpy_1_exit6_49;
if (^reset !== 1'bX && ^(nfa_merge_states_legup_memcpy_1_exit6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_legup_memcpy_1_exit6_49_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_st_i8_0 = nfa_merge_states_50_st_i8_0_phi_temp;
end
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_st_i8_0 = nfa_merge_states_50_st_i8_0_phi_temp;
end
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53)) */
begin
nfa_merge_states_50_st_i8_0 = nfa_merge_states_50_st_i8_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_st_i8_0_reg <= nfa_merge_states_50_st_i8_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_st_i8_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_st_i8_0_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_st_i8_0_reg <= nfa_merge_states_50_st_i8_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_st_i8_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_st_i8_0_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_st_i8_0_reg <= nfa_merge_states_50_st_i8_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_st_i8_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_st_i8_0_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_st_i8_0_reg <= nfa_merge_states_50_st_i8_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_st_i8_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_st_i8_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_dt_i7_0 = nfa_merge_states_50_dt_i7_0_phi_temp;
end
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_dt_i7_0 = nfa_merge_states_50_dt_i7_0_phi_temp;
end
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53)) */
begin
nfa_merge_states_50_dt_i7_0 = nfa_merge_states_50_dt_i7_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_dt_i7_0_reg <= nfa_merge_states_50_dt_i7_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_dt_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_dt_i7_0_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_dt_i7_0_reg <= nfa_merge_states_50_dt_i7_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_dt_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_dt_i7_0_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_dt_i7_0_reg <= nfa_merge_states_50_dt_i7_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_dt_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_dt_i7_0_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_dt_i7_0_reg <= nfa_merge_states_50_dt_i7_0;
if (^reset !== 1'bX && ^(nfa_merge_states_50_dt_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_dt_i7_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_51 = nfa_merge_states_50_51_phi_temp;
end
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53)) */
begin
nfa_merge_states_50_51 = nfa_merge_states_50_51_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_51_reg <= nfa_merge_states_50_51;
if (^reset !== 1'bX && ^(nfa_merge_states_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_51_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_51_reg <= nfa_merge_states_50_51;
if (^reset !== 1'bX && ^(nfa_merge_states_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_51_reg"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_50_53))
begin
nfa_merge_states_50_51_reg <= nfa_merge_states_50_51;
if (^reset !== 1'bX && ^(nfa_merge_states_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_51_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %50*/
/*   %52 = icmp eq i32 %51, 0*/
begin
nfa_merge_states_50_52 = (nfa_merge_states_50_51 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %53*/
/*   %54 = add i32 %51, -1*/
begin
nfa_merge_states_53_54 = (nfa_merge_states_50_51_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %53*/
/*   %54 = add i32 %51, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
nfa_merge_states_53_54_reg <= nfa_merge_states_53_54;
if (^reset !== 1'bX && ^(nfa_merge_states_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_53_54_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %53*/
/*   %55 = getelementptr inbounds i8* %st.i8.0, i32 1*/
begin
nfa_merge_states_53_55 = (nfa_merge_states_50_st_i8_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %53*/
/*   %55 = getelementptr inbounds i8* %st.i8.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
nfa_merge_states_53_55_reg <= nfa_merge_states_53_55;
if (^reset !== 1'bX && ^(nfa_merge_states_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_53_55_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %53*/
/*   %56 = load i8* %st.i8.0, align 1*/
begin
nfa_merge_states_53_56 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %53*/
/*   %57 = getelementptr inbounds i8* %dt.i7.0, i32 1*/
begin
nfa_merge_states_53_57 = (nfa_merge_states_50_dt_i7_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %53*/
/*   %57 = getelementptr inbounds i8* %dt.i7.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
nfa_merge_states_53_57_reg <= nfa_merge_states_53_57;
if (^reset !== 1'bX && ^(nfa_merge_states_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_53_57_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
begin
nfa_merge_states_legup_memcpy_1_exit9_58 = bitset_element_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
nfa_merge_states_legup_memcpy_1_exit9_58_reg <= nfa_merge_states_legup_memcpy_1_exit9_58;
if (^reset !== 1'bX && ^(nfa_merge_states_legup_memcpy_1_exit9_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_legup_memcpy_1_exit9_58_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_st_i11_0 = nfa_merge_states_59_st_i11_0_phi_temp;
end
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_st_i11_0 = nfa_merge_states_59_st_i11_0_phi_temp;
end
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62)) */
begin
nfa_merge_states_59_st_i11_0 = nfa_merge_states_59_st_i11_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_st_i11_0_reg <= nfa_merge_states_59_st_i11_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_st_i11_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_st_i11_0_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_st_i11_0_reg <= nfa_merge_states_59_st_i11_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_st_i11_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_st_i11_0_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_st_i11_0_reg <= nfa_merge_states_59_st_i11_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_st_i11_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_st_i11_0_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_st_i11_0_reg <= nfa_merge_states_59_st_i11_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_st_i11_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_st_i11_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_dt_i10_0 = nfa_merge_states_59_dt_i10_0_phi_temp;
end
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_dt_i10_0 = nfa_merge_states_59_dt_i10_0_phi_temp;
end
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62)) */
begin
nfa_merge_states_59_dt_i10_0 = nfa_merge_states_59_dt_i10_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_dt_i10_0_reg <= nfa_merge_states_59_dt_i10_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_dt_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_dt_i10_0_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_dt_i10_0_reg <= nfa_merge_states_59_dt_i10_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_dt_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_dt_i10_0_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_dt_i10_0_reg <= nfa_merge_states_59_dt_i10_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_dt_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_dt_i10_0_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_dt_i10_0_reg <= nfa_merge_states_59_dt_i10_0;
if (^reset !== 1'bX && ^(nfa_merge_states_59_dt_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_dt_i10_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_60 = nfa_merge_states_59_60_phi_temp;
end
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62)) */
begin
nfa_merge_states_59_60 = nfa_merge_states_59_60_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_60_reg <= nfa_merge_states_59_60;
if (^reset !== 1'bX && ^(nfa_merge_states_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_60_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_60_reg <= nfa_merge_states_59_60;
if (^reset !== 1'bX && ^(nfa_merge_states_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_60_reg"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_59_62))
begin
nfa_merge_states_59_60_reg <= nfa_merge_states_59_60;
if (^reset !== 1'bX && ^(nfa_merge_states_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_60_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %59*/
/*   %61 = icmp eq i32 %60, 0*/
begin
nfa_merge_states_59_61 = (nfa_merge_states_59_60 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %62*/
/*   %63 = add i32 %60, -1*/
begin
nfa_merge_states_62_63 = (nfa_merge_states_59_60_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %62*/
/*   %63 = add i32 %60, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
nfa_merge_states_62_63_reg <= nfa_merge_states_62_63;
if (^reset !== 1'bX && ^(nfa_merge_states_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_62_63_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %62*/
/*   %64 = getelementptr inbounds i8* %st.i11.0, i32 1*/
begin
nfa_merge_states_62_64 = (nfa_merge_states_59_st_i11_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %62*/
/*   %64 = getelementptr inbounds i8* %st.i11.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
nfa_merge_states_62_64_reg <= nfa_merge_states_62_64;
if (^reset !== 1'bX && ^(nfa_merge_states_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_62_64_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %62*/
/*   %65 = load i8* %st.i11.0, align 1*/
begin
nfa_merge_states_62_65 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %62*/
/*   %66 = getelementptr inbounds i8* %dt.i10.0, i32 1*/
begin
nfa_merge_states_62_66 = (nfa_merge_states_59_dt_i10_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %62*/
/*   %66 = getelementptr inbounds i8* %dt.i10.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
nfa_merge_states_62_66_reg <= nfa_merge_states_62_66;
if (^reset !== 1'bX && ^(nfa_merge_states_62_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_62_66_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
begin
nfa_merge_states_67_68 = bitset_element_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
nfa_merge_states_67_68_reg <= nfa_merge_states_67_68;
if (^reset !== 1'bX && ^(nfa_merge_states_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_67_68_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_st_i14_0 = nfa_merge_states_69_st_i14_0_phi_temp;
end
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_st_i14_0 = nfa_merge_states_69_st_i14_0_phi_temp;
end
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71)) */
begin
nfa_merge_states_69_st_i14_0 = nfa_merge_states_69_st_i14_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_st_i14_0_reg <= nfa_merge_states_69_st_i14_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_st_i14_0_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_st_i14_0_reg <= nfa_merge_states_69_st_i14_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_st_i14_0_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_st_i14_0_reg <= nfa_merge_states_69_st_i14_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_st_i14_0_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_st_i14_0_reg <= nfa_merge_states_69_st_i14_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_st_i14_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_dt_i13_0 = nfa_merge_states_69_dt_i13_0_phi_temp;
end
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_dt_i13_0 = nfa_merge_states_69_dt_i13_0_phi_temp;
end
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71)) */
begin
nfa_merge_states_69_dt_i13_0 = nfa_merge_states_69_dt_i13_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_dt_i13_0_reg <= nfa_merge_states_69_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_dt_i13_0_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_dt_i13_0_reg <= nfa_merge_states_69_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_dt_i13_0_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_dt_i13_0_reg <= nfa_merge_states_69_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_dt_i13_0_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_dt_i13_0_reg <= nfa_merge_states_69_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_merge_states_69_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_dt_i13_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_70 = nfa_merge_states_69_70_phi_temp;
end
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71)) */
begin
nfa_merge_states_69_70 = nfa_merge_states_69_70_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_70_reg <= nfa_merge_states_69_70;
if (^reset !== 1'bX && ^(nfa_merge_states_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_70_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_70_reg <= nfa_merge_states_69_70;
if (^reset !== 1'bX && ^(nfa_merge_states_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_70_reg"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_69_71))
begin
nfa_merge_states_69_70_reg <= nfa_merge_states_69_70;
if (^reset !== 1'bX && ^(nfa_merge_states_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_70_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %69*/
/*   %71 = icmp eq i32 %70, 0*/
begin
nfa_merge_states_69_71 = (nfa_merge_states_69_70 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %72*/
/*   %73 = add i32 %70, -1*/
begin
nfa_merge_states_72_73 = (nfa_merge_states_69_70_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %72*/
/*   %73 = add i32 %70, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
nfa_merge_states_72_73_reg <= nfa_merge_states_72_73;
if (^reset !== 1'bX && ^(nfa_merge_states_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_72_73_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %72*/
/*   %74 = getelementptr inbounds i8* %st.i14.0, i32 1*/
begin
nfa_merge_states_72_74 = (nfa_merge_states_69_st_i14_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %72*/
/*   %74 = getelementptr inbounds i8* %st.i14.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
nfa_merge_states_72_74_reg <= nfa_merge_states_72_74;
if (^reset !== 1'bX && ^(nfa_merge_states_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_72_74_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %72*/
/*   %75 = load i8* %st.i14.0, align 1*/
begin
nfa_merge_states_72_75 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %72*/
/*   %76 = getelementptr inbounds i8* %dt.i13.0, i32 1*/
begin
nfa_merge_states_72_76 = (nfa_merge_states_69_dt_i13_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %72*/
/*   %76 = getelementptr inbounds i8* %dt.i13.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
nfa_merge_states_72_76_reg <= nfa_merge_states_72_76;
if (^reset !== 1'bX && ^(nfa_merge_states_72_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_72_76_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_st_i17_0 = nfa_merge_states_78_st_i17_0_phi_temp;
end
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_st_i17_0 = nfa_merge_states_78_st_i17_0_phi_temp;
end
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83)) */
begin
nfa_merge_states_78_st_i17_0 = nfa_merge_states_78_st_i17_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_st_i17_0_reg <= nfa_merge_states_78_st_i17_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_st_i17_0_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_st_i17_0_reg <= nfa_merge_states_78_st_i17_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_st_i17_0_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_st_i17_0_reg <= nfa_merge_states_78_st_i17_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_st_i17_0_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_st_i17_0_reg <= nfa_merge_states_78_st_i17_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_st_i17_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_dt_i16_0 = nfa_merge_states_78_dt_i16_0_phi_temp;
end
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_dt_i16_0 = nfa_merge_states_78_dt_i16_0_phi_temp;
end
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83)) */
begin
nfa_merge_states_78_dt_i16_0 = nfa_merge_states_78_dt_i16_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_dt_i16_0_reg <= nfa_merge_states_78_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_dt_i16_0_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_dt_i16_0_reg <= nfa_merge_states_78_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_dt_i16_0_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_dt_i16_0_reg <= nfa_merge_states_78_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_dt_i16_0_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_dt_i16_0_reg <= nfa_merge_states_78_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_merge_states_78_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_dt_i16_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_79 = nfa_merge_states_78_79_phi_temp;
end
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83)) */
begin
nfa_merge_states_78_79 = nfa_merge_states_78_79_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_79_reg <= nfa_merge_states_78_79;
if (^reset !== 1'bX && ^(nfa_merge_states_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_79_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_79_reg <= nfa_merge_states_78_79;
if (^reset !== 1'bX && ^(nfa_merge_states_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_79_reg"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_78_83))
begin
nfa_merge_states_78_79_reg <= nfa_merge_states_78_79;
if (^reset !== 1'bX && ^(nfa_merge_states_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_79_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %78*/
/*   %80 = icmp eq i32 %79, 0*/
begin
nfa_merge_states_78_80 = (nfa_merge_states_78_79 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %81*/
/*   %82 = add i32 %79, -1*/
begin
nfa_merge_states_81_82 = (nfa_merge_states_78_79_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %81*/
/*   %82 = add i32 %79, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
nfa_merge_states_81_82_reg <= nfa_merge_states_81_82;
if (^reset !== 1'bX && ^(nfa_merge_states_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_81_82_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %81*/
/*   %83 = getelementptr inbounds i8* %st.i17.0, i32 1*/
begin
nfa_merge_states_81_83 = (nfa_merge_states_78_st_i17_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %81*/
/*   %83 = getelementptr inbounds i8* %st.i17.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
nfa_merge_states_81_83_reg <= nfa_merge_states_81_83;
if (^reset !== 1'bX && ^(nfa_merge_states_81_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_81_83_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %81*/
/*   %84 = load i8* %st.i17.0, align 1*/
begin
nfa_merge_states_81_84 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %81*/
/*   %85 = getelementptr inbounds i8* %dt.i16.0, i32 1*/
begin
nfa_merge_states_81_85 = (nfa_merge_states_78_dt_i16_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %81*/
/*   %85 = getelementptr inbounds i8* %dt.i16.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
nfa_merge_states_81_85_reg <= nfa_merge_states_81_85;
if (^reset !== 1'bX && ^(nfa_merge_states_81_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_81_85_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %.backedge3*/
/*   %st.i17.0.be = phi i8* [ %83, %81 ], [ %32, %legup_memcpy_1.exit ]*/
begin
nfa_merge_states__backedge3_st_i17_0_be = nfa_merge_states__backedge3_st_i17_0_be_phi_temp;
end
end
always @(*) begin
/* nfa_merge_states: %.backedge3*/
/*   %dt.i16.0.be = phi i8* [ %85, %81 ], [ %31, %legup_memcpy_1.exit ]*/
begin
nfa_merge_states__backedge3_dt_i16_0_be = nfa_merge_states__backedge3_dt_i16_0_be_phi_temp;
end
end
always @(*) begin
/* nfa_merge_states: %.backedge3*/
/*   %.be4 = phi i32 [ %82, %81 ], [ 3, %legup_memcpy_1.exit ]*/
begin
nfa_merge_states__backedge3__be4 = nfa_merge_states__backedge3__be4_phi_temp;
end
end
always @(*) begin
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
begin
nfa_merge_states_legup_memcpy_1_exit18_86 = bitset_end_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
nfa_merge_states_legup_memcpy_1_exit18_86_reg <= nfa_merge_states_legup_memcpy_1_exit18_86;
if (^reset !== 1'bX && ^(nfa_merge_states_legup_memcpy_1_exit18_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_legup_memcpy_1_exit18_86_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_st_i20_0 = nfa_merge_states_87_st_i20_0_phi_temp;
end
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_st_i20_0 = nfa_merge_states_87_st_i20_0_phi_temp;
end
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92)) */
begin
nfa_merge_states_87_st_i20_0 = nfa_merge_states_87_st_i20_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_st_i20_0_reg <= nfa_merge_states_87_st_i20_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_st_i20_0_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_st_i20_0_reg <= nfa_merge_states_87_st_i20_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_st_i20_0_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_st_i20_0_reg <= nfa_merge_states_87_st_i20_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_st_i20_0_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_st_i20_0_reg <= nfa_merge_states_87_st_i20_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_st_i20_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_dt_i19_0 = nfa_merge_states_87_dt_i19_0_phi_temp;
end
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_dt_i19_0 = nfa_merge_states_87_dt_i19_0_phi_temp;
end
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92)) */
begin
nfa_merge_states_87_dt_i19_0 = nfa_merge_states_87_dt_i19_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_dt_i19_0_reg <= nfa_merge_states_87_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_dt_i19_0_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_dt_i19_0_reg <= nfa_merge_states_87_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_dt_i19_0_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_dt_i19_0_reg <= nfa_merge_states_87_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_dt_i19_0_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_dt_i19_0_reg <= nfa_merge_states_87_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_merge_states_87_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_dt_i19_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_88 = nfa_merge_states_87_88_phi_temp;
end
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92)) */
begin
nfa_merge_states_87_88 = nfa_merge_states_87_88_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_88_reg <= nfa_merge_states_87_88;
if (^reset !== 1'bX && ^(nfa_merge_states_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_88_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_88_reg <= nfa_merge_states_87_88;
if (^reset !== 1'bX && ^(nfa_merge_states_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_88_reg"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_87_92))
begin
nfa_merge_states_87_88_reg <= nfa_merge_states_87_88;
if (^reset !== 1'bX && ^(nfa_merge_states_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_88_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %87*/
/*   %89 = icmp eq i32 %88, 0*/
begin
nfa_merge_states_87_89 = (nfa_merge_states_87_88 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %90*/
/*   %91 = add i32 %88, -1*/
begin
nfa_merge_states_90_91 = (nfa_merge_states_87_88_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %90*/
/*   %91 = add i32 %88, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
nfa_merge_states_90_91_reg <= nfa_merge_states_90_91;
if (^reset !== 1'bX && ^(nfa_merge_states_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_90_91_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %90*/
/*   %92 = getelementptr inbounds i8* %st.i20.0, i32 1*/
begin
nfa_merge_states_90_92 = (nfa_merge_states_87_st_i20_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %90*/
/*   %92 = getelementptr inbounds i8* %st.i20.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
nfa_merge_states_90_92_reg <= nfa_merge_states_90_92;
if (^reset !== 1'bX && ^(nfa_merge_states_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_90_92_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %90*/
/*   %93 = load i8* %st.i20.0, align 1*/
begin
nfa_merge_states_90_93 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %90*/
/*   %94 = getelementptr inbounds i8* %dt.i19.0, i32 1*/
begin
nfa_merge_states_90_94 = (nfa_merge_states_87_dt_i19_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %90*/
/*   %94 = getelementptr inbounds i8* %dt.i19.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
nfa_merge_states_90_94_reg <= nfa_merge_states_90_94;
if (^reset !== 1'bX && ^(nfa_merge_states_90_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_90_94_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
begin
nfa_merge_states_legup_memcpy_1_exit21_95 = bitset_element_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
nfa_merge_states_legup_memcpy_1_exit21_95_reg <= nfa_merge_states_legup_memcpy_1_exit21_95;
if (^reset !== 1'bX && ^(nfa_merge_states_legup_memcpy_1_exit21_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_legup_memcpy_1_exit21_95_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_dt_i1_0 = nfa_merge_states_96_dt_i1_0_phi_temp;
end
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_dt_i1_0 = nfa_merge_states_96_dt_i1_0_phi_temp;
end
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101)) */
begin
nfa_merge_states_96_dt_i1_0 = nfa_merge_states_96_dt_i1_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_dt_i1_0_reg <= nfa_merge_states_96_dt_i1_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_dt_i1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_dt_i1_0_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_dt_i1_0_reg <= nfa_merge_states_96_dt_i1_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_dt_i1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_dt_i1_0_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_dt_i1_0_reg <= nfa_merge_states_96_dt_i1_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_dt_i1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_dt_i1_0_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_dt_i1_0_reg <= nfa_merge_states_96_dt_i1_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_dt_i1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_dt_i1_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_st_i2_0 = nfa_merge_states_96_st_i2_0_phi_temp;
end
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_st_i2_0 = nfa_merge_states_96_st_i2_0_phi_temp;
end
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101)) */
begin
nfa_merge_states_96_st_i2_0 = nfa_merge_states_96_st_i2_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_st_i2_0_reg <= nfa_merge_states_96_st_i2_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_st_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_st_i2_0_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_st_i2_0_reg <= nfa_merge_states_96_st_i2_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_st_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_st_i2_0_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_st_i2_0_reg <= nfa_merge_states_96_st_i2_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_st_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_st_i2_0_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_st_i2_0_reg <= nfa_merge_states_96_st_i2_0;
if (^reset !== 1'bX && ^(nfa_merge_states_96_st_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_st_i2_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_97 = nfa_merge_states_96_97_phi_temp;
end
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101)) */
begin
nfa_merge_states_96_97 = nfa_merge_states_96_97_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_97_reg <= nfa_merge_states_96_97;
if (^reset !== 1'bX && ^(nfa_merge_states_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_97_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_97_reg <= nfa_merge_states_96_97;
if (^reset !== 1'bX && ^(nfa_merge_states_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_97_reg"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_96_101))
begin
nfa_merge_states_96_97_reg <= nfa_merge_states_96_97;
if (^reset !== 1'bX && ^(nfa_merge_states_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_97_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %96*/
/*   %98 = icmp eq i32 %97, 0*/
begin
nfa_merge_states_96_98 = (nfa_merge_states_96_97 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %99*/
/*   %100 = add i32 %97, -1*/
begin
nfa_merge_states_99_100 = (nfa_merge_states_96_97_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %99*/
/*   %100 = add i32 %97, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
nfa_merge_states_99_100_reg <= nfa_merge_states_99_100;
if (^reset !== 1'bX && ^(nfa_merge_states_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_99_100_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %99*/
/*   %101 = getelementptr inbounds i8* %st.i2.0, i32 1*/
begin
nfa_merge_states_99_101 = (nfa_merge_states_96_st_i2_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %99*/
/*   %101 = getelementptr inbounds i8* %st.i2.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
nfa_merge_states_99_101_reg <= nfa_merge_states_99_101;
if (^reset !== 1'bX && ^(nfa_merge_states_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_99_101_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %99*/
/*   %102 = load i8* %st.i2.0, align 1*/
begin
nfa_merge_states_99_102 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %99*/
/*   %103 = getelementptr inbounds i8* %dt.i1.0, i32 1*/
begin
nfa_merge_states_99_103 = (nfa_merge_states_96_dt_i1_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %99*/
/*   %103 = getelementptr inbounds i8* %dt.i1.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
nfa_merge_states_99_103_reg <= nfa_merge_states_99_103;
if (^reset !== 1'bX && ^(nfa_merge_states_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_99_103_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
begin
nfa_merge_states_104_105 = bitset_element_return_val;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
nfa_merge_states_104_105_reg <= nfa_merge_states_104_105;
if (^reset !== 1'bX && ^(nfa_merge_states_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_104_105_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_dt_i_0 = nfa_merge_states_106_dt_i_0_phi_temp;
end
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_dt_i_0 = nfa_merge_states_106_dt_i_0_phi_temp;
end
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110)) */
begin
nfa_merge_states_106_dt_i_0 = nfa_merge_states_106_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_dt_i_0_reg <= nfa_merge_states_106_dt_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_dt_i_0_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_dt_i_0_reg <= nfa_merge_states_106_dt_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_dt_i_0_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_dt_i_0_reg <= nfa_merge_states_106_dt_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_dt_i_0_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_dt_i_0_reg <= nfa_merge_states_106_dt_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_st_i_0 = nfa_merge_states_106_st_i_0_phi_temp;
end
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
else if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_st_i_0 = nfa_merge_states_106_st_i_0_phi_temp;
end
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110)) */
begin
nfa_merge_states_106_st_i_0 = nfa_merge_states_106_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_st_i_0_reg <= nfa_merge_states_106_st_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_st_i_0_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_st_i_0_reg <= nfa_merge_states_106_st_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_st_i_0_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_st_i_0_reg <= nfa_merge_states_106_st_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_st_i_0_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_st_i_0_reg <= nfa_merge_states_106_st_i_0;
if (^reset !== 1'bX && ^(nfa_merge_states_106_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_107 = nfa_merge_states_106_107_phi_temp;
end
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
else /* if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110)) */
begin
nfa_merge_states_106_107 = nfa_merge_states_106_107_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_107_reg <= nfa_merge_states_106_107;
if (^reset !== 1'bX && ^(nfa_merge_states_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_107_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_107_reg <= nfa_merge_states_106_107;
if (^reset !== 1'bX && ^(nfa_merge_states_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_107_reg"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_106_110))
begin
nfa_merge_states_106_107_reg <= nfa_merge_states_106_107;
if (^reset !== 1'bX && ^(nfa_merge_states_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_107_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %106*/
/*   %108 = icmp eq i32 %107, 0*/
begin
nfa_merge_states_106_108 = (nfa_merge_states_106_107 == 32'd0);
end
end
always @(*) begin
/* nfa_merge_states: %109*/
/*   %110 = add i32 %107, -1*/
begin
nfa_merge_states_109_110 = (nfa_merge_states_106_107_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %109*/
/*   %110 = add i32 %107, -1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
nfa_merge_states_109_110_reg <= nfa_merge_states_109_110;
if (^reset !== 1'bX && ^(nfa_merge_states_109_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_109_110_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %109*/
/*   %111 = getelementptr inbounds i8* %st.i.0, i32 1*/
begin
nfa_merge_states_109_111 = (nfa_merge_states_106_st_i_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %109*/
/*   %111 = getelementptr inbounds i8* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
nfa_merge_states_109_111_reg <= nfa_merge_states_109_111;
if (^reset !== 1'bX && ^(nfa_merge_states_109_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_109_111_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %109*/
/*   %112 = load i8* %st.i.0, align 1*/
begin
nfa_merge_states_109_112 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_merge_states: %109*/
/*   %113 = getelementptr inbounds i8* %dt.i.0, i32 1*/
begin
nfa_merge_states_109_113 = (nfa_merge_states_106_dt_i_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_merge_states: %109*/
/*   %113 = getelementptr inbounds i8* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
nfa_merge_states_109_113_reg <= nfa_merge_states_109_113;
if (^reset !== 1'bX && ^(nfa_merge_states_109_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_109_113_reg"); $finish; end
end
end
always @(*) begin
/* nfa_merge_states: %114*/
/*   %115 = add i8 %storemerge, 1*/
begin
nfa_merge_states_114_115 = (nfa_merge_states_36_storemerge_reg + 8'd1);
end
end
always @(posedge clk) begin
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_16_2))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_19_6))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_16_2))
begin
__assert_fail_arg_0 <= `TAG_g__str7_a;
if (^reset !== 1'bX && ^(`TAG_g__str7_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_19_6))
begin
__assert_fail_arg_0 <= `TAG_g__str8_a;
if (^reset !== 1'bX && ^(`TAG_g__str8_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_16_2))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_19_6))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_16_2))
begin
__assert_fail_arg_2 <= 32'd178;
if (^reset !== 1'bX && ^(32'd178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_19_6))
begin
__assert_fail_arg_2 <= 32'd179;
if (^reset !== 1'bX && ^(32'd179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_16_2))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_merge_states_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_merge_states_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_19_6))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_merge_states_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_merge_states_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11))
begin
bitset_contains_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
bitset_contains_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24))
begin
bitset_contains_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
bitset_contains_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11))
begin
bitset_contains_arg_0 <= nfa_merge_states_nfa_is_initial_exit_20_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_20_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_0"); $finish; end
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24))
begin
bitset_contains_arg_0 <= nfa_merge_states_nfa_is_final_exit_23_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_final_exit_23_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_11))
begin
bitset_contains_arg_1 <= nfa_merge_states_nfa_is_initial_exit_21_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_21_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_1"); $finish; end
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_24))
begin
bitset_contains_arg_1 <= nfa_merge_states_nfa_is_initial_exit_21_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_21_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_1"); $finish; end
end
end
always @(*) begin
bitset_contains_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
bitset_contains_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
bitset_contains_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_contains_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
bitset_contains_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
bitset_contains_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_contains_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
bitset_contains_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
bitset_contains_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16))
begin
bitset_add_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_add_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29))
begin
bitset_add_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
bitset_add_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16))
begin
bitset_add_arg_0 <= nfa_merge_states_nfa_is_initial_exit_20_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_20_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_0"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29))
begin
bitset_add_arg_0 <= nfa_merge_states_nfa_is_final_exit_23_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_final_exit_23_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_16))
begin
bitset_add_arg_1 <= arg_q1;
if (^reset !== 1'bX && ^(arg_q1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_1"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_29))
begin
bitset_add_arg_1 <= arg_q1;
if (^reset !== 1'bX && ^(arg_q1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_add_arg_1"); $finish; end
end
end
always @(*) begin
bitset_add_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_add_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
bitset_add_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_add_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_add_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
bitset_add_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_add_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_add_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
bitset_add_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19))
begin
bitset_remove_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32))
begin
bitset_remove_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
bitset_remove_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19))
begin
bitset_remove_arg_0 <= nfa_merge_states_nfa_is_initial_exit_20_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_initial_exit_20_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_0"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32))
begin
bitset_remove_arg_0 <= nfa_merge_states_nfa_is_final_exit_23_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_nfa_is_final_exit_23_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_19))
begin
bitset_remove_arg_1 <= arg_q2;
if (^reset !== 1'bX && ^(arg_q2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_1"); $finish; end
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_32))
begin
bitset_remove_arg_1 <= arg_q2;
if (^reset !== 1'bX && ^(arg_q2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_remove_arg_1"); $finish; end
end
end
always @(*) begin
bitset_remove_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
bitset_remove_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_remove_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
bitset_remove_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_remove_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_remove_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
bitset_remove_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_39))
begin
nfa_get_predecessors_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_start"); $finish; end
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
nfa_get_predecessors_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_39))
begin
nfa_get_predecessors_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_39))
begin
nfa_get_predecessors_arg_state <= arg_q2;
if (^reset !== 1'bX && ^(arg_q2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_arg_state"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader_35) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_36_storemerge_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_phi_temp"); $finish; end
end
/* nfa_merge_states: %36*/
/*   %storemerge = phi i8 [ %115, %114 ], [ 0, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_114_117) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_36_storemerge_phi_temp <= nfa_merge_states_114_115;
if (^reset !== 1'bX && ^(nfa_merge_states_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_36_storemerge_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_39))
begin
nfa_get_predecessors_arg_sym <= nfa_merge_states_36_storemerge_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_arg_sym"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_39))
begin
nfa_get_predecessors_arg_bs <= `TAG_nfa_merge_states_0_bs_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_bs_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_predecessors_arg_bs"); $finish; end
end
end
always @(*) begin
nfa_get_predecessors_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
nfa_get_predecessors_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_get_predecessors_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
nfa_get_predecessors_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_get_predecessors_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
nfa_get_predecessors_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_41))
begin
bitset_first_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_first_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_80))
begin
bitset_first_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
bitset_first_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_41))
begin
bitset_first_arg_0 <= `TAG_nfa_merge_states_0_i_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_i_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_0"); $finish; end
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_80))
begin
bitset_first_arg_0 <= `TAG_nfa_merge_states_0_i1_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_i1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_40_41))
begin
bitset_first_arg_1 <= `TAG_nfa_merge_states_0_bs_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_bs_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_1"); $finish; end
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_80))
begin
bitset_first_arg_1 <= `TAG_nfa_merge_states_0_bs_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_bs_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_1"); $finish; end
end
end
always @(*) begin
bitset_first_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_first_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
bitset_first_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_first_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_first_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
bitset_first_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_first_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_first_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
bitset_first_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49))
begin
bitset_end_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
bitset_end_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88))
begin
bitset_end_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
bitset_end_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit6_49))
begin
bitset_end_arg_0 <= `TAG_nfa_merge_states_0_7_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_7_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_arg_0"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit18_88))
begin
bitset_end_arg_0 <= `TAG_nfa_merge_states_0_11_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_11_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_arg_0"); $finish; end
end
end
always @(*) begin
bitset_end_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
bitset_end_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
bitset_end_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_end_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
bitset_end_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
bitset_end_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_end_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
bitset_end_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
bitset_end_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57))
begin
bitset_element_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
bitset_element_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_66))
begin
bitset_element_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_element_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96))
begin
bitset_element_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
bitset_element_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_105))
begin
bitset_element_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
bitset_element_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_57))
begin
bitset_element_arg_0 <= `TAG_nfa_merge_states_0_8_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_8_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_arg_0"); $finish; end
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_66))
begin
bitset_element_arg_0 <= `TAG_nfa_merge_states_0_9_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_9_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_arg_0"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_96))
begin
bitset_element_arg_0 <= `TAG_nfa_merge_states_0_12_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_12_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_arg_0"); $finish; end
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_105))
begin
bitset_element_arg_0 <= `TAG_nfa_merge_states_0_13_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_13_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_arg_0"); $finish; end
end
end
always @(*) begin
bitset_element_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
bitset_element_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_element_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
bitset_element_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
bitset_element_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_element_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
bitset_element_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_element_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
bitset_element_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
bitset_element_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_element_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
bitset_element_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_element_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
bitset_element_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
bitset_element_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59))
begin
nfa_add_transition_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
nfa_add_transition_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98))
begin
nfa_add_transition_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
nfa_add_transition_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59))
begin
nfa_add_transition_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_nfa"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98))
begin
nfa_add_transition_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59))
begin
nfa_add_transition_arg_q0 <= nfa_merge_states_legup_memcpy_1_exit9_58_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_legup_memcpy_1_exit9_58_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_q0"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98))
begin
nfa_add_transition_arg_q0 <= arg_q1;
if (^reset !== 1'bX && ^(arg_q1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_q0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59))
begin
nfa_add_transition_arg_q1 <= arg_q1;
if (^reset !== 1'bX && ^(arg_q1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_q1"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98))
begin
nfa_add_transition_arg_q1 <= nfa_merge_states_legup_memcpy_1_exit21_95_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_legup_memcpy_1_exit21_95_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_q1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_59))
begin
nfa_add_transition_arg_a <= nfa_merge_states_36_storemerge_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_a"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_98))
begin
nfa_add_transition_arg_a <= nfa_merge_states_36_storemerge_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_add_transition_arg_a"); $finish; end
end
end
always @(*) begin
nfa_add_transition_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
nfa_add_transition_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
nfa_add_transition_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_add_transition_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
nfa_add_transition_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
nfa_add_transition_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_add_transition_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
nfa_add_transition_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
nfa_add_transition_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_68))
begin
nfa_remove_transition_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_start"); $finish; end
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
nfa_remove_transition_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_start"); $finish; end
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_107))
begin
nfa_remove_transition_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_start"); $finish; end
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
nfa_remove_transition_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_68))
begin
nfa_remove_transition_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_nfa"); $finish; end
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_107))
begin
nfa_remove_transition_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_68))
begin
nfa_remove_transition_arg_q0 <= nfa_merge_states_67_68_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_67_68_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_q0"); $finish; end
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_107))
begin
nfa_remove_transition_arg_q0 <= arg_q2;
if (^reset !== 1'bX && ^(arg_q2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_q0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_68))
begin
nfa_remove_transition_arg_q1 <= arg_q2;
if (^reset !== 1'bX && ^(arg_q2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_q1"); $finish; end
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_107))
begin
nfa_remove_transition_arg_q1 <= nfa_merge_states_104_105_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_104_105_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_q1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_67_68))
begin
nfa_remove_transition_arg_a <= nfa_merge_states_36_storemerge_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_a"); $finish; end
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_104_107))
begin
nfa_remove_transition_arg_a <= nfa_merge_states_36_storemerge_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_remove_transition_arg_a"); $finish; end
end
end
always @(*) begin
nfa_remove_transition_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
nfa_remove_transition_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
nfa_remove_transition_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_remove_transition_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
nfa_remove_transition_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
nfa_remove_transition_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_remove_transition_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
nfa_remove_transition_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
nfa_remove_transition_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75))
begin
bitset_next_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
bitset_next_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114))
begin
bitset_next_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
bitset_next_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75))
begin
bitset_next_arg_0 <= `TAG_nfa_merge_states_0_i_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_i_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_0"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114))
begin
bitset_next_arg_0 <= `TAG_nfa_merge_states_0_i1_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_i1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75))
begin
bitset_next_arg_1 <= `TAG_nfa_merge_states_0_bs_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_bs_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_1"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114))
begin
bitset_next_arg_1 <= `TAG_nfa_merge_states_0_bs_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_bs_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_75))
begin
bitset_next_arg_2 <= `TAG_nfa_merge_states_0_10_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_10_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_2"); $finish; end
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_114))
begin
bitset_next_arg_2 <= `TAG_nfa_merge_states_0_14_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_14_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_2"); $finish; end
end
end
always @(*) begin
bitset_next_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
bitset_next_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
bitset_next_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_next_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
bitset_next_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
bitset_next_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_next_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
bitset_next_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
bitset_next_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_78))
begin
nfa_get_sucessors_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
nfa_get_sucessors_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_78))
begin
nfa_get_sucessors_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_78))
begin
nfa_get_sucessors_arg_state <= arg_q2;
if (^reset !== 1'bX && ^(arg_q2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_state"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_78))
begin
nfa_get_sucessors_arg_sym <= nfa_merge_states_36_storemerge_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_36_storemerge_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_sym"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_77_78))
begin
nfa_get_sucessors_arg_bs <= `TAG_nfa_merge_states_0_bs_a;
if (^reset !== 1'bX && ^(`TAG_nfa_merge_states_0_bs_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_bs"); $finish; end
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_waitrequest = 1'd0;
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
nfa_get_sucessors_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_out_a = 1'd0;
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
nfa_get_sucessors_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_out_b = 1'd0;
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
nfa_get_sucessors_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_41_st_i5_0_phi_temp <= nfa_merge_states__preheader_27_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_st_i5_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %st.i5.0 = phi i8* [ %27, %40 ], [ %st.i5.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge_48) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_41_st_i5_0_phi_temp <= nfa_merge_states__backedge_st_i5_0_be;
if (^reset !== 1'bX && ^(nfa_merge_states__backedge_st_i5_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_st_i5_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_41_dt_i4_0_phi_temp <= nfa_merge_states__preheader_26_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_26_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_dt_i4_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %dt.i4.0 = phi i8* [ %26, %40 ], [ %dt.i4.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge_48) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_41_dt_i4_0_phi_temp <= nfa_merge_states__backedge_dt_i4_0_be;
if (^reset !== 1'bX && ^(nfa_merge_states__backedge_dt_i4_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_dt_i4_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_40_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_41_42_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_42_phi_temp"); $finish; end
end
/* nfa_merge_states: %41*/
/*   %42 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge_48) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_41_42_phi_temp <= nfa_merge_states__backedge__be;
if (^reset !== 1'bX && ^(nfa_merge_states__backedge__be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_41_42_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.backedge*/
/*   %st.i5.0.be = phi i8* [ %46, %44 ], [ %27, %legup_memcpy_1.exit15 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_47) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge_st_i5_0_be_phi_temp <= nfa_merge_states_44_46_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_44_46_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge_st_i5_0_be_phi_temp"); $finish; end
end
/* nfa_merge_states: %.backedge*/
/*   %st.i5.0.be = phi i8* [ %46, %44 ], [ %27, %legup_memcpy_1.exit15 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge_st_i5_0_be_phi_temp <= nfa_merge_states__preheader_27_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge_st_i5_0_be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.backedge*/
/*   %dt.i4.0.be = phi i8* [ %48, %44 ], [ %26, %legup_memcpy_1.exit15 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_47) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge_dt_i4_0_be_phi_temp <= nfa_merge_states_44_48_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_44_48_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge_dt_i4_0_be_phi_temp"); $finish; end
end
/* nfa_merge_states: %.backedge*/
/*   %dt.i4.0.be = phi i8* [ %48, %44 ], [ %26, %legup_memcpy_1.exit15 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge_dt_i4_0_be_phi_temp <= nfa_merge_states__preheader_26_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_26_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge_dt_i4_0_be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.backedge*/
/*   %.be = phi i32 [ %45, %44 ], [ 3, %legup_memcpy_1.exit15 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_44_47) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge__be_phi_temp <= nfa_merge_states_44_45_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_44_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge__be_phi_temp"); $finish; end
end
/* nfa_merge_states: %.backedge*/
/*   %.be = phi i32 [ %45, %44 ], [ 3, %legup_memcpy_1.exit15 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit15_77) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge__be_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge__be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader1_52) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_50_st_i8_0_phi_temp <= nfa_merge_states__preheader_27_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_st_i8_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %st.i8.0 = phi i8* [ %55, %53 ], [ %27, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_56) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_50_st_i8_0_phi_temp <= nfa_merge_states_53_55_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_53_55_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_st_i8_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader1_52) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_50_dt_i7_0_phi_temp <= nfa_merge_states__preheader_28_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_28_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_dt_i7_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %dt.i7.0 = phi i8* [ %57, %53 ], [ %28, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_56) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_50_dt_i7_0_phi_temp <= nfa_merge_states_53_57_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_53_57_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_dt_i7_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader1_52) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_50_51_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_51_phi_temp"); $finish; end
end
/* nfa_merge_states: %50*/
/*   %51 = phi i32 [ %54, %53 ], [ 3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_53_56) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_50_51_phi_temp <= nfa_merge_states_53_54_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_53_54_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_50_51_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_59_st_i11_0_phi_temp <= nfa_merge_states__preheader_27_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_st_i11_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %st.i11.0 = phi i8* [ %27, %legup_memcpy_1.exit9 ], [ %64, %62 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_59_st_i11_0_phi_temp <= nfa_merge_states_62_64_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_62_64_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_st_i11_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_59_dt_i10_0_phi_temp <= nfa_merge_states__preheader_29_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_29_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_dt_i10_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %dt.i10.0 = phi i8* [ %29, %legup_memcpy_1.exit9 ], [ %66, %62 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_59_dt_i10_0_phi_temp <= nfa_merge_states_62_66_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_62_66_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_dt_i10_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit9_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_59_60_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_60_phi_temp"); $finish; end
end
/* nfa_merge_states: %59*/
/*   %60 = phi i32 [ 3, %legup_memcpy_1.exit9 ], [ %63, %62 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_62_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_59_60_phi_temp <= nfa_merge_states_62_63_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_62_63_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_59_60_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_70) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_69_st_i14_0_phi_temp <= nfa_merge_states__preheader_27_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_st_i14_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %st.i14.0 = phi i8* [ %27, %67 ], [ %74, %72 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_74) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_69_st_i14_0_phi_temp <= nfa_merge_states_72_74_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_72_74_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_st_i14_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_70) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_69_dt_i13_0_phi_temp <= nfa_merge_states__preheader_30_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_dt_i13_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %dt.i13.0 = phi i8* [ %30, %67 ], [ %76, %72 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_74) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_69_dt_i13_0_phi_temp <= nfa_merge_states_72_76_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_72_76_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_dt_i13_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_67_70) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_69_70_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_70_phi_temp"); $finish; end
end
/* nfa_merge_states: %69*/
/*   %70 = phi i32 [ 3, %67 ], [ %73, %72 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_72_74) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_69_70_phi_temp <= nfa_merge_states_72_73_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_72_73_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_69_70_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_82) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_78_st_i17_0_phi_temp <= nfa_merge_states__preheader_32_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_st_i17_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %st.i17.0 = phi i8* [ %32, %77 ], [ %st.i17.0.be, %.backedge3 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge3_87) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_78_st_i17_0_phi_temp <= nfa_merge_states__backedge3_st_i17_0_be;
if (^reset !== 1'bX && ^(nfa_merge_states__backedge3_st_i17_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_st_i17_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_82) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_78_dt_i16_0_phi_temp <= nfa_merge_states__preheader_31_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_31_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_dt_i16_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %dt.i16.0 = phi i8* [ %31, %77 ], [ %dt.i16.0.be, %.backedge3 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge3_87) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_78_dt_i16_0_phi_temp <= nfa_merge_states__backedge3_dt_i16_0_be;
if (^reset !== 1'bX && ^(nfa_merge_states__backedge3_dt_i16_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_dt_i16_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_77_82) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_78_79_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_79_phi_temp"); $finish; end
end
/* nfa_merge_states: %78*/
/*   %79 = phi i32 [ 3, %77 ], [ %.be4, %.backedge3 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__backedge3_87) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_78_79_phi_temp <= nfa_merge_states__backedge3__be4;
if (^reset !== 1'bX && ^(nfa_merge_states__backedge3__be4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_78_79_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.backedge3*/
/*   %st.i17.0.be = phi i8* [ %83, %81 ], [ %32, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_86) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge3_st_i17_0_be_phi_temp <= nfa_merge_states_81_83_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_81_83_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge3_st_i17_0_be_phi_temp"); $finish; end
end
/* nfa_merge_states: %.backedge3*/
/*   %st.i17.0.be = phi i8* [ %83, %81 ], [ %32, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge3_st_i17_0_be_phi_temp <= nfa_merge_states__preheader_32_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge3_st_i17_0_be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.backedge3*/
/*   %dt.i16.0.be = phi i8* [ %85, %81 ], [ %31, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_86) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge3_dt_i16_0_be_phi_temp <= nfa_merge_states_81_85_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_81_85_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge3_dt_i16_0_be_phi_temp"); $finish; end
end
/* nfa_merge_states: %.backedge3*/
/*   %dt.i16.0.be = phi i8* [ %85, %81 ], [ %31, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge3_dt_i16_0_be_phi_temp <= nfa_merge_states__preheader_31_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_31_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge3_dt_i16_0_be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %.backedge3*/
/*   %.be4 = phi i32 [ %82, %81 ], [ 3, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_81_86) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge3__be4_phi_temp <= nfa_merge_states_81_82_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_81_82_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge3__be4_phi_temp"); $finish; end
end
/* nfa_merge_states: %.backedge3*/
/*   %.be4 = phi i32 [ %82, %81 ], [ 3, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit_116) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states__backedge3__be4_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states__backedge3__be4_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader2_91) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_87_st_i20_0_phi_temp <= nfa_merge_states__preheader_32_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_st_i20_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %st.i20.0 = phi i8* [ %92, %90 ], [ %32, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_95) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_87_st_i20_0_phi_temp <= nfa_merge_states_90_92_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_90_92_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_st_i20_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader2_91) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_87_dt_i19_0_phi_temp <= nfa_merge_states__preheader_33_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_33_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_dt_i19_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %dt.i19.0 = phi i8* [ %94, %90 ], [ %33, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_95) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_87_dt_i19_0_phi_temp <= nfa_merge_states_90_94_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_90_94_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_dt_i19_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB__preheader2_91) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_87_88_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_88_phi_temp"); $finish; end
end
/* nfa_merge_states: %87*/
/*   %88 = phi i32 [ %91, %90 ], [ 3, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_90_95) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_87_88_phi_temp <= nfa_merge_states_90_91_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_90_91_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_87_88_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_96_dt_i1_0_phi_temp <= nfa_merge_states__preheader_34_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_34_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_dt_i1_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %dt.i1.0 = phi i8* [ %34, %legup_memcpy_1.exit21 ], [ %103, %99 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_104) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_96_dt_i1_0_phi_temp <= nfa_merge_states_99_103_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_99_103_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_dt_i1_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_96_st_i2_0_phi_temp <= nfa_merge_states__preheader_32_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_st_i2_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %st.i2.0 = phi i8* [ %32, %legup_memcpy_1.exit21 ], [ %101, %99 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_104) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_96_st_i2_0_phi_temp <= nfa_merge_states_99_101_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_99_101_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_st_i2_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_legup_memcpy_1_exit21_100) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_96_97_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_97_phi_temp"); $finish; end
end
/* nfa_merge_states: %96*/
/*   %97 = phi i32 [ 3, %legup_memcpy_1.exit21 ], [ %100, %99 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_99_104) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_96_97_phi_temp <= nfa_merge_states_99_100_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_99_100_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_96_97_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_109) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_106_dt_i_0_phi_temp <= nfa_merge_states__preheader_35_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_35_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_dt_i_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %dt.i.0 = phi i8* [ %35, %104 ], [ %113, %109 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_113) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_106_dt_i_0_phi_temp <= nfa_merge_states_109_113_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_109_113_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_109) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_106_st_i_0_phi_temp <= nfa_merge_states__preheader_32_reg;
if (^reset !== 1'bX && ^(nfa_merge_states__preheader_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_st_i_0_phi_temp"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %st.i.0 = phi i8* [ %32, %104 ], [ %111, %109 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_113) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_106_st_i_0_phi_temp <= nfa_merge_states_109_111_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_109_111_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_104_109) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_106_107_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_107_phi_temp"); $finish; end
end
/* nfa_merge_states: %106*/
/*   %107 = phi i32 [ 3, %104 ], [ %110, %109 ]*/
if (((cur_state == LEGUP_F_nfa_merge_states_BB_109_113) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_merge_states_106_107_phi_temp <= nfa_merge_states_109_110_reg;
if (^reset !== 1'bX && ^(nfa_merge_states_109_110_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_merge_states_106_107_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_merge_states: %116*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_116_118))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_enable_a = bitset_contains_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_enable_a = bitset_add_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_a = bitset_remove_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_enable_a = bitset_contains_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_enable_a = bitset_add_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_enable_a = bitset_remove_memory_controller_enable_a;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_enable_a = nfa_get_predecessors_memory_controller_enable_a;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_enable_a = bitset_first_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_enable_a = bitset_end_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_enable_a = bitset_element_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_enable_a = nfa_add_transition_memory_controller_enable_a;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_enable_a = bitset_element_memory_controller_enable_a;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_enable_a = nfa_remove_transition_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_enable_a = bitset_next_memory_controller_enable_a;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_enable_a = nfa_get_sucessors_memory_controller_enable_a;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_enable_a = bitset_first_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_enable_a = bitset_end_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_enable_a = bitset_element_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_enable_a = nfa_add_transition_memory_controller_enable_a;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_enable_a = bitset_element_memory_controller_enable_a;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_enable_a = nfa_remove_transition_memory_controller_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_enable_a = bitset_next_memory_controller_enable_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   store i8 %q2, i8* %6, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q1, i8* %5, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q2, i8* %4, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   store i8 %q2, i8* %3, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q1, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q2, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %36*/
/*   %38 = load i32* %25, align 4*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %44*/
/*   %47 = load i8* %st.i5.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %44*/
/*   store i8 %47, i8* %dt.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_47))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %53*/
/*   %56 = load i8* %st.i8.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %53*/
/*   store i8 %56, i8* %dt.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_56))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %62*/
/*   %65 = load i8* %st.i11.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %62*/
/*   store i8 %65, i8* %dt.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_65))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %72*/
/*   %75 = load i8* %st.i14.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %72*/
/*   store i8 %75, i8* %dt.i13.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_74))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %81*/
/*   %84 = load i8* %st.i17.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %81*/
/*   store i8 %84, i8* %dt.i16.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_86))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %90*/
/*   %93 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %90*/
/*   store i8 %93, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_95))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %99*/
/*   %102 = load i8* %st.i2.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %99*/
/*   store i8 %102, i8* %dt.i1.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_104))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %109*/
/*   %112 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_merge_states: %109*/
/*   store i8 %112, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_113))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_address_a = bitset_contains_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_address_a = bitset_add_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_a = bitset_remove_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_address_a = bitset_contains_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_address_a = bitset_add_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_address_a = bitset_remove_memory_controller_address_a;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_address_a = nfa_get_predecessors_memory_controller_address_a;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_address_a = bitset_first_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_address_a = bitset_end_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_address_a = bitset_element_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_address_a = nfa_add_transition_memory_controller_address_a;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_address_a = bitset_element_memory_controller_address_a;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_address_a = nfa_remove_transition_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_address_a = bitset_next_memory_controller_address_a;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_address_a = nfa_get_sucessors_memory_controller_address_a;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_address_a = bitset_first_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_address_a = bitset_end_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_address_a = bitset_element_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_address_a = nfa_add_transition_memory_controller_address_a;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_address_a = bitset_element_memory_controller_address_a;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_address_a = nfa_remove_transition_memory_controller_address_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_address_a = bitset_next_memory_controller_address_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   store i8 %q2, i8* %6, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10))
begin
memory_controller_address_a = `TAG_nfa_merge_states_0_6_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q1, i8* %5, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15))
begin
memory_controller_address_a = `TAG_nfa_merge_states_0_5_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q2, i8* %4, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18))
begin
memory_controller_address_a = `TAG_nfa_merge_states_0_4_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   store i8 %q2, i8* %3, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23))
begin
memory_controller_address_a = `TAG_nfa_merge_states_0_3_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q1, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28))
begin
memory_controller_address_a = `TAG_nfa_merge_states_0_2_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q2, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31))
begin
memory_controller_address_a = `TAG_nfa_merge_states_0_1_a;
end
/* nfa_merge_states: %36*/
/*   %38 = load i32* %25, align 4*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
memory_controller_address_a = nfa_merge_states__preheader_25_reg;
end
/* nfa_merge_states: %44*/
/*   %47 = load i8* %st.i5.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
memory_controller_address_a = nfa_merge_states_41_st_i5_0_reg;
end
/* nfa_merge_states: %44*/
/*   store i8 %47, i8* %dt.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_47))
begin
memory_controller_address_a = nfa_merge_states_41_dt_i4_0_reg;
end
/* nfa_merge_states: %53*/
/*   %56 = load i8* %st.i8.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
memory_controller_address_a = nfa_merge_states_50_st_i8_0_reg;
end
/* nfa_merge_states: %53*/
/*   store i8 %56, i8* %dt.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_56))
begin
memory_controller_address_a = nfa_merge_states_50_dt_i7_0_reg;
end
/* nfa_merge_states: %62*/
/*   %65 = load i8* %st.i11.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
memory_controller_address_a = nfa_merge_states_59_st_i11_0_reg;
end
/* nfa_merge_states: %62*/
/*   store i8 %65, i8* %dt.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_65))
begin
memory_controller_address_a = nfa_merge_states_59_dt_i10_0_reg;
end
/* nfa_merge_states: %72*/
/*   %75 = load i8* %st.i14.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
memory_controller_address_a = nfa_merge_states_69_st_i14_0_reg;
end
/* nfa_merge_states: %72*/
/*   store i8 %75, i8* %dt.i13.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_74))
begin
memory_controller_address_a = nfa_merge_states_69_dt_i13_0_reg;
end
/* nfa_merge_states: %81*/
/*   %84 = load i8* %st.i17.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
memory_controller_address_a = nfa_merge_states_78_st_i17_0_reg;
end
/* nfa_merge_states: %81*/
/*   store i8 %84, i8* %dt.i16.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_86))
begin
memory_controller_address_a = nfa_merge_states_78_dt_i16_0_reg;
end
/* nfa_merge_states: %90*/
/*   %93 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
memory_controller_address_a = nfa_merge_states_87_st_i20_0_reg;
end
/* nfa_merge_states: %90*/
/*   store i8 %93, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_95))
begin
memory_controller_address_a = nfa_merge_states_87_dt_i19_0_reg;
end
/* nfa_merge_states: %99*/
/*   %102 = load i8* %st.i2.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
memory_controller_address_a = nfa_merge_states_96_st_i2_0_reg;
end
/* nfa_merge_states: %99*/
/*   store i8 %102, i8* %dt.i1.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_104))
begin
memory_controller_address_a = nfa_merge_states_96_dt_i1_0_reg;
end
/* nfa_merge_states: %109*/
/*   %112 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
memory_controller_address_a = nfa_merge_states_106_st_i_0_reg;
end
/* nfa_merge_states: %109*/
/*   store i8 %112, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_113))
begin
memory_controller_address_a = nfa_merge_states_106_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_write_enable_a = bitset_contains_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_write_enable_a = bitset_add_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_a = bitset_remove_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_write_enable_a = bitset_contains_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_write_enable_a = bitset_add_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_write_enable_a = bitset_remove_memory_controller_write_enable_a;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_write_enable_a = nfa_get_predecessors_memory_controller_write_enable_a;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_write_enable_a = bitset_first_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_write_enable_a = bitset_end_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_write_enable_a = bitset_element_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_write_enable_a = nfa_add_transition_memory_controller_write_enable_a;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_write_enable_a = bitset_element_memory_controller_write_enable_a;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_write_enable_a = nfa_remove_transition_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_write_enable_a = bitset_next_memory_controller_write_enable_a;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_write_enable_a = nfa_get_sucessors_memory_controller_write_enable_a;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_write_enable_a = bitset_first_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_write_enable_a = bitset_end_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_write_enable_a = bitset_element_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_write_enable_a = nfa_add_transition_memory_controller_write_enable_a;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_write_enable_a = bitset_element_memory_controller_write_enable_a;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_write_enable_a = nfa_remove_transition_memory_controller_write_enable_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_write_enable_a = bitset_next_memory_controller_write_enable_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   store i8 %q2, i8* %6, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q1, i8* %5, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q2, i8* %4, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   store i8 %q2, i8* %3, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q1, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q2, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %36*/
/*   %38 = load i32* %25, align 4*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %44*/
/*   %47 = load i8* %st.i5.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %44*/
/*   store i8 %47, i8* %dt.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_47))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %53*/
/*   %56 = load i8* %st.i8.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %53*/
/*   store i8 %56, i8* %dt.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_56))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %62*/
/*   %65 = load i8* %st.i11.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %62*/
/*   store i8 %65, i8* %dt.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_65))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %72*/
/*   %75 = load i8* %st.i14.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %72*/
/*   store i8 %75, i8* %dt.i13.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_74))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %81*/
/*   %84 = load i8* %st.i17.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %81*/
/*   store i8 %84, i8* %dt.i16.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %90*/
/*   %93 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %90*/
/*   store i8 %93, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_95))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %99*/
/*   %102 = load i8* %st.i2.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %99*/
/*   store i8 %102, i8* %dt.i1.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_104))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_merge_states: %109*/
/*   %112 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_merge_states: %109*/
/*   store i8 %112, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_113))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_in_a = bitset_contains_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_in_a = bitset_add_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_a = bitset_remove_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_in_a = bitset_contains_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_in_a = bitset_add_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_in_a = bitset_remove_memory_controller_in_a;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_in_a = nfa_get_predecessors_memory_controller_in_a;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_in_a = bitset_first_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_in_a = bitset_end_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_in_a = bitset_element_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_in_a = nfa_add_transition_memory_controller_in_a;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_in_a = bitset_element_memory_controller_in_a;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_in_a = nfa_remove_transition_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_in_a = bitset_next_memory_controller_in_a;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_in_a = nfa_get_sucessors_memory_controller_in_a;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_in_a = bitset_first_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_in_a = bitset_end_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_in_a = bitset_element_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_in_a = nfa_add_transition_memory_controller_in_a;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_in_a = bitset_element_memory_controller_in_a;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_in_a = nfa_remove_transition_memory_controller_in_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_in_a = bitset_next_memory_controller_in_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   store i8 %q2, i8* %6, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10))
begin
memory_controller_in_a = {arg_q2};
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q1, i8* %5, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15))
begin
memory_controller_in_a = {arg_q1};
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q2, i8* %4, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18))
begin
memory_controller_in_a = {arg_q2};
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   store i8 %q2, i8* %3, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23))
begin
memory_controller_in_a = {arg_q2};
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q1, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28))
begin
memory_controller_in_a = {arg_q1};
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q2, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31))
begin
memory_controller_in_a = {arg_q2};
end
/* nfa_merge_states: %44*/
/*   store i8 %47, i8* %dt.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_47))
begin
memory_controller_in_a = {nfa_merge_states_44_47};
end
/* nfa_merge_states: %53*/
/*   store i8 %56, i8* %dt.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_56))
begin
memory_controller_in_a = {nfa_merge_states_53_56};
end
/* nfa_merge_states: %62*/
/*   store i8 %65, i8* %dt.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_65))
begin
memory_controller_in_a = {nfa_merge_states_62_65};
end
/* nfa_merge_states: %72*/
/*   store i8 %75, i8* %dt.i13.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_74))
begin
memory_controller_in_a = {nfa_merge_states_72_75};
end
/* nfa_merge_states: %81*/
/*   store i8 %84, i8* %dt.i16.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_86))
begin
memory_controller_in_a = {nfa_merge_states_81_84};
end
/* nfa_merge_states: %90*/
/*   store i8 %93, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_95))
begin
memory_controller_in_a = {nfa_merge_states_90_93};
end
/* nfa_merge_states: %99*/
/*   store i8 %102, i8* %dt.i1.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_104))
begin
memory_controller_in_a = {nfa_merge_states_99_102};
end
/* nfa_merge_states: %109*/
/*   store i8 %112, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_113))
begin
memory_controller_in_a = {nfa_merge_states_109_112};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_size_a = bitset_contains_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_size_a = bitset_add_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_a = bitset_remove_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_size_a = bitset_contains_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_size_a = bitset_add_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_size_a = bitset_remove_memory_controller_size_a;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_size_a = nfa_get_predecessors_memory_controller_size_a;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_size_a = bitset_first_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_size_a = bitset_end_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_size_a = bitset_element_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_size_a = nfa_add_transition_memory_controller_size_a;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_size_a = bitset_element_memory_controller_size_a;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_size_a = nfa_remove_transition_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_size_a = bitset_next_memory_controller_size_a;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_size_a = nfa_get_sucessors_memory_controller_size_a;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_size_a = bitset_first_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_size_a = bitset_end_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_size_a = bitset_element_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_size_a = nfa_add_transition_memory_controller_size_a;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_size_a = bitset_element_memory_controller_size_a;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_size_a = nfa_remove_transition_memory_controller_size_a;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_size_a = bitset_next_memory_controller_size_a;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   store i8 %q2, i8* %6, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_initial_exit_10))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q1, i8* %5, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_15))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   store i8 %q2, i8* %4, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_initial_exit_18))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   store i8 %q2, i8* %3, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_is_final_exit_23))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q1, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_28))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   store i8 %q2, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_nfa_remove_final_exit_31))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %36*/
/*   %38 = load i32* %25, align 4*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_36_36))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_merge_states: %44*/
/*   %47 = load i8* %st.i5.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_45))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %44*/
/*   store i8 %47, i8* %dt.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_44_47))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %53*/
/*   %56 = load i8* %st.i8.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_54))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %53*/
/*   store i8 %56, i8* %dt.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_53_56))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %62*/
/*   %65 = load i8* %st.i11.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_63))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %62*/
/*   store i8 %65, i8* %dt.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_62_65))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %72*/
/*   %75 = load i8* %st.i14.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_72))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %72*/
/*   store i8 %75, i8* %dt.i13.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_72_74))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %81*/
/*   %84 = load i8* %st.i17.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_84))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %81*/
/*   store i8 %84, i8* %dt.i16.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_81_86))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %90*/
/*   %93 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_93))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %90*/
/*   store i8 %93, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_90_95))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %99*/
/*   %102 = load i8* %st.i2.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_102))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %99*/
/*   store i8 %102, i8* %dt.i1.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_99_104))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %109*/
/*   %112 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_111))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_merge_states: %109*/
/*   store i8 %112, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_merge_states_BB_109_113))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_enable_b = bitset_contains_memory_controller_enable_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_enable_b = bitset_add_memory_controller_enable_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_b = bitset_remove_memory_controller_enable_b;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_enable_b = bitset_contains_memory_controller_enable_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_enable_b = bitset_add_memory_controller_enable_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_enable_b = bitset_remove_memory_controller_enable_b;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_enable_b = nfa_get_predecessors_memory_controller_enable_b;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_enable_b = bitset_first_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_enable_b = bitset_end_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_enable_b = bitset_element_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_enable_b = nfa_add_transition_memory_controller_enable_b;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_enable_b = bitset_element_memory_controller_enable_b;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_enable_b = nfa_remove_transition_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_enable_b = bitset_next_memory_controller_enable_b;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_enable_b = nfa_get_sucessors_memory_controller_enable_b;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_enable_b = bitset_first_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_enable_b = bitset_end_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_enable_b = bitset_element_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_enable_b = nfa_add_transition_memory_controller_enable_b;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_enable_b = bitset_element_memory_controller_enable_b;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_enable_b = nfa_remove_transition_memory_controller_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_enable_b = bitset_next_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_address_b = bitset_contains_memory_controller_address_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_address_b = bitset_add_memory_controller_address_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_b = bitset_remove_memory_controller_address_b;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_address_b = bitset_contains_memory_controller_address_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_address_b = bitset_add_memory_controller_address_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_address_b = bitset_remove_memory_controller_address_b;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_address_b = nfa_get_predecessors_memory_controller_address_b;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_address_b = bitset_first_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_address_b = bitset_end_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_address_b = bitset_element_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_address_b = nfa_add_transition_memory_controller_address_b;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_address_b = bitset_element_memory_controller_address_b;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_address_b = nfa_remove_transition_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_address_b = bitset_next_memory_controller_address_b;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_address_b = nfa_get_sucessors_memory_controller_address_b;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_address_b = bitset_first_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_address_b = bitset_end_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_address_b = bitset_element_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_address_b = nfa_add_transition_memory_controller_address_b;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_address_b = bitset_element_memory_controller_address_b;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_address_b = nfa_remove_transition_memory_controller_address_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_address_b = bitset_next_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_write_enable_b = bitset_contains_memory_controller_write_enable_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_write_enable_b = bitset_add_memory_controller_write_enable_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_b = bitset_remove_memory_controller_write_enable_b;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_write_enable_b = bitset_contains_memory_controller_write_enable_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_write_enable_b = bitset_add_memory_controller_write_enable_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_write_enable_b = bitset_remove_memory_controller_write_enable_b;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_write_enable_b = nfa_get_predecessors_memory_controller_write_enable_b;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_write_enable_b = bitset_first_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_write_enable_b = bitset_end_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_write_enable_b = bitset_element_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_write_enable_b = nfa_add_transition_memory_controller_write_enable_b;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_write_enable_b = bitset_element_memory_controller_write_enable_b;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_write_enable_b = nfa_remove_transition_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_write_enable_b = bitset_next_memory_controller_write_enable_b;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_write_enable_b = nfa_get_sucessors_memory_controller_write_enable_b;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_write_enable_b = bitset_first_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_write_enable_b = bitset_end_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_write_enable_b = bitset_element_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_write_enable_b = nfa_add_transition_memory_controller_write_enable_b;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_write_enable_b = bitset_element_memory_controller_write_enable_b;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_write_enable_b = nfa_remove_transition_memory_controller_write_enable_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_write_enable_b = bitset_next_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_in_b = bitset_contains_memory_controller_in_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_in_b = bitset_add_memory_controller_in_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_b = bitset_remove_memory_controller_in_b;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_in_b = bitset_contains_memory_controller_in_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_in_b = bitset_add_memory_controller_in_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_in_b = bitset_remove_memory_controller_in_b;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_in_b = nfa_get_predecessors_memory_controller_in_b;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_in_b = bitset_first_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_in_b = bitset_end_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_in_b = bitset_element_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_in_b = nfa_add_transition_memory_controller_in_b;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_in_b = bitset_element_memory_controller_in_b;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_in_b = nfa_remove_transition_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_in_b = bitset_next_memory_controller_in_b;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_in_b = nfa_get_sucessors_memory_controller_in_b;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_in_b = bitset_first_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_in_b = bitset_end_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_in_b = bitset_element_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_in_b = nfa_add_transition_memory_controller_in_b;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_in_b = bitset_element_memory_controller_in_b;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_in_b = nfa_remove_transition_memory_controller_in_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_in_b = bitset_next_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_merge_states: %16*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 178, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_3))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_merge_states: %19*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 179, i8* getelementptr inbounds ([49 x i8]* @__PRETTY_FUNCTION__.nfa_merge_states, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_merge_states: %nfa_is_initial.exit*/
/*   %22 = call zeroext i1 @bitset_contains(%struct._bitset_t* %20, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_12))
begin
memory_controller_size_b = bitset_contains_memory_controller_size_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_add(%struct._bitset_t* %20, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_size_b = bitset_add_memory_controller_size_b;
end
/* nfa_merge_states: %nfa_remove_initial.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %20, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_b = bitset_remove_memory_controller_size_b;
end
/* nfa_merge_states: %nfa_is_final.exit*/
/*   %24 = call zeroext i1 @bitset_contains(%struct._bitset_t* %23, i32 %21) nounwind*/
if ((cur_state == LEGUP_function_call_25))
begin
memory_controller_size_b = bitset_contains_memory_controller_size_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_add(%struct._bitset_t* %23, i8 zeroext %q1) nounwind*/
if ((cur_state == LEGUP_function_call_30))
begin
memory_controller_size_b = bitset_add_memory_controller_size_b;
end
/* nfa_merge_states: %nfa_remove_final.exit*/
/*   call void @bitset_remove(%struct._bitset_t* %23, i8 zeroext %q2) nounwind*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_size_b = bitset_remove_memory_controller_size_b;
end
/* nfa_merge_states: %40*/
/*   call void @nfa_get_predecessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_40))
begin
memory_controller_size_b = nfa_get_predecessors_memory_controller_size_b;
end
/* nfa_merge_states: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_size_b = bitset_first_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit6*/
/*   %49 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_50))
begin
memory_controller_size_b = bitset_end_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   %58 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %8) nounwind*/
if ((cur_state == LEGUP_function_call_58))
begin
memory_controller_size_b = bitset_element_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit9*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %58, i8 zeroext %q1, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_60))
begin
memory_controller_size_b = nfa_add_transition_memory_controller_size_b;
end
/* nfa_merge_states: %67*/
/*   %68 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %9) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_size_b = bitset_element_memory_controller_size_b;
end
/* nfa_merge_states: %67*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %68, i8 zeroext %q2, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_size_b = nfa_remove_transition_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit15*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %10) nounwind*/
if ((cur_state == LEGUP_function_call_76))
begin
memory_controller_size_b = bitset_next_memory_controller_size_b;
end
/* nfa_merge_states: %77*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %storemerge, %struct._bitset_t* %bs)*/
if ((cur_state == LEGUP_function_call_79))
begin
memory_controller_size_b = nfa_get_sucessors_memory_controller_size_b;
end
/* nfa_merge_states: %77*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs) nounwind*/
if ((cur_state == LEGUP_function_call_81))
begin
memory_controller_size_b = bitset_first_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit18*/
/*   %86 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %11) nounwind*/
if ((cur_state == LEGUP_function_call_89))
begin
memory_controller_size_b = bitset_end_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   %95 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %12) nounwind*/
if ((cur_state == LEGUP_function_call_97))
begin
memory_controller_size_b = bitset_element_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit21*/
/*   call void @nfa_add_transition(%struct._nfa_t* %nfa, i8 zeroext %q1, i8 zeroext %95, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_99))
begin
memory_controller_size_b = nfa_add_transition_memory_controller_size_b;
end
/* nfa_merge_states: %104*/
/*   %105 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %13) nounwind*/
if ((cur_state == LEGUP_function_call_106))
begin
memory_controller_size_b = bitset_element_memory_controller_size_b;
end
/* nfa_merge_states: %104*/
/*   call void @nfa_remove_transition(%struct._nfa_t* %nfa, i8 zeroext %q2, i8 zeroext %105, i8 zeroext %storemerge)*/
if ((cur_state == LEGUP_function_call_108))
begin
memory_controller_size_b = nfa_remove_transition_memory_controller_size_b;
end
/* nfa_merge_states: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %i1, %struct._bitset_t* %bs, %struct._bitset_iterator_t* byval %14) nounwind*/
if ((cur_state == LEGUP_function_call_115))
begin
memory_controller_size_b = bitset_next_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_accept_sample
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	arg_sample,
	arg_length,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_4_4 = 7'd4;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_7_5 = 7'd5;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_7_6 = 7'd6;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_7_7 = 7'd7;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8 = 7'd8;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_16_9 = 7'd9;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_18_10 = 7'd10;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_18_11 = 7'd11;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_18_12 = 7'd12;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_18_14 = 7'd14;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_18_16 = 7'd16;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_21_17 = 7'd17;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_22_18 = 7'd18;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_25_19 = 7'd19;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_25_20 = 7'd20;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_25_21 = 7'd21;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22 = 7'd22;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24 = 7'd24;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB__preheader_25 = 7'd25;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_31_26 = 7'd26;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_34_27 = 7'd27;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_34_28 = 7'd28;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_34_29 = 7'd29;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_39_30 = 7'd30;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_39_32 = 7'd32;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_39_34 = 7'd34;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_39_36 = 7'd36;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_41_37 = 7'd37;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_44_38 = 7'd38;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_44_39 = 7'd39;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_44_40 = 7'd40;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41 = 7'd41;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43 = 7'd43;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_49_44 = 7'd44;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB__preheader1_45 = 7'd45;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_51_46 = 7'd46;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_54_47 = 7'd47;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_54_48 = 7'd48;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_54_49 = 7'd49;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50 = 7'd50;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51 = 7'd51;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_61_52 = 7'd52;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_61_53 = 7'd53;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_61_54 = 7'd54;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55 = 7'd55;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56 = 7'd56;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_68_57 = 7'd57;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_68_58 = 7'd58;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_68_59 = 7'd59;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_73_60 = 7'd60;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_75_61 = 7'd61;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_76_62 = 7'd62;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_79_63 = 7'd63;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_79_64 = 7'd64;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_79_65 = 7'd65;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66 = 7'd66;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68 = 7'd68;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70 = 7'd70;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71 = 7'd71;
parameter [6:0] LEGUP_F_nfa_accept_sample_BB__loopexit_72 = 7'd72;
parameter [6:0] LEGUP_function_call_2 = 7'd2;
parameter [6:0] LEGUP_function_call_13 = 7'd13;
parameter [6:0] LEGUP_function_call_15 = 7'd15;
parameter [6:0] LEGUP_function_call_23 = 7'd23;
parameter [6:0] LEGUP_function_call_31 = 7'd31;
parameter [6:0] LEGUP_function_call_33 = 7'd33;
parameter [6:0] LEGUP_function_call_35 = 7'd35;
parameter [6:0] LEGUP_function_call_42 = 7'd42;
parameter [6:0] LEGUP_function_call_67 = 7'd67;
parameter [6:0] LEGUP_function_call_69 = 7'd69;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_sample;
input [31:0] arg_length;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_0_tmp_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_0_tmp_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_0_tmp1_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_0_tmp1_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_4_st_i_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_4_st_i_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_4_dt_i_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_4_dt_i_i_0_reg;
reg [31:0] nfa_accept_sample_4_5;
reg [31:0] nfa_accept_sample_4_5_reg;
reg  nfa_accept_sample_4_6;
reg [31:0] nfa_accept_sample_7_8;
reg [31:0] nfa_accept_sample_7_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_7_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_7_9_reg;
reg [31:0] nfa_accept_sample_7_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_7_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_7_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_tmp3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_tmp3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_tmp4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_nfa_get_initials_exit_tmp4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_16__0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_16__0_reg;
reg [31:0] nfa_accept_sample_16_storemerge;
reg [31:0] nfa_accept_sample_16_storemerge_reg;
reg  nfa_accept_sample_16_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_18_19_reg;
reg [7:0] nfa_accept_sample_18_20;
reg [7:0] nfa_accept_sample_18_20_reg;
reg [7:0] nfa_accept_sample_21_any_0;
reg [7:0] nfa_accept_sample_21_any_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_22_st_i22_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_22_st_i22_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_22_dt_i21_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_22_dt_i21_0_reg;
reg [31:0] nfa_accept_sample_22_23;
reg [31:0] nfa_accept_sample_22_23_reg;
reg  nfa_accept_sample_22_24;
reg [31:0] nfa_accept_sample_25_26;
reg [31:0] nfa_accept_sample_25_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_25_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_25_27_reg;
reg [7:0] nfa_accept_sample_25_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_25_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_25_29_reg;
reg  nfa_accept_sample_legup_memcpy_1_exit23_30;
reg  nfa_accept_sample_legup_memcpy_1_exit23_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_31_st_i25_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_31_st_i25_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_31_dt_i24_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_31_dt_i24_0_reg;
reg [31:0] nfa_accept_sample_31_32;
reg [31:0] nfa_accept_sample_31_32_reg;
reg  nfa_accept_sample_31_33;
reg [31:0] nfa_accept_sample_34_35;
reg [31:0] nfa_accept_sample_34_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_34_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_34_36_reg;
reg [7:0] nfa_accept_sample_34_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_34_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_34_38_reg;
reg [7:0] nfa_accept_sample_39_40;
reg [7:0] nfa_accept_sample_39_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_41_st_i20_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_41_st_i20_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_41_dt_i19_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_41_dt_i19_0_reg;
reg [31:0] nfa_accept_sample_41_42;
reg [31:0] nfa_accept_sample_41_42_reg;
reg  nfa_accept_sample_41_43;
reg [31:0] nfa_accept_sample_44_45;
reg [31:0] nfa_accept_sample_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_44_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_44_46_reg;
reg [7:0] nfa_accept_sample_44_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_44_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_44_48_reg;
reg  nfa_accept_sample_49_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_51_st_i17_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_51_st_i17_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_51_dt_i16_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_51_dt_i16_0_reg;
reg [31:0] nfa_accept_sample_51_52;
reg [31:0] nfa_accept_sample_51_52_reg;
reg  nfa_accept_sample_51_53;
reg [31:0] nfa_accept_sample_54_55;
reg [31:0] nfa_accept_sample_54_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_54_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_54_56_reg;
reg [31:0] nfa_accept_sample_54_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_54_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_54_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg;
reg [31:0] nfa_accept_sample_legup_memcpy_4_exit18_59;
reg [31:0] nfa_accept_sample_legup_memcpy_4_exit18_59_reg;
reg  nfa_accept_sample_legup_memcpy_4_exit18_60;
reg [31:0] nfa_accept_sample_61_62;
reg [31:0] nfa_accept_sample_61_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_61_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_61_63_reg;
reg [31:0] nfa_accept_sample_61_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_61_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_61_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit15_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg;
reg [31:0] nfa_accept_sample_legup_memcpy_4_exit15_66;
reg [31:0] nfa_accept_sample_legup_memcpy_4_exit15_66_reg;
reg  nfa_accept_sample_legup_memcpy_4_exit15_67;
reg [31:0] nfa_accept_sample_68_69;
reg [31:0] nfa_accept_sample_68_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_68_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_68_70_reg;
reg [31:0] nfa_accept_sample_68_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_68_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_68_72_reg;
reg [31:0] nfa_accept_sample_73_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_75_tmp1_i12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_76_st_i_i10_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_76_st_i_i10_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_76_dt_i_i9_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_76_dt_i_i9_0_reg;
reg [31:0] nfa_accept_sample_76_77;
reg [31:0] nfa_accept_sample_76_77_reg;
reg  nfa_accept_sample_76_78;
reg [31:0] nfa_accept_sample_79_80;
reg [31:0] nfa_accept_sample_79_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_79_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_79_81_reg;
reg [31:0] nfa_accept_sample_79_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_79_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_79_83_reg;
reg  nfa_accept_sample_nfa_get_finals_exit_84;
reg  nfa_accept_sample_nfa_get_finals_exit_84_reg;
reg  nfa_accept_sample__loopexit_storemerge2;
reg  bitset_init_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_init_arg_0;
reg  bitset_init_memory_controller_waitrequest;
wire  bitset_init_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_init_memory_controller_address_a;
wire  bitset_init_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_out_a;
wire [1:0] bitset_init_memory_controller_size_a;
wire  bitset_init_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_init_memory_controller_address_b;
wire  bitset_init_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_init_memory_controller_out_b;
wire [1:0] bitset_init_memory_controller_size_b;
wire  bitset_init_finish;
reg  bitset_clear_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_clear_arg_0;
reg  bitset_clear_memory_controller_waitrequest;
wire  bitset_clear_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_clear_memory_controller_address_a;
wire  bitset_clear_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_clear_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_clear_memory_controller_out_a;
wire [1:0] bitset_clear_memory_controller_size_a;
wire  bitset_clear_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_clear_memory_controller_address_b;
wire  bitset_clear_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_clear_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_clear_memory_controller_out_b;
wire [1:0] bitset_clear_memory_controller_size_b;
wire  bitset_clear_finish;
reg  bitset_first_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_arg_1;
reg  bitset_first_memory_controller_waitrequest;
wire  bitset_first_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_memory_controller_address_a;
wire  bitset_first_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_out_a;
wire [1:0] bitset_first_memory_controller_size_a;
wire  bitset_first_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_memory_controller_address_b;
wire  bitset_first_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_out_b;
wire [1:0] bitset_first_memory_controller_size_b;
wire  bitset_first_finish;
reg  bitset_end_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_arg_0;
reg  bitset_end_memory_controller_waitrequest;
wire  bitset_end_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_memory_controller_address_a;
wire  bitset_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_out_a;
wire [1:0] bitset_end_memory_controller_size_a;
wire  bitset_end_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_memory_controller_address_b;
wire  bitset_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_out_b;
wire [1:0] bitset_end_memory_controller_size_b;
wire  bitset_end_finish;
wire  bitset_end_return_val;
reg  bitset_element_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_arg_0;
reg  bitset_element_memory_controller_waitrequest;
wire  bitset_element_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_memory_controller_address_a;
wire  bitset_element_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_out_a;
wire [1:0] bitset_element_memory_controller_size_a;
wire  bitset_element_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_memory_controller_address_b;
wire  bitset_element_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_out_b;
wire [1:0] bitset_element_memory_controller_size_b;
wire  bitset_element_finish;
wire [7:0] bitset_element_return_val;
reg  nfa_get_sucessors_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_arg_nfa;
reg [7:0] nfa_get_sucessors_arg_state;
reg [7:0] nfa_get_sucessors_arg_sym;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_arg_bs;
reg  nfa_get_sucessors_memory_controller_waitrequest;
wire  nfa_get_sucessors_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_memory_controller_address_a;
wire  nfa_get_sucessors_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_out_a;
wire [1:0] nfa_get_sucessors_memory_controller_size_a;
wire  nfa_get_sucessors_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_memory_controller_address_b;
wire  nfa_get_sucessors_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_out_b;
wire [1:0] nfa_get_sucessors_memory_controller_size_b;
wire  nfa_get_sucessors_finish;
reg  bitset_union_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_union_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_union_arg_1;
reg  bitset_union_memory_controller_waitrequest;
wire  bitset_union_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_union_memory_controller_address_a;
wire  bitset_union_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_union_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_union_memory_controller_out_a;
wire [1:0] bitset_union_memory_controller_size_a;
wire  bitset_union_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_union_memory_controller_address_b;
wire  bitset_union_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_union_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_union_memory_controller_out_b;
wire [1:0] bitset_union_memory_controller_size_b;
wire  bitset_union_finish;
reg  bitset_next_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_2;
reg  bitset_next_memory_controller_waitrequest;
wire  bitset_next_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_memory_controller_address_a;
wire  bitset_next_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_out_a;
wire [1:0] bitset_next_memory_controller_size_a;
wire  bitset_next_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_memory_controller_address_b;
wire  bitset_next_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_out_b;
wire [1:0] bitset_next_memory_controller_size_b;
wire  bitset_next_finish;
reg  bitset_intersect_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_intersect_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_intersect_arg_1;
reg  bitset_intersect_memory_controller_waitrequest;
wire  bitset_intersect_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_intersect_memory_controller_address_a;
wire  bitset_intersect_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_intersect_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_intersect_memory_controller_out_a;
wire [1:0] bitset_intersect_memory_controller_size_a;
wire  bitset_intersect_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_intersect_memory_controller_address_b;
wire  bitset_intersect_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_intersect_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_intersect_memory_controller_out_b;
wire [1:0] bitset_intersect_memory_controller_size_b;
wire  bitset_intersect_finish;
reg  bitset_any_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_any_arg_0;
reg  bitset_any_memory_controller_waitrequest;
wire  bitset_any_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_any_memory_controller_address_a;
wire  bitset_any_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_out_a;
wire [1:0] bitset_any_memory_controller_size_a;
wire  bitset_any_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_any_memory_controller_address_b;
wire  bitset_any_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_out_b;
wire [1:0] bitset_any_memory_controller_size_b;
wire  bitset_any_finish;
wire  bitset_any_return_val;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_4_st_i_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_4_dt_i_i_0_phi_temp;
reg [31:0] nfa_accept_sample_4_5_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_16__0_phi_temp;
reg [31:0] nfa_accept_sample_16_storemerge_phi_temp;
reg [7:0] nfa_accept_sample_21_any_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_22_st_i22_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_22_dt_i21_0_phi_temp;
reg [31:0] nfa_accept_sample_22_23_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_31_st_i25_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_31_dt_i24_0_phi_temp;
reg [31:0] nfa_accept_sample_31_32_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_41_st_i20_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_41_dt_i19_0_phi_temp;
reg [31:0] nfa_accept_sample_41_42_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_51_st_i17_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_51_dt_i16_0_phi_temp;
reg [31:0] nfa_accept_sample_51_52_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp;
reg [31:0] nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp;
reg [31:0] nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_76_st_i_i10_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_76_dt_i_i9_0_phi_temp;
reg [31:0] nfa_accept_sample_76_77_phi_temp;
reg  nfa_accept_sample__loopexit_storemerge2_phi_temp;


bitset_init bitset_init_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_init_start),
	.finish (bitset_init_finish),
	.memory_controller_enable_a (bitset_init_memory_controller_enable_a),
	.memory_controller_address_a (bitset_init_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_init_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_init_memory_controller_in_a),
	.memory_controller_size_a (bitset_init_memory_controller_size_a),
	.memory_controller_out_a (bitset_init_memory_controller_out_a),
	.memory_controller_enable_b (bitset_init_memory_controller_enable_b),
	.memory_controller_address_b (bitset_init_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_init_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_init_memory_controller_in_b),
	.memory_controller_size_b (bitset_init_memory_controller_size_b),
	.memory_controller_out_b (bitset_init_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_init_memory_controller_waitrequest),
	.arg_0 (bitset_init_arg_0)
);



bitset_clear bitset_clear_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_clear_start),
	.finish (bitset_clear_finish),
	.memory_controller_enable_a (bitset_clear_memory_controller_enable_a),
	.memory_controller_address_a (bitset_clear_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_clear_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_clear_memory_controller_in_a),
	.memory_controller_size_a (bitset_clear_memory_controller_size_a),
	.memory_controller_out_a (bitset_clear_memory_controller_out_a),
	.memory_controller_enable_b (bitset_clear_memory_controller_enable_b),
	.memory_controller_address_b (bitset_clear_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_clear_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_clear_memory_controller_in_b),
	.memory_controller_size_b (bitset_clear_memory_controller_size_b),
	.memory_controller_out_b (bitset_clear_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_clear_memory_controller_waitrequest),
	.arg_0 (bitset_clear_arg_0)
);



bitset_first bitset_first_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_first_start),
	.finish (bitset_first_finish),
	.memory_controller_enable_a (bitset_first_memory_controller_enable_a),
	.memory_controller_address_a (bitset_first_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_first_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_first_memory_controller_in_a),
	.memory_controller_size_a (bitset_first_memory_controller_size_a),
	.memory_controller_out_a (bitset_first_memory_controller_out_a),
	.memory_controller_enable_b (bitset_first_memory_controller_enable_b),
	.memory_controller_address_b (bitset_first_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_first_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_first_memory_controller_in_b),
	.memory_controller_size_b (bitset_first_memory_controller_size_b),
	.memory_controller_out_b (bitset_first_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_first_memory_controller_waitrequest),
	.arg_0 (bitset_first_arg_0),
	.arg_1 (bitset_first_arg_1)
);



bitset_end bitset_end_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_end_start),
	.finish (bitset_end_finish),
	.return_val (bitset_end_return_val),
	.memory_controller_enable_a (bitset_end_memory_controller_enable_a),
	.memory_controller_address_a (bitset_end_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_end_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_end_memory_controller_in_a),
	.memory_controller_size_a (bitset_end_memory_controller_size_a),
	.memory_controller_out_a (bitset_end_memory_controller_out_a),
	.memory_controller_enable_b (bitset_end_memory_controller_enable_b),
	.memory_controller_address_b (bitset_end_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_end_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_end_memory_controller_in_b),
	.memory_controller_size_b (bitset_end_memory_controller_size_b),
	.memory_controller_out_b (bitset_end_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_end_memory_controller_waitrequest),
	.arg_0 (bitset_end_arg_0)
);



bitset_element bitset_element_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_element_start),
	.finish (bitset_element_finish),
	.return_val (bitset_element_return_val),
	.memory_controller_enable_a (bitset_element_memory_controller_enable_a),
	.memory_controller_address_a (bitset_element_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_element_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_element_memory_controller_in_a),
	.memory_controller_size_a (bitset_element_memory_controller_size_a),
	.memory_controller_out_a (bitset_element_memory_controller_out_a),
	.memory_controller_enable_b (bitset_element_memory_controller_enable_b),
	.memory_controller_address_b (bitset_element_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_element_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_element_memory_controller_in_b),
	.memory_controller_size_b (bitset_element_memory_controller_size_b),
	.memory_controller_out_b (bitset_element_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_element_memory_controller_waitrequest),
	.arg_0 (bitset_element_arg_0)
);



nfa_get_sucessors nfa_get_sucessors_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_get_sucessors_start),
	.finish (nfa_get_sucessors_finish),
	.memory_controller_enable_a (nfa_get_sucessors_memory_controller_enable_a),
	.memory_controller_address_a (nfa_get_sucessors_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_get_sucessors_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_get_sucessors_memory_controller_in_a),
	.memory_controller_size_a (nfa_get_sucessors_memory_controller_size_a),
	.memory_controller_out_a (nfa_get_sucessors_memory_controller_out_a),
	.memory_controller_enable_b (nfa_get_sucessors_memory_controller_enable_b),
	.memory_controller_address_b (nfa_get_sucessors_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_get_sucessors_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_get_sucessors_memory_controller_in_b),
	.memory_controller_size_b (nfa_get_sucessors_memory_controller_size_b),
	.memory_controller_out_b (nfa_get_sucessors_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_get_sucessors_memory_controller_waitrequest),
	.arg_nfa (nfa_get_sucessors_arg_nfa),
	.arg_state (nfa_get_sucessors_arg_state),
	.arg_sym (nfa_get_sucessors_arg_sym),
	.arg_bs (nfa_get_sucessors_arg_bs)
);



bitset_union bitset_union_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_union_start),
	.finish (bitset_union_finish),
	.memory_controller_enable_a (bitset_union_memory_controller_enable_a),
	.memory_controller_address_a (bitset_union_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_union_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_union_memory_controller_in_a),
	.memory_controller_size_a (bitset_union_memory_controller_size_a),
	.memory_controller_out_a (bitset_union_memory_controller_out_a),
	.memory_controller_enable_b (bitset_union_memory_controller_enable_b),
	.memory_controller_address_b (bitset_union_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_union_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_union_memory_controller_in_b),
	.memory_controller_size_b (bitset_union_memory_controller_size_b),
	.memory_controller_out_b (bitset_union_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_union_memory_controller_waitrequest),
	.arg_0 (bitset_union_arg_0),
	.arg_1 (bitset_union_arg_1)
);



bitset_next bitset_next_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_next_start),
	.finish (bitset_next_finish),
	.memory_controller_enable_a (bitset_next_memory_controller_enable_a),
	.memory_controller_address_a (bitset_next_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_next_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_next_memory_controller_in_a),
	.memory_controller_size_a (bitset_next_memory_controller_size_a),
	.memory_controller_out_a (bitset_next_memory_controller_out_a),
	.memory_controller_enable_b (bitset_next_memory_controller_enable_b),
	.memory_controller_address_b (bitset_next_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_next_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_next_memory_controller_in_b),
	.memory_controller_size_b (bitset_next_memory_controller_size_b),
	.memory_controller_out_b (bitset_next_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_next_memory_controller_waitrequest),
	.arg_0 (bitset_next_arg_0),
	.arg_1 (bitset_next_arg_1),
	.arg_2 (bitset_next_arg_2)
);



bitset_intersect bitset_intersect_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_intersect_start),
	.finish (bitset_intersect_finish),
	.memory_controller_enable_a (bitset_intersect_memory_controller_enable_a),
	.memory_controller_address_a (bitset_intersect_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_intersect_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_intersect_memory_controller_in_a),
	.memory_controller_size_a (bitset_intersect_memory_controller_size_a),
	.memory_controller_out_a (bitset_intersect_memory_controller_out_a),
	.memory_controller_enable_b (bitset_intersect_memory_controller_enable_b),
	.memory_controller_address_b (bitset_intersect_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_intersect_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_intersect_memory_controller_in_b),
	.memory_controller_size_b (bitset_intersect_memory_controller_size_b),
	.memory_controller_out_b (bitset_intersect_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_intersect_memory_controller_waitrequest),
	.arg_0 (bitset_intersect_arg_0),
	.arg_1 (bitset_intersect_arg_1)
);



bitset_any bitset_any_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_any_start),
	.finish (bitset_any_finish),
	.return_val (bitset_any_return_val),
	.memory_controller_enable_a (bitset_any_memory_controller_enable_a),
	.memory_controller_address_a (bitset_any_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_any_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_any_memory_controller_in_a),
	.memory_controller_size_a (bitset_any_memory_controller_size_a),
	.memory_controller_out_a (bitset_any_memory_controller_out_a),
	.memory_controller_enable_b (bitset_any_memory_controller_enable_b),
	.memory_controller_address_b (bitset_any_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_any_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_any_memory_controller_in_b),
	.memory_controller_size_b (bitset_any_memory_controller_size_b),
	.memory_controller_out_b (bitset_any_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_any_memory_controller_waitrequest),
	.arg_0 (bitset_any_arg_0)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (^reset !== 1'bX && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (^reset !== 1'bX && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (bitset_init_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (^reset !== 1'bX && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_0_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_4_6 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_4_6 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_7_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_7_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_7_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_7_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_7_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_7_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_7_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_7_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_16_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_16_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_16_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_16_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_16_17 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_16_17 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_75_61;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_75_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_10;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (bitset_clear_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_13) & (memory_controller_waitrequest == 1'd0)) & (bitset_clear_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_13;
if (^reset !== 1'bX && ^(LEGUP_function_call_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_15;
if (^reset !== 1'bX && ^(LEGUP_function_call_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_15;
if (^reset !== 1'bX && ^(LEGUP_function_call_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_15) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_15) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_15;
if (^reset !== 1'bX && ^(LEGUP_function_call_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_18_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_18_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_21_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_21_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_21_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_21_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_22_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_22_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_22_24 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_22_24 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_25_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_25_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_25_20;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_25_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_25_20;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_25_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_25_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_25_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_25_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_25_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_22_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_23;
if (^reset !== 1'bX && ^(LEGUP_function_call_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_23;
if (^reset !== 1'bX && ^(LEGUP_function_call_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_23) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_23) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_23;
if (^reset !== 1'bX && ^(LEGUP_function_call_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_legup_memcpy_1_exit23_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_49_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_49_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_24) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_legup_memcpy_1_exit23_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__preheader_25;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__preheader_25;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_31_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_31_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_31_33 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_30;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_31_33 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_34_27;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_34_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_34_27;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_34_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_34_28;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_34_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_34_28;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_34_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_34_29;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_34_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_34_29;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_34_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_31_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_31_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_30;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_31;
if (^reset !== 1'bX && ^(LEGUP_function_call_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_31;
if (^reset !== 1'bX && ^(LEGUP_function_call_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_31) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_32;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_31) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_31;
if (^reset !== 1'bX && ^(LEGUP_function_call_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_32;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_33;
if (^reset !== 1'bX && ^(LEGUP_function_call_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_33;
if (^reset !== 1'bX && ^(LEGUP_function_call_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_33) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_34;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_33) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_33;
if (^reset !== 1'bX && ^(LEGUP_function_call_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_34;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_35;
if (^reset !== 1'bX && ^(LEGUP_function_call_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_35;
if (^reset !== 1'bX && ^(LEGUP_function_call_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_35) & (memory_controller_waitrequest == 1'd0)) & (bitset_union_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_35) & (memory_controller_waitrequest == 1'd0)) & (bitset_union_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_35;
if (^reset !== 1'bX && ^(LEGUP_function_call_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_39_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_39_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_41_37;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_41_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_41_37;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_41_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_41_43 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_41_43 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_44_38;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_44_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_44_38;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_44_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_44_39;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_44_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_44_39;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_44_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_44_40;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_44_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_44_40;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_44_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_41_37;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_41_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_42;
if (^reset !== 1'bX && ^(LEGUP_function_call_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_42;
if (^reset !== 1'bX && ^(LEGUP_function_call_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_42) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_42) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_42;
if (^reset !== 1'bX && ^(LEGUP_function_call_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_21_17;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_21_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_49_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_49_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_49_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_49_44) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_49_50 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_49_44) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_49_50 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__preheader1_45;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__preheader1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader1_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__preheader1_45;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__preheader1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader1_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_51_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_51_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_51_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_51_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_51_53 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_51_53 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_54_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_54_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_54_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_54_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_54_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_54_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_54_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_54_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_54_49;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_54_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_54_49;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_54_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_51_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_51_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_legup_memcpy_4_exit18_60 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_legup_memcpy_4_exit18_60 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_61_52;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_61_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_61_52;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_61_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_61_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_61_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_61_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_61_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_61_54;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_61_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_61_54;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_61_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_legup_memcpy_4_exit15_67 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_73_60;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_73_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_legup_memcpy_4_exit15_67 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_68_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_68_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_68_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_68_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_68_58;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_68_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_68_58;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_68_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_68_59;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_68_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_68_59;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_68_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_73_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_73_60;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_73_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_73_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_16_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_16_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_75_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_75_61;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_75_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_75_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_76_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_76_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_76_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_76_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_76_78 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_76_78 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_79_63;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_79_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_79_63;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_79_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_79_64;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_79_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_79_64;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_79_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_79_65;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_79_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_79_65;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_79_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_76_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_76_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_67;
if (^reset !== 1'bX && ^(LEGUP_function_call_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_67;
if (^reset !== 1'bX && ^(LEGUP_function_call_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_67) & (memory_controller_waitrequest == 1'd0)) & (bitset_intersect_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_67) & (memory_controller_waitrequest == 1'd0)) & (bitset_intersect_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_67;
if (^reset !== 1'bX && ^(LEGUP_function_call_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_69;
if (^reset !== 1'bX && ^(LEGUP_function_call_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_69;
if (^reset !== 1'bX && ^(LEGUP_function_call_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_69) & (memory_controller_waitrequest == 1'd0)) & (bitset_any_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_69) & (memory_controller_waitrequest == 1'd0)) & (bitset_any_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_69;
if (^reset !== 1'bX && ^(LEGUP_function_call_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__loopexit_72;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__loopexit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__loopexit_72;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__loopexit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_sample_BB__loopexit_72;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_sample_BB__loopexit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (^reset !== 1'bX && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %0*/
/*   %tmp.i = getelementptr inbounds %struct._bitset_t* %current, i32 0, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_0_tmp_i = 0; end
begin
nfa_accept_sample_0_tmp_i = `TAG_nfa_accept_sample_0_current_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %0*/
/*   %tmp.i = getelementptr inbounds %struct._bitset_t* %current, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_0_1))
begin
nfa_accept_sample_0_tmp_i_reg <= nfa_accept_sample_0_tmp_i;
if (^reset !== 1'bX && ^(nfa_accept_sample_0_tmp_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_0_tmp_i_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %0*/
/*   %tmp1.i = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0, i32 0, i32 0*/
begin
nfa_accept_sample_0_tmp1_i = arg_nfa;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %0*/
/*   %tmp1.i = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_0_1))
begin
nfa_accept_sample_0_tmp1_i_reg <= nfa_accept_sample_0_tmp1_i;
if (^reset !== 1'bX && ^(nfa_accept_sample_0_tmp1_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_0_tmp1_i_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_st_i_i_0 = nfa_accept_sample_4_st_i_i_0_phi_temp;
end
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_st_i_i_0 = nfa_accept_sample_4_st_i_i_0_phi_temp;
end
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4)) */
begin
nfa_accept_sample_4_st_i_i_0 = nfa_accept_sample_4_st_i_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_st_i_i_0_reg <= nfa_accept_sample_4_st_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_st_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_st_i_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_st_i_i_0_reg <= nfa_accept_sample_4_st_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_st_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_st_i_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_st_i_i_0_reg <= nfa_accept_sample_4_st_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_st_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_st_i_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_st_i_i_0_reg <= nfa_accept_sample_4_st_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_st_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_st_i_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_dt_i_i_0 = nfa_accept_sample_4_dt_i_i_0_phi_temp;
end
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_dt_i_i_0 = nfa_accept_sample_4_dt_i_i_0_phi_temp;
end
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4)) */
begin
nfa_accept_sample_4_dt_i_i_0 = nfa_accept_sample_4_dt_i_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_dt_i_i_0_reg <= nfa_accept_sample_4_dt_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_dt_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_dt_i_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_dt_i_i_0_reg <= nfa_accept_sample_4_dt_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_dt_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_dt_i_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_dt_i_i_0_reg <= nfa_accept_sample_4_dt_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_dt_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_dt_i_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_dt_i_i_0_reg <= nfa_accept_sample_4_dt_i_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_dt_i_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_dt_i_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_5 = nfa_accept_sample_4_5_phi_temp;
end
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4)) */
begin
nfa_accept_sample_4_5 = nfa_accept_sample_4_5_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_5_reg <= nfa_accept_sample_4_5;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_5_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_5_reg <= nfa_accept_sample_4_5;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_5_reg"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_4_4))
begin
nfa_accept_sample_4_5_reg <= nfa_accept_sample_4_5;
if (^reset !== 1'bX && ^(nfa_accept_sample_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %4*/
/*   %6 = icmp eq i32 %5, 0*/
begin
nfa_accept_sample_4_6 = (nfa_accept_sample_4_5 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %7*/
/*   %8 = add i32 %5, -1*/
begin
nfa_accept_sample_7_8 = (nfa_accept_sample_4_5_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %7*/
/*   %8 = add i32 %5, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
nfa_accept_sample_7_8_reg <= nfa_accept_sample_7_8;
if (^reset !== 1'bX && ^(nfa_accept_sample_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_7_8_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %7*/
/*   %9 = getelementptr inbounds i32* %st.i.i.0, i32 1*/
begin
nfa_accept_sample_7_9 = (nfa_accept_sample_4_st_i_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %7*/
/*   %9 = getelementptr inbounds i32* %st.i.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
nfa_accept_sample_7_9_reg <= nfa_accept_sample_7_9;
if (^reset !== 1'bX && ^(nfa_accept_sample_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_7_9_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %7*/
/*   %10 = load i32* %st.i.i.0, align 4*/
begin
nfa_accept_sample_7_10 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_accept_sample: %7*/
/*   %11 = getelementptr inbounds i32* %dt.i.i.0, i32 1*/
begin
nfa_accept_sample_7_11 = (nfa_accept_sample_4_dt_i_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %7*/
/*   %11 = getelementptr inbounds i32* %dt.i.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
nfa_accept_sample_7_11_reg <= nfa_accept_sample_7_11;
if (^reset !== 1'bX && ^(nfa_accept_sample_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_7_11_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %12 = getelementptr inbounds %struct._bitset_iterator_t* %1, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_nfa_get_initials_exit_12 = 0; end
begin
nfa_accept_sample_nfa_get_initials_exit_12 = `TAG_nfa_accept_sample_0_1_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %12 = getelementptr inbounds %struct._bitset_iterator_t* %1, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8))
begin
nfa_accept_sample_nfa_get_initials_exit_12_reg <= nfa_accept_sample_nfa_get_initials_exit_12;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_initials_exit_12_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %13 = getelementptr inbounds %struct._bitset_iterator_t* %j, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_nfa_get_initials_exit_13 = 0; end
begin
nfa_accept_sample_nfa_get_initials_exit_13 = `TAG_nfa_accept_sample_0_j_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %13 = getelementptr inbounds %struct._bitset_iterator_t* %j, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8))
begin
nfa_accept_sample_nfa_get_initials_exit_13_reg <= nfa_accept_sample_nfa_get_initials_exit_13;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_initials_exit_13_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %14 = getelementptr inbounds %struct._bitset_iterator_t* %2, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_nfa_get_initials_exit_14 = 0; end
begin
nfa_accept_sample_nfa_get_initials_exit_14 = `TAG_nfa_accept_sample_0_2_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %14 = getelementptr inbounds %struct._bitset_iterator_t* %2, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8))
begin
nfa_accept_sample_nfa_get_initials_exit_14_reg <= nfa_accept_sample_nfa_get_initials_exit_14;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_initials_exit_14_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %15 = getelementptr inbounds %struct._bitset_iterator_t* %3, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_nfa_get_initials_exit_15 = 0; end
begin
nfa_accept_sample_nfa_get_initials_exit_15 = `TAG_nfa_accept_sample_0_3_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %15 = getelementptr inbounds %struct._bitset_iterator_t* %3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8))
begin
nfa_accept_sample_nfa_get_initials_exit_15_reg <= nfa_accept_sample_nfa_get_initials_exit_15;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_initials_exit_15_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %tmp3 = getelementptr inbounds %struct._bitset_t* %tmp, i32 0, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_nfa_get_initials_exit_tmp3 = 0; end
begin
nfa_accept_sample_nfa_get_initials_exit_tmp3 = `TAG_nfa_accept_sample_0_tmp_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %tmp3 = getelementptr inbounds %struct._bitset_t* %tmp, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8))
begin
nfa_accept_sample_nfa_get_initials_exit_tmp3_reg <= nfa_accept_sample_nfa_get_initials_exit_tmp3;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_initials_exit_tmp3_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %tmp4 = getelementptr inbounds %struct._bitset_t* %next, i32 0, i32 0, i32 0*/
if (reset) begin nfa_accept_sample_nfa_get_initials_exit_tmp4 = 0; end
begin
nfa_accept_sample_nfa_get_initials_exit_tmp4 = `TAG_nfa_accept_sample_0_next_a;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_initials.exit*/
/*   %tmp4 = getelementptr inbounds %struct._bitset_t* %next, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8))
begin
nfa_accept_sample_nfa_get_initials_exit_tmp4_reg <= nfa_accept_sample_nfa_get_initials_exit_tmp4;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_initials_exit_tmp4_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16__0 = nfa_accept_sample_16__0_phi_temp;
end
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16__0 = nfa_accept_sample_16__0_phi_temp;
end
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9)) */
begin
nfa_accept_sample_16__0 = nfa_accept_sample_16__0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16__0_reg <= nfa_accept_sample_16__0;
if (^reset !== 1'bX && ^(nfa_accept_sample_16__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16__0_reg"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16__0_reg <= nfa_accept_sample_16__0;
if (^reset !== 1'bX && ^(nfa_accept_sample_16__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16__0_reg"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16__0_reg <= nfa_accept_sample_16__0;
if (^reset !== 1'bX && ^(nfa_accept_sample_16__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16__0_reg"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16__0_reg <= nfa_accept_sample_16__0;
if (^reset !== 1'bX && ^(nfa_accept_sample_16__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16__0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16_storemerge = nfa_accept_sample_16_storemerge_phi_temp;
end
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9)) */
begin
nfa_accept_sample_16_storemerge = nfa_accept_sample_16_storemerge_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16_storemerge_reg <= nfa_accept_sample_16_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_sample_16_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16_storemerge_reg"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16_storemerge_reg <= nfa_accept_sample_16_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_sample_16_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16_storemerge_reg"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_16_9))
begin
nfa_accept_sample_16_storemerge_reg <= nfa_accept_sample_16_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_sample_16_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %16*/
/*   %17 = icmp ult i32 %storemerge, %length*/
begin
nfa_accept_sample_16_17 = (nfa_accept_sample_16_storemerge < arg_length);
end
end
always @(*) begin
/* nfa_accept_sample: %18*/
/*   %19 = getelementptr inbounds i8* %.0, i32 1*/
begin
nfa_accept_sample_18_19 = (nfa_accept_sample_16__0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   %19 = getelementptr inbounds i8* %.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10))
begin
nfa_accept_sample_18_19_reg <= nfa_accept_sample_18_19;
if (^reset !== 1'bX && ^(nfa_accept_sample_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_18_19_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %18*/
/*   %20 = load i8* %.0, align 1*/
begin
nfa_accept_sample_18_20 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   %20 = load i8* %.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_12))
begin
nfa_accept_sample_18_20_reg <= nfa_accept_sample_18_20;
if (^reset !== 1'bX && ^(nfa_accept_sample_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_18_20_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17))
begin
nfa_accept_sample_21_any_0 = nfa_accept_sample_21_any_0_phi_temp;
end
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17)) */
begin
nfa_accept_sample_21_any_0 = nfa_accept_sample_21_any_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17))
begin
nfa_accept_sample_21_any_0_reg <= nfa_accept_sample_21_any_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_21_any_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_21_any_0_reg"); $finish; end
end
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17))
begin
nfa_accept_sample_21_any_0_reg <= nfa_accept_sample_21_any_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_21_any_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_21_any_0_reg"); $finish; end
end
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17))
begin
nfa_accept_sample_21_any_0_reg <= nfa_accept_sample_21_any_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_21_any_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_21_any_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_st_i22_0 = nfa_accept_sample_22_st_i22_0_phi_temp;
end
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_st_i22_0 = nfa_accept_sample_22_st_i22_0_phi_temp;
end
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18)) */
begin
nfa_accept_sample_22_st_i22_0 = nfa_accept_sample_22_st_i22_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_st_i22_0_reg <= nfa_accept_sample_22_st_i22_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_st_i22_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_st_i22_0_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_st_i22_0_reg <= nfa_accept_sample_22_st_i22_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_st_i22_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_st_i22_0_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_st_i22_0_reg <= nfa_accept_sample_22_st_i22_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_st_i22_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_st_i22_0_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_st_i22_0_reg <= nfa_accept_sample_22_st_i22_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_st_i22_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_st_i22_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_dt_i21_0 = nfa_accept_sample_22_dt_i21_0_phi_temp;
end
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_dt_i21_0 = nfa_accept_sample_22_dt_i21_0_phi_temp;
end
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18)) */
begin
nfa_accept_sample_22_dt_i21_0 = nfa_accept_sample_22_dt_i21_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_dt_i21_0_reg <= nfa_accept_sample_22_dt_i21_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_dt_i21_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_dt_i21_0_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_dt_i21_0_reg <= nfa_accept_sample_22_dt_i21_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_dt_i21_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_dt_i21_0_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_dt_i21_0_reg <= nfa_accept_sample_22_dt_i21_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_dt_i21_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_dt_i21_0_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_dt_i21_0_reg <= nfa_accept_sample_22_dt_i21_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_dt_i21_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_dt_i21_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_23 = nfa_accept_sample_22_23_phi_temp;
end
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18)) */
begin
nfa_accept_sample_22_23 = nfa_accept_sample_22_23_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_23_reg <= nfa_accept_sample_22_23;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_23_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_23_reg <= nfa_accept_sample_22_23;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_23_reg"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_22_18))
begin
nfa_accept_sample_22_23_reg <= nfa_accept_sample_22_23;
if (^reset !== 1'bX && ^(nfa_accept_sample_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_23_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %22*/
/*   %24 = icmp eq i32 %23, 0*/
begin
nfa_accept_sample_22_24 = (nfa_accept_sample_22_23 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %25*/
/*   %26 = add i32 %23, -1*/
begin
nfa_accept_sample_25_26 = (nfa_accept_sample_22_23_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %25*/
/*   %26 = add i32 %23, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
nfa_accept_sample_25_26_reg <= nfa_accept_sample_25_26;
if (^reset !== 1'bX && ^(nfa_accept_sample_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_25_26_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %25*/
/*   %27 = getelementptr inbounds i8* %st.i22.0, i32 1*/
begin
nfa_accept_sample_25_27 = (nfa_accept_sample_22_st_i22_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %25*/
/*   %27 = getelementptr inbounds i8* %st.i22.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
nfa_accept_sample_25_27_reg <= nfa_accept_sample_25_27;
if (^reset !== 1'bX && ^(nfa_accept_sample_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_25_27_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %25*/
/*   %28 = load i8* %st.i22.0, align 1*/
begin
nfa_accept_sample_25_28 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_accept_sample: %25*/
/*   %29 = getelementptr inbounds i8* %dt.i21.0, i32 1*/
begin
nfa_accept_sample_25_29 = (nfa_accept_sample_22_dt_i21_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %25*/
/*   %29 = getelementptr inbounds i8* %dt.i21.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
nfa_accept_sample_25_29_reg <= nfa_accept_sample_25_29;
if (^reset !== 1'bX && ^(nfa_accept_sample_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_25_29_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
begin
nfa_accept_sample_legup_memcpy_1_exit23_30 = bitset_end_return_val;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
nfa_accept_sample_legup_memcpy_1_exit23_30_reg <= nfa_accept_sample_legup_memcpy_1_exit23_30;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_1_exit23_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_1_exit23_30_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_st_i25_0 = nfa_accept_sample_31_st_i25_0_phi_temp;
end
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_st_i25_0 = nfa_accept_sample_31_st_i25_0_phi_temp;
end
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26)) */
begin
nfa_accept_sample_31_st_i25_0 = nfa_accept_sample_31_st_i25_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_st_i25_0_reg <= nfa_accept_sample_31_st_i25_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_st_i25_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_st_i25_0_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_st_i25_0_reg <= nfa_accept_sample_31_st_i25_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_st_i25_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_st_i25_0_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_st_i25_0_reg <= nfa_accept_sample_31_st_i25_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_st_i25_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_st_i25_0_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_st_i25_0_reg <= nfa_accept_sample_31_st_i25_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_st_i25_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_st_i25_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_dt_i24_0 = nfa_accept_sample_31_dt_i24_0_phi_temp;
end
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_dt_i24_0 = nfa_accept_sample_31_dt_i24_0_phi_temp;
end
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26)) */
begin
nfa_accept_sample_31_dt_i24_0 = nfa_accept_sample_31_dt_i24_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_dt_i24_0_reg <= nfa_accept_sample_31_dt_i24_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_dt_i24_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_dt_i24_0_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_dt_i24_0_reg <= nfa_accept_sample_31_dt_i24_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_dt_i24_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_dt_i24_0_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_dt_i24_0_reg <= nfa_accept_sample_31_dt_i24_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_dt_i24_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_dt_i24_0_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_dt_i24_0_reg <= nfa_accept_sample_31_dt_i24_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_dt_i24_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_dt_i24_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_32 = nfa_accept_sample_31_32_phi_temp;
end
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26)) */
begin
nfa_accept_sample_31_32 = nfa_accept_sample_31_32_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_32_reg <= nfa_accept_sample_31_32;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_32_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_32_reg <= nfa_accept_sample_31_32;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_32_reg"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_31_26))
begin
nfa_accept_sample_31_32_reg <= nfa_accept_sample_31_32;
if (^reset !== 1'bX && ^(nfa_accept_sample_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_32_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %31*/
/*   %33 = icmp eq i32 %32, 0*/
begin
nfa_accept_sample_31_33 = (nfa_accept_sample_31_32 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %34*/
/*   %35 = add i32 %32, -1*/
begin
nfa_accept_sample_34_35 = (nfa_accept_sample_31_32_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %34*/
/*   %35 = add i32 %32, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
nfa_accept_sample_34_35_reg <= nfa_accept_sample_34_35;
if (^reset !== 1'bX && ^(nfa_accept_sample_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_34_35_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %34*/
/*   %36 = getelementptr inbounds i8* %st.i25.0, i32 1*/
begin
nfa_accept_sample_34_36 = (nfa_accept_sample_31_st_i25_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %34*/
/*   %36 = getelementptr inbounds i8* %st.i25.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
nfa_accept_sample_34_36_reg <= nfa_accept_sample_34_36;
if (^reset !== 1'bX && ^(nfa_accept_sample_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_34_36_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %34*/
/*   %37 = load i8* %st.i25.0, align 1*/
begin
nfa_accept_sample_34_37 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_accept_sample: %34*/
/*   %38 = getelementptr inbounds i8* %dt.i24.0, i32 1*/
begin
nfa_accept_sample_34_38 = (nfa_accept_sample_31_dt_i24_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %34*/
/*   %38 = getelementptr inbounds i8* %dt.i24.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
nfa_accept_sample_34_38_reg <= nfa_accept_sample_34_38;
if (^reset !== 1'bX && ^(nfa_accept_sample_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_34_38_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
begin
nfa_accept_sample_39_40 = bitset_element_return_val;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
nfa_accept_sample_39_40_reg <= nfa_accept_sample_39_40;
if (^reset !== 1'bX && ^(nfa_accept_sample_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_39_40_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_st_i20_0 = nfa_accept_sample_41_st_i20_0_phi_temp;
end
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_st_i20_0 = nfa_accept_sample_41_st_i20_0_phi_temp;
end
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37)) */
begin
nfa_accept_sample_41_st_i20_0 = nfa_accept_sample_41_st_i20_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_st_i20_0_reg <= nfa_accept_sample_41_st_i20_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_st_i20_0_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_st_i20_0_reg <= nfa_accept_sample_41_st_i20_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_st_i20_0_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_st_i20_0_reg <= nfa_accept_sample_41_st_i20_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_st_i20_0_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_st_i20_0_reg <= nfa_accept_sample_41_st_i20_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_st_i20_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_st_i20_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_dt_i19_0 = nfa_accept_sample_41_dt_i19_0_phi_temp;
end
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_dt_i19_0 = nfa_accept_sample_41_dt_i19_0_phi_temp;
end
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37)) */
begin
nfa_accept_sample_41_dt_i19_0 = nfa_accept_sample_41_dt_i19_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_dt_i19_0_reg <= nfa_accept_sample_41_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_dt_i19_0_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_dt_i19_0_reg <= nfa_accept_sample_41_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_dt_i19_0_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_dt_i19_0_reg <= nfa_accept_sample_41_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_dt_i19_0_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_dt_i19_0_reg <= nfa_accept_sample_41_dt_i19_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_dt_i19_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_dt_i19_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_42 = nfa_accept_sample_41_42_phi_temp;
end
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37)) */
begin
nfa_accept_sample_41_42 = nfa_accept_sample_41_42_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_42_reg <= nfa_accept_sample_41_42;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_42_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_42_reg <= nfa_accept_sample_41_42;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_42_reg"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_41_37))
begin
nfa_accept_sample_41_42_reg <= nfa_accept_sample_41_42;
if (^reset !== 1'bX && ^(nfa_accept_sample_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_42_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %41*/
/*   %43 = icmp eq i32 %42, 0*/
begin
nfa_accept_sample_41_43 = (nfa_accept_sample_41_42 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %44*/
/*   %45 = add i32 %42, -1*/
begin
nfa_accept_sample_44_45 = (nfa_accept_sample_41_42_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %44*/
/*   %45 = add i32 %42, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
nfa_accept_sample_44_45_reg <= nfa_accept_sample_44_45;
if (^reset !== 1'bX && ^(nfa_accept_sample_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_44_45_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %44*/
/*   %46 = getelementptr inbounds i8* %st.i20.0, i32 1*/
begin
nfa_accept_sample_44_46 = (nfa_accept_sample_41_st_i20_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %44*/
/*   %46 = getelementptr inbounds i8* %st.i20.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
nfa_accept_sample_44_46_reg <= nfa_accept_sample_44_46;
if (^reset !== 1'bX && ^(nfa_accept_sample_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_44_46_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %44*/
/*   %47 = load i8* %st.i20.0, align 1*/
begin
nfa_accept_sample_44_47 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_accept_sample: %44*/
/*   %48 = getelementptr inbounds i8* %dt.i19.0, i32 1*/
begin
nfa_accept_sample_44_48 = (nfa_accept_sample_41_dt_i19_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %44*/
/*   %48 = getelementptr inbounds i8* %dt.i19.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
nfa_accept_sample_44_48_reg <= nfa_accept_sample_44_48;
if (^reset !== 1'bX && ^(nfa_accept_sample_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_44_48_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %49*/
/*   %50 = icmp eq i8 %any.0, 0*/
begin
nfa_accept_sample_49_50 = (nfa_accept_sample_21_any_0_reg == 8'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_st_i17_0 = nfa_accept_sample_51_st_i17_0_phi_temp;
end
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_st_i17_0 = nfa_accept_sample_51_st_i17_0_phi_temp;
end
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46)) */
begin
nfa_accept_sample_51_st_i17_0 = nfa_accept_sample_51_st_i17_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_st_i17_0_reg <= nfa_accept_sample_51_st_i17_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_st_i17_0_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_st_i17_0_reg <= nfa_accept_sample_51_st_i17_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_st_i17_0_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_st_i17_0_reg <= nfa_accept_sample_51_st_i17_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_st_i17_0_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_st_i17_0_reg <= nfa_accept_sample_51_st_i17_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_st_i17_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_st_i17_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_dt_i16_0 = nfa_accept_sample_51_dt_i16_0_phi_temp;
end
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_dt_i16_0 = nfa_accept_sample_51_dt_i16_0_phi_temp;
end
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46)) */
begin
nfa_accept_sample_51_dt_i16_0 = nfa_accept_sample_51_dt_i16_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_dt_i16_0_reg <= nfa_accept_sample_51_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_dt_i16_0_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_dt_i16_0_reg <= nfa_accept_sample_51_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_dt_i16_0_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_dt_i16_0_reg <= nfa_accept_sample_51_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_dt_i16_0_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_dt_i16_0_reg <= nfa_accept_sample_51_dt_i16_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_dt_i16_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_dt_i16_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_52 = nfa_accept_sample_51_52_phi_temp;
end
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46)) */
begin
nfa_accept_sample_51_52 = nfa_accept_sample_51_52_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_52_reg <= nfa_accept_sample_51_52;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_52_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_52_reg <= nfa_accept_sample_51_52;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_52_reg"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_51_46))
begin
nfa_accept_sample_51_52_reg <= nfa_accept_sample_51_52;
if (^reset !== 1'bX && ^(nfa_accept_sample_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_52_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %51*/
/*   %53 = icmp eq i32 %52, 0*/
begin
nfa_accept_sample_51_53 = (nfa_accept_sample_51_52 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %54*/
/*   %55 = add i32 %52, -1*/
begin
nfa_accept_sample_54_55 = (nfa_accept_sample_51_52_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %54*/
/*   %55 = add i32 %52, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
nfa_accept_sample_54_55_reg <= nfa_accept_sample_54_55;
if (^reset !== 1'bX && ^(nfa_accept_sample_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_54_55_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %54*/
/*   %56 = getelementptr inbounds i32* %st.i17.0, i32 1*/
begin
nfa_accept_sample_54_56 = (nfa_accept_sample_51_st_i17_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %54*/
/*   %56 = getelementptr inbounds i32* %st.i17.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
nfa_accept_sample_54_56_reg <= nfa_accept_sample_54_56;
if (^reset !== 1'bX && ^(nfa_accept_sample_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_54_56_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %54*/
/*   %57 = load i32* %st.i17.0, align 4*/
begin
nfa_accept_sample_54_57 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_accept_sample: %54*/
/*   %58 = getelementptr inbounds i32* %dt.i16.0, i32 1*/
begin
nfa_accept_sample_54_58 = (nfa_accept_sample_51_dt_i16_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %54*/
/*   %58 = getelementptr inbounds i32* %dt.i16.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
nfa_accept_sample_54_58_reg <= nfa_accept_sample_54_58;
if (^reset !== 1'bX && ^(nfa_accept_sample_54_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_54_58_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0 = nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0 = nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51)) */
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0 = nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0 = nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0 = nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51)) */
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0 = nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg <= nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_59 = nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51)) */
begin
nfa_accept_sample_legup_memcpy_4_exit18_59 = nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_59_reg <= nfa_accept_sample_legup_memcpy_4_exit18_59;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_59_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_59_reg <= nfa_accept_sample_legup_memcpy_4_exit18_59;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_59_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_51))
begin
nfa_accept_sample_legup_memcpy_4_exit18_59_reg <= nfa_accept_sample_legup_memcpy_4_exit18_59;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit18_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_59_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %60 = icmp eq i32 %59, 0*/
begin
nfa_accept_sample_legup_memcpy_4_exit18_60 = (nfa_accept_sample_legup_memcpy_4_exit18_59 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %61*/
/*   %62 = add i32 %59, -1*/
begin
nfa_accept_sample_61_62 = (nfa_accept_sample_legup_memcpy_4_exit18_59_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %61*/
/*   %62 = add i32 %59, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
nfa_accept_sample_61_62_reg <= nfa_accept_sample_61_62;
if (^reset !== 1'bX && ^(nfa_accept_sample_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_61_62_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %61*/
/*   %63 = getelementptr inbounds i32* %st.i14.0, i32 1*/
begin
nfa_accept_sample_61_63 = (nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %61*/
/*   %63 = getelementptr inbounds i32* %st.i14.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
nfa_accept_sample_61_63_reg <= nfa_accept_sample_61_63;
if (^reset !== 1'bX && ^(nfa_accept_sample_61_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_61_63_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %61*/
/*   %64 = load i32* %st.i14.0, align 4*/
begin
nfa_accept_sample_61_64 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_accept_sample: %61*/
/*   %65 = getelementptr inbounds i32* %dt.i13.0, i32 1*/
begin
nfa_accept_sample_61_65 = (nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %61*/
/*   %65 = getelementptr inbounds i32* %dt.i13.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
nfa_accept_sample_61_65_reg <= nfa_accept_sample_61_65;
if (^reset !== 1'bX && ^(nfa_accept_sample_61_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_61_65_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0 = nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0 = nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56)) */
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0 = nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_st_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_st_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_st_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_st_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0 = nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0 = nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56)) */
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0 = nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg <= nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_66 = nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp;
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56)) */
begin
nfa_accept_sample_legup_memcpy_4_exit15_66 = nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_66_reg <= nfa_accept_sample_legup_memcpy_4_exit15_66;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_66_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_66_reg <= nfa_accept_sample_legup_memcpy_4_exit15_66;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_66_reg"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_56))
begin
nfa_accept_sample_legup_memcpy_4_exit15_66_reg <= nfa_accept_sample_legup_memcpy_4_exit15_66;
if (^reset !== 1'bX && ^(nfa_accept_sample_legup_memcpy_4_exit15_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_66_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %67 = icmp eq i32 %66, 0*/
begin
nfa_accept_sample_legup_memcpy_4_exit15_67 = (nfa_accept_sample_legup_memcpy_4_exit15_66 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %68*/
/*   %69 = add i32 %66, -1*/
begin
nfa_accept_sample_68_69 = (nfa_accept_sample_legup_memcpy_4_exit15_66_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %68*/
/*   %69 = add i32 %66, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
nfa_accept_sample_68_69_reg <= nfa_accept_sample_68_69;
if (^reset !== 1'bX && ^(nfa_accept_sample_68_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_68_69_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %68*/
/*   %70 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
nfa_accept_sample_68_70 = (nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %68*/
/*   %70 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
nfa_accept_sample_68_70_reg <= nfa_accept_sample_68_70;
if (^reset !== 1'bX && ^(nfa_accept_sample_68_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_68_70_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %68*/
/*   %71 = load i32* %st.i.0, align 4*/
begin
nfa_accept_sample_68_71 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_accept_sample: %68*/
/*   %72 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
nfa_accept_sample_68_72 = (nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %68*/
/*   %72 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
nfa_accept_sample_68_72_reg <= nfa_accept_sample_68_72;
if (^reset !== 1'bX && ^(nfa_accept_sample_68_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_68_72_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %73*/
/*   %74 = add i32 %storemerge, 1*/
begin
nfa_accept_sample_73_74 = (nfa_accept_sample_16_storemerge_reg + 32'd1);
end
end
always @(*) begin
/* nfa_accept_sample: %75*/
/*   %tmp1.i12 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1, i32 0, i32 0*/
begin
nfa_accept_sample_75_tmp1_i12 = (arg_nfa + 12);
end
end
always @(*) begin
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_st_i_i10_0 = nfa_accept_sample_76_st_i_i10_0_phi_temp;
end
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_st_i_i10_0 = nfa_accept_sample_76_st_i_i10_0_phi_temp;
end
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62)) */
begin
nfa_accept_sample_76_st_i_i10_0 = nfa_accept_sample_76_st_i_i10_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_st_i_i10_0_reg <= nfa_accept_sample_76_st_i_i10_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_st_i_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_st_i_i10_0_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_st_i_i10_0_reg <= nfa_accept_sample_76_st_i_i10_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_st_i_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_st_i_i10_0_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_st_i_i10_0_reg <= nfa_accept_sample_76_st_i_i10_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_st_i_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_st_i_i10_0_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_st_i_i10_0_reg <= nfa_accept_sample_76_st_i_i10_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_st_i_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_st_i_i10_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_dt_i_i9_0 = nfa_accept_sample_76_dt_i_i9_0_phi_temp;
end
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_dt_i_i9_0 = nfa_accept_sample_76_dt_i_i9_0_phi_temp;
end
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62)) */
begin
nfa_accept_sample_76_dt_i_i9_0 = nfa_accept_sample_76_dt_i_i9_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_dt_i_i9_0_reg <= nfa_accept_sample_76_dt_i_i9_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_dt_i_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_dt_i_i9_0_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_dt_i_i9_0_reg <= nfa_accept_sample_76_dt_i_i9_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_dt_i_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_dt_i_i9_0_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_dt_i_i9_0_reg <= nfa_accept_sample_76_dt_i_i9_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_dt_i_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_dt_i_i9_0_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_dt_i_i9_0_reg <= nfa_accept_sample_76_dt_i_i9_0;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_dt_i_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_dt_i_i9_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_77 = nfa_accept_sample_76_77_phi_temp;
end
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62)) */
begin
nfa_accept_sample_76_77 = nfa_accept_sample_76_77_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_77_reg <= nfa_accept_sample_76_77;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_77_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_77_reg <= nfa_accept_sample_76_77;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_77_reg"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_76_62))
begin
nfa_accept_sample_76_77_reg <= nfa_accept_sample_76_77;
if (^reset !== 1'bX && ^(nfa_accept_sample_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_77_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %76*/
/*   %78 = icmp eq i32 %77, 0*/
begin
nfa_accept_sample_76_78 = (nfa_accept_sample_76_77 == 32'd0);
end
end
always @(*) begin
/* nfa_accept_sample: %79*/
/*   %80 = add i32 %77, -1*/
begin
nfa_accept_sample_79_80 = (nfa_accept_sample_76_77_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %79*/
/*   %80 = add i32 %77, -1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
nfa_accept_sample_79_80_reg <= nfa_accept_sample_79_80;
if (^reset !== 1'bX && ^(nfa_accept_sample_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_79_80_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %79*/
/*   %81 = getelementptr inbounds i32* %st.i.i10.0, i32 1*/
begin
nfa_accept_sample_79_81 = (nfa_accept_sample_76_st_i_i10_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %79*/
/*   %81 = getelementptr inbounds i32* %st.i.i10.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
nfa_accept_sample_79_81_reg <= nfa_accept_sample_79_81;
if (^reset !== 1'bX && ^(nfa_accept_sample_79_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_79_81_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %79*/
/*   %82 = load i32* %st.i.i10.0, align 4*/
begin
nfa_accept_sample_79_82 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_accept_sample: %79*/
/*   %83 = getelementptr inbounds i32* %dt.i.i9.0, i32 1*/
begin
nfa_accept_sample_79_83 = (nfa_accept_sample_76_dt_i_i9_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %79*/
/*   %83 = getelementptr inbounds i32* %dt.i.i9.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
nfa_accept_sample_79_83_reg <= nfa_accept_sample_79_83;
if (^reset !== 1'bX && ^(nfa_accept_sample_79_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_79_83_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
begin
nfa_accept_sample_nfa_get_finals_exit_84 = bitset_any_return_val;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
nfa_accept_sample_nfa_get_finals_exit_84_reg <= nfa_accept_sample_nfa_get_finals_exit_84;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_finals_exit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_nfa_get_finals_exit_84_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_sample: %.loopexit*/
/*   %storemerge2 = phi i1 [ %84, %nfa_get_finals.exit ], [ false, %.loopexit.loopexit ]*/
begin
nfa_accept_sample__loopexit_storemerge2 = nfa_accept_sample__loopexit_storemerge2_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_0_1))
begin
bitset_init_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_0_1))
begin
bitset_init_arg_0 <= `TAG_nfa_accept_sample_0_next_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_next_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_init_arg_0"); $finish; end
end
end
always @(*) begin
bitset_init_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_init_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_init_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
bitset_init_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_12))
begin
bitset_clear_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_clear_start"); $finish; end
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
bitset_clear_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_clear_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_12))
begin
bitset_clear_arg_0 <= `TAG_nfa_accept_sample_0_next_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_next_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_clear_arg_0"); $finish; end
end
end
always @(*) begin
bitset_clear_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
bitset_clear_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_clear_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
bitset_clear_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_clear_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
bitset_clear_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_14))
begin
bitset_first_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
bitset_first_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_14))
begin
bitset_first_arg_0 <= `TAG_nfa_accept_sample_0_j_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_j_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_14))
begin
bitset_first_arg_1 <= `TAG_nfa_accept_sample_0_current_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_current_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_1"); $finish; end
end
end
always @(*) begin
bitset_first_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
bitset_first_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_first_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
bitset_first_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_first_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
bitset_first_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22))
begin
bitset_end_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
bitset_end_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit23_22))
begin
bitset_end_arg_0 <= `TAG_nfa_accept_sample_0_1_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_arg_0"); $finish; end
end
end
always @(*) begin
bitset_end_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
bitset_end_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_end_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
bitset_end_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_end_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
bitset_end_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_30))
begin
bitset_element_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
bitset_element_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_30))
begin
bitset_element_arg_0 <= `TAG_nfa_accept_sample_0_2_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_arg_0"); $finish; end
end
end
always @(*) begin
bitset_element_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
bitset_element_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_element_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
bitset_element_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_element_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
bitset_element_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32))
begin
nfa_get_sucessors_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
nfa_get_sucessors_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32))
begin
nfa_get_sucessors_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32))
begin
nfa_get_sucessors_arg_state <= nfa_accept_sample_39_40_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_39_40_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_state"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32))
begin
nfa_get_sucessors_arg_sym <= nfa_accept_sample_18_20_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_18_20_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_sym"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_32))
begin
nfa_get_sucessors_arg_bs <= `TAG_nfa_accept_sample_0_tmp_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_tmp_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_bs"); $finish; end
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
nfa_get_sucessors_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
nfa_get_sucessors_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
nfa_get_sucessors_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_34))
begin
bitset_union_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_union_start"); $finish; end
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
bitset_union_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_union_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_34))
begin
bitset_union_arg_0 <= `TAG_nfa_accept_sample_0_next_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_next_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_union_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_39_34))
begin
bitset_union_arg_1 <= `TAG_nfa_accept_sample_0_tmp_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_tmp_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_union_arg_1"); $finish; end
end
end
always @(*) begin
bitset_union_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
bitset_union_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_union_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
bitset_union_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_union_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
bitset_union_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41))
begin
bitset_next_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_next_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41))
begin
bitset_next_arg_0 <= `TAG_nfa_accept_sample_0_j_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_j_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41))
begin
bitset_next_arg_1 <= `TAG_nfa_accept_sample_0_current_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_current_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_41))
begin
bitset_next_arg_2 <= `TAG_nfa_accept_sample_0_3_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_3_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_2"); $finish; end
end
end
always @(*) begin
bitset_next_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_next_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_next_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_next_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_next_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
bitset_next_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66))
begin
bitset_intersect_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_intersect_start"); $finish; end
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_intersect_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_intersect_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66))
begin
bitset_intersect_arg_0 <= `TAG_nfa_accept_sample_0_current_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_current_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_intersect_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_66))
begin
bitset_intersect_arg_1 <= `TAG_nfa_accept_sample_0_tmp_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_tmp_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_intersect_arg_1"); $finish; end
end
end
always @(*) begin
bitset_intersect_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_intersect_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_intersect_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_intersect_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_intersect_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
bitset_intersect_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68))
begin
bitset_any_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_any_start"); $finish; end
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
bitset_any_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_any_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_68))
begin
bitset_any_arg_0 <= `TAG_nfa_accept_sample_0_current_a;
if (^reset !== 1'bX && ^(`TAG_nfa_accept_sample_0_current_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_any_arg_0"); $finish; end
end
end
always @(*) begin
bitset_any_memory_controller_waitrequest = 1'd0;
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
bitset_any_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_any_memory_controller_out_a = 1'd0;
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
bitset_any_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_any_memory_controller_out_b = 1'd0;
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
bitset_any_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_4_st_i_i_0_phi_temp <= nfa_accept_sample_0_tmp1_i_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_0_tmp1_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_st_i_i_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %st.i.i.0 = phi i32* [ %tmp1.i, %0 ], [ %9, %7 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_4_st_i_i_0_phi_temp <= nfa_accept_sample_7_9_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_7_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_st_i_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_4_dt_i_i_0_phi_temp <= nfa_accept_sample_0_tmp_i_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_0_tmp_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_dt_i_i_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %dt.i.i.0 = phi i32* [ %tmp.i, %0 ], [ %11, %7 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_4_dt_i_i_0_phi_temp <= nfa_accept_sample_7_11_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_7_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_dt_i_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_4_5_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_5_phi_temp"); $finish; end
end
/* nfa_accept_sample: %4*/
/*   %5 = phi i32 [ 3, %0 ], [ %8, %7 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_4_5_phi_temp <= nfa_accept_sample_7_8_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_7_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_4_5_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_16__0_phi_temp <= arg_sample;
if (^reset !== 1'bX && ^(arg_sample) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16__0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %.0 = phi i8* [ %sample, %nfa_get_initials.exit ], [ %19, %73 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_73_60) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_16__0_phi_temp <= nfa_accept_sample_18_19_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_18_19_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16__0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_initials_exit_8) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_16_storemerge_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16_storemerge_phi_temp"); $finish; end
end
/* nfa_accept_sample: %16*/
/*   %storemerge = phi i32 [ 0, %nfa_get_initials.exit ], [ %74, %73 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_73_60) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_16_storemerge_phi_temp <= nfa_accept_sample_73_74;
if (^reset !== 1'bX && ^(nfa_accept_sample_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_16_storemerge_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_18_16) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_21_any_0_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_21_any_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %21*/
/*   %any.0 = phi i8 [ 0, %18 ], [ 1, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_1_exit_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_21_any_0_phi_temp <= 8'd1;
if (^reset !== 1'bX && ^(8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_21_any_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_22_st_i22_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_13_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_st_i22_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %st.i22.0 = phi i8* [ %13, %21 ], [ %27, %25 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_22_st_i22_0_phi_temp <= nfa_accept_sample_25_27_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_25_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_st_i22_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_22_dt_i21_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_12_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_dt_i21_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %dt.i21.0 = phi i8* [ %12, %21 ], [ %29, %25 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_22_dt_i21_0_phi_temp <= nfa_accept_sample_25_29_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_25_29_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_dt_i21_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_21_17) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_22_23_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_23_phi_temp"); $finish; end
end
/* nfa_accept_sample: %22*/
/*   %23 = phi i32 [ 3, %21 ], [ %26, %25 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_22_23_phi_temp <= nfa_accept_sample_25_26_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_25_26_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_22_23_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_31_st_i25_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_13_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_st_i25_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %st.i25.0 = phi i8* [ %36, %34 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_31_st_i25_0_phi_temp <= nfa_accept_sample_34_36_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_34_36_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_st_i25_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_31_dt_i24_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_14_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_dt_i24_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %dt.i24.0 = phi i8* [ %38, %34 ], [ %14, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_31_dt_i24_0_phi_temp <= nfa_accept_sample_34_38_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_34_38_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_dt_i24_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_31_32_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_32_phi_temp"); $finish; end
end
/* nfa_accept_sample: %31*/
/*   %32 = phi i32 [ %35, %34 ], [ 3, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_31_32_phi_temp <= nfa_accept_sample_34_35_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_34_35_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_31_32_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_36) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_41_st_i20_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_13_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_st_i20_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %st.i20.0 = phi i8* [ %13, %39 ], [ %46, %44 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_41_st_i20_0_phi_temp <= nfa_accept_sample_44_46_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_44_46_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_st_i20_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_36) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_41_dt_i19_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_15_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_dt_i19_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %dt.i19.0 = phi i8* [ %15, %39 ], [ %48, %44 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_41_dt_i19_0_phi_temp <= nfa_accept_sample_44_48_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_44_48_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_dt_i19_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_39_36) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_41_42_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_42_phi_temp"); $finish; end
end
/* nfa_accept_sample: %41*/
/*   %42 = phi i32 [ 3, %39 ], [ %45, %44 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_41_42_phi_temp <= nfa_accept_sample_44_45_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_44_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_41_42_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader1_45) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_51_st_i17_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_tmp4_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_st_i17_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %st.i17.0 = phi i32* [ %56, %54 ], [ %tmp4, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_51_st_i17_0_phi_temp <= nfa_accept_sample_54_56_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_54_56_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_st_i17_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader1_45) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_51_dt_i16_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_tmp3_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_dt_i16_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %dt.i16.0 = phi i32* [ %58, %54 ], [ %tmp3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_51_dt_i16_0_phi_temp <= nfa_accept_sample_54_58_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_54_58_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_dt_i16_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__preheader1_45) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_51_52_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_52_phi_temp"); $finish; end
end
/* nfa_accept_sample: %51*/
/*   %52 = phi i32 [ %55, %54 ], [ 3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_51_52_phi_temp <= nfa_accept_sample_54_55_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_54_55_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_51_52_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp <= nfa_accept_sample_0_tmp_i_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_0_tmp_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %st.i14.0 = phi i32* [ %63, %61 ], [ %tmp.i, %legup_memcpy_4.exit18.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp <= nfa_accept_sample_61_63_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_61_63_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_tmp4_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %dt.i13.0 = phi i32* [ %65, %61 ], [ %tmp4, %legup_memcpy_4.exit18.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp <= nfa_accept_sample_61_65_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_61_65_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit18_loopexit_50) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit18*/
/*   %59 = phi i32 [ %62, %61 ], [ 3, %legup_memcpy_4.exit18.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp <= nfa_accept_sample_61_62_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_61_62_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit18_59_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_tmp3_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %st.i.0 = phi i32* [ %70, %68 ], [ %tmp3, %legup_memcpy_4.exit15.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp <= nfa_accept_sample_68_70_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_68_70_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp <= nfa_accept_sample_0_tmp_i_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_0_tmp_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %dt.i.0 = phi i32* [ %72, %68 ], [ %tmp.i, %legup_memcpy_4.exit15.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp <= nfa_accept_sample_68_72_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_68_72_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_legup_memcpy_4_exit15_loopexit_55) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp"); $finish; end
end
/* nfa_accept_sample: %legup_memcpy_4.exit15*/
/*   %66 = phi i32 [ %69, %68 ], [ 3, %legup_memcpy_4.exit15.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp <= nfa_accept_sample_68_69_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_68_69_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_legup_memcpy_4_exit15_66_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_75_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_76_st_i_i10_0_phi_temp <= nfa_accept_sample_75_tmp1_i12;
if (^reset !== 1'bX && ^(nfa_accept_sample_75_tmp1_i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_st_i_i10_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %st.i.i10.0 = phi i32* [ %tmp1.i12, %75 ], [ %81, %79 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_76_st_i_i10_0_phi_temp <= nfa_accept_sample_79_81_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_79_81_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_st_i_i10_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_75_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_76_dt_i_i9_0_phi_temp <= nfa_accept_sample_nfa_get_initials_exit_tmp3_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_initials_exit_tmp3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_dt_i_i9_0_phi_temp"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %dt.i.i9.0 = phi i32* [ %tmp3, %75 ], [ %83, %79 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_76_dt_i_i9_0_phi_temp <= nfa_accept_sample_79_83_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_79_83_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_dt_i_i9_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_75_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_76_77_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_77_phi_temp"); $finish; end
end
/* nfa_accept_sample: %76*/
/*   %77 = phi i32 [ 3, %75 ], [ %80, %79 ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample_76_77_phi_temp <= nfa_accept_sample_79_80_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_79_80_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_76_77_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_sample: %.loopexit*/
/*   %storemerge2 = phi i1 [ %84, %nfa_get_finals.exit ], [ false, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB_nfa_get_finals_exit_70) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample__loopexit_storemerge2_phi_temp <= nfa_accept_sample_nfa_get_finals_exit_84_reg;
if (^reset !== 1'bX && ^(nfa_accept_sample_nfa_get_finals_exit_84_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample__loopexit_storemerge2_phi_temp"); $finish; end
end
/* nfa_accept_sample: %.loopexit*/
/*   %storemerge2 = phi i1 [ %84, %nfa_get_finals.exit ], [ false, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_loopexit_71) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_sample__loopexit_storemerge2_phi_temp <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample__loopexit_storemerge2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_accept_sample: %.loopexit*/
/*   ret i1 %storemerge2*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_72))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_accept_sample: %.loopexit*/
/*   ret i1 %storemerge2*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB__loopexit_72))
begin
return_val <= nfa_accept_sample__loopexit_storemerge2;
if (^reset !== 1'bX && ^(nfa_accept_sample__loopexit_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = bitset_init_memory_controller_enable_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_enable_a = bitset_clear_memory_controller_enable_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_enable_a = bitset_first_memory_controller_enable_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_enable_a = bitset_end_memory_controller_enable_a;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_enable_a = bitset_element_memory_controller_enable_a;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_enable_a = nfa_get_sucessors_memory_controller_enable_a;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_enable_a = bitset_union_memory_controller_enable_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_enable_a = bitset_next_memory_controller_enable_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_enable_a = bitset_intersect_memory_controller_enable_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_enable_a = bitset_any_memory_controller_enable_a;
end
/* nfa_accept_sample: %7*/
/*   %10 = load i32* %st.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %7*/
/*   store i32 %10, i32* %dt.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %18*/
/*   %20 = load i8* %.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %25*/
/*   %28 = load i8* %st.i22.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %25*/
/*   store i8 %28, i8* %dt.i21.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %34*/
/*   %37 = load i8* %st.i25.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %34*/
/*   store i8 %37, i8* %dt.i24.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %44*/
/*   %47 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %44*/
/*   store i8 %47, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %54*/
/*   %57 = load i32* %st.i17.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %54*/
/*   store i32 %57, i32* %dt.i16.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %61*/
/*   %64 = load i32* %st.i14.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %61*/
/*   store i32 %64, i32* %dt.i13.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %68*/
/*   %71 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %68*/
/*   store i32 %71, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %79*/
/*   %82 = load i32* %st.i.i10.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_accept_sample: %79*/
/*   store i32 %82, i32* %dt.i.i9.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a = bitset_init_memory_controller_address_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_address_a = bitset_clear_memory_controller_address_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_address_a = bitset_first_memory_controller_address_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_address_a = bitset_end_memory_controller_address_a;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_address_a = bitset_element_memory_controller_address_a;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_address_a = nfa_get_sucessors_memory_controller_address_a;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_address_a = bitset_union_memory_controller_address_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_address_a = bitset_next_memory_controller_address_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_address_a = bitset_intersect_memory_controller_address_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_address_a = bitset_any_memory_controller_address_a;
end
/* nfa_accept_sample: %7*/
/*   %10 = load i32* %st.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
memory_controller_address_a = nfa_accept_sample_4_st_i_i_0_reg;
end
/* nfa_accept_sample: %7*/
/*   store i32 %10, i32* %dt.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7))
begin
memory_controller_address_a = nfa_accept_sample_4_dt_i_i_0_reg;
end
/* nfa_accept_sample: %18*/
/*   %20 = load i8* %.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10))
begin
memory_controller_address_a = nfa_accept_sample_16__0_reg;
end
/* nfa_accept_sample: %25*/
/*   %28 = load i8* %st.i22.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
memory_controller_address_a = nfa_accept_sample_22_st_i22_0_reg;
end
/* nfa_accept_sample: %25*/
/*   store i8 %28, i8* %dt.i21.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21))
begin
memory_controller_address_a = nfa_accept_sample_22_dt_i21_0_reg;
end
/* nfa_accept_sample: %34*/
/*   %37 = load i8* %st.i25.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
memory_controller_address_a = nfa_accept_sample_31_st_i25_0_reg;
end
/* nfa_accept_sample: %34*/
/*   store i8 %37, i8* %dt.i24.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29))
begin
memory_controller_address_a = nfa_accept_sample_31_dt_i24_0_reg;
end
/* nfa_accept_sample: %44*/
/*   %47 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
memory_controller_address_a = nfa_accept_sample_41_st_i20_0_reg;
end
/* nfa_accept_sample: %44*/
/*   store i8 %47, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40))
begin
memory_controller_address_a = nfa_accept_sample_41_dt_i19_0_reg;
end
/* nfa_accept_sample: %54*/
/*   %57 = load i32* %st.i17.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
memory_controller_address_a = nfa_accept_sample_51_st_i17_0_reg;
end
/* nfa_accept_sample: %54*/
/*   store i32 %57, i32* %dt.i16.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49))
begin
memory_controller_address_a = nfa_accept_sample_51_dt_i16_0_reg;
end
/* nfa_accept_sample: %61*/
/*   %64 = load i32* %st.i14.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
memory_controller_address_a = nfa_accept_sample_legup_memcpy_4_exit18_st_i14_0_reg;
end
/* nfa_accept_sample: %61*/
/*   store i32 %64, i32* %dt.i13.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54))
begin
memory_controller_address_a = nfa_accept_sample_legup_memcpy_4_exit18_dt_i13_0_reg;
end
/* nfa_accept_sample: %68*/
/*   %71 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
memory_controller_address_a = nfa_accept_sample_legup_memcpy_4_exit15_st_i_0_reg;
end
/* nfa_accept_sample: %68*/
/*   store i32 %71, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59))
begin
memory_controller_address_a = nfa_accept_sample_legup_memcpy_4_exit15_dt_i_0_reg;
end
/* nfa_accept_sample: %79*/
/*   %82 = load i32* %st.i.i10.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
memory_controller_address_a = nfa_accept_sample_76_st_i_i10_0_reg;
end
/* nfa_accept_sample: %79*/
/*   store i32 %82, i32* %dt.i.i9.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65))
begin
memory_controller_address_a = nfa_accept_sample_76_dt_i_i9_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = bitset_init_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_write_enable_a = bitset_clear_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_write_enable_a = bitset_first_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_write_enable_a = bitset_end_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_write_enable_a = bitset_element_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_write_enable_a = nfa_get_sucessors_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_write_enable_a = bitset_union_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_write_enable_a = bitset_next_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_write_enable_a = bitset_intersect_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_write_enable_a = bitset_any_memory_controller_write_enable_a;
end
/* nfa_accept_sample: %7*/
/*   %10 = load i32* %st.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %7*/
/*   store i32 %10, i32* %dt.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %18*/
/*   %20 = load i8* %.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %25*/
/*   %28 = load i8* %st.i22.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %25*/
/*   store i8 %28, i8* %dt.i21.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %34*/
/*   %37 = load i8* %st.i25.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %34*/
/*   store i8 %37, i8* %dt.i24.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %44*/
/*   %47 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %44*/
/*   store i8 %47, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %54*/
/*   %57 = load i32* %st.i17.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %54*/
/*   store i32 %57, i32* %dt.i16.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %61*/
/*   %64 = load i32* %st.i14.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %61*/
/*   store i32 %64, i32* %dt.i13.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %68*/
/*   %71 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %68*/
/*   store i32 %71, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_accept_sample: %79*/
/*   %82 = load i32* %st.i.i10.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_sample: %79*/
/*   store i32 %82, i32* %dt.i.i9.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a = bitset_init_memory_controller_in_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_in_a = bitset_clear_memory_controller_in_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_in_a = bitset_first_memory_controller_in_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_in_a = bitset_end_memory_controller_in_a;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_in_a = bitset_element_memory_controller_in_a;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_in_a = nfa_get_sucessors_memory_controller_in_a;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_in_a = bitset_union_memory_controller_in_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_in_a = bitset_next_memory_controller_in_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_in_a = bitset_intersect_memory_controller_in_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_in_a = bitset_any_memory_controller_in_a;
end
/* nfa_accept_sample: %7*/
/*   store i32 %10, i32* %dt.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7))
begin
memory_controller_in_a = {nfa_accept_sample_7_10};
end
/* nfa_accept_sample: %25*/
/*   store i8 %28, i8* %dt.i21.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21))
begin
memory_controller_in_a = {nfa_accept_sample_25_28};
end
/* nfa_accept_sample: %34*/
/*   store i8 %37, i8* %dt.i24.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29))
begin
memory_controller_in_a = {nfa_accept_sample_34_37};
end
/* nfa_accept_sample: %44*/
/*   store i8 %47, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40))
begin
memory_controller_in_a = {nfa_accept_sample_44_47};
end
/* nfa_accept_sample: %54*/
/*   store i32 %57, i32* %dt.i16.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49))
begin
memory_controller_in_a = {nfa_accept_sample_54_57};
end
/* nfa_accept_sample: %61*/
/*   store i32 %64, i32* %dt.i13.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54))
begin
memory_controller_in_a = {nfa_accept_sample_61_64};
end
/* nfa_accept_sample: %68*/
/*   store i32 %71, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59))
begin
memory_controller_in_a = {nfa_accept_sample_68_71};
end
/* nfa_accept_sample: %79*/
/*   store i32 %82, i32* %dt.i.i9.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65))
begin
memory_controller_in_a = {nfa_accept_sample_79_82};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a = bitset_init_memory_controller_size_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_size_a = bitset_clear_memory_controller_size_a;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_size_a = bitset_first_memory_controller_size_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_size_a = bitset_end_memory_controller_size_a;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_size_a = bitset_element_memory_controller_size_a;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_size_a = nfa_get_sucessors_memory_controller_size_a;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_size_a = bitset_union_memory_controller_size_a;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_size_a = bitset_next_memory_controller_size_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_size_a = bitset_intersect_memory_controller_size_a;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_size_a = bitset_any_memory_controller_size_a;
end
/* nfa_accept_sample: %7*/
/*   %10 = load i32* %st.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_5))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %7*/
/*   store i32 %10, i32* %dt.i.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_7_7))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %18*/
/*   %20 = load i8* %.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_18_10))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %25*/
/*   %28 = load i8* %st.i22.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_19))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %25*/
/*   store i8 %28, i8* %dt.i21.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_25_21))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %34*/
/*   %37 = load i8* %st.i25.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_27))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %34*/
/*   store i8 %37, i8* %dt.i24.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_34_29))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %44*/
/*   %47 = load i8* %st.i20.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_38))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %44*/
/*   store i8 %47, i8* %dt.i19.0, align 1*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_44_40))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_sample: %54*/
/*   %57 = load i32* %st.i17.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_47))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %54*/
/*   store i32 %57, i32* %dt.i16.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_54_49))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %61*/
/*   %64 = load i32* %st.i14.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_52))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %61*/
/*   store i32 %64, i32* %dt.i13.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_61_54))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %68*/
/*   %71 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_57))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %68*/
/*   store i32 %71, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_68_59))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %79*/
/*   %82 = load i32* %st.i.i10.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_63))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_accept_sample: %79*/
/*   store i32 %82, i32* %dt.i.i9.0, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_sample_BB_79_65))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = bitset_init_memory_controller_enable_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_enable_b = bitset_clear_memory_controller_enable_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_enable_b = bitset_first_memory_controller_enable_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_enable_b = bitset_end_memory_controller_enable_b;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_enable_b = bitset_element_memory_controller_enable_b;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_enable_b = nfa_get_sucessors_memory_controller_enable_b;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_enable_b = bitset_union_memory_controller_enable_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_enable_b = bitset_next_memory_controller_enable_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_enable_b = bitset_intersect_memory_controller_enable_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_enable_b = bitset_any_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b = bitset_init_memory_controller_address_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_address_b = bitset_clear_memory_controller_address_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_address_b = bitset_first_memory_controller_address_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_address_b = bitset_end_memory_controller_address_b;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_address_b = bitset_element_memory_controller_address_b;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_address_b = nfa_get_sucessors_memory_controller_address_b;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_address_b = bitset_union_memory_controller_address_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_address_b = bitset_next_memory_controller_address_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_address_b = bitset_intersect_memory_controller_address_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_address_b = bitset_any_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = bitset_init_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_write_enable_b = bitset_clear_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_write_enable_b = bitset_first_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_write_enable_b = bitset_end_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_write_enable_b = bitset_element_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_write_enable_b = nfa_get_sucessors_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_write_enable_b = bitset_union_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_write_enable_b = bitset_next_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_write_enable_b = bitset_intersect_memory_controller_write_enable_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_write_enable_b = bitset_any_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b = bitset_init_memory_controller_in_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_in_b = bitset_clear_memory_controller_in_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_in_b = bitset_first_memory_controller_in_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_in_b = bitset_end_memory_controller_in_b;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_in_b = bitset_element_memory_controller_in_b;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_in_b = nfa_get_sucessors_memory_controller_in_b;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_in_b = bitset_union_memory_controller_in_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_in_b = bitset_next_memory_controller_in_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_in_b = bitset_intersect_memory_controller_in_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_in_b = bitset_any_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_accept_sample: %0*/
/*   call void @bitset_init(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b = bitset_init_memory_controller_size_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_clear(%struct._bitset_t* %next) nounwind*/
if ((cur_state == LEGUP_function_call_13))
begin
memory_controller_size_b = bitset_clear_memory_controller_size_b;
end
/* nfa_accept_sample: %18*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_15))
begin
memory_controller_size_b = bitset_first_memory_controller_size_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit23*/
/*   %30 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %1) nounwind*/
if ((cur_state == LEGUP_function_call_23))
begin
memory_controller_size_b = bitset_end_memory_controller_size_b;
end
/* nfa_accept_sample: %39*/
/*   %40 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %2) nounwind*/
if ((cur_state == LEGUP_function_call_31))
begin
memory_controller_size_b = bitset_element_memory_controller_size_b;
end
/* nfa_accept_sample: %39*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %40, i8 zeroext %20, %struct._bitset_t* %tmp)*/
if ((cur_state == LEGUP_function_call_33))
begin
memory_controller_size_b = nfa_get_sucessors_memory_controller_size_b;
end
/* nfa_accept_sample: %39*/
/*   call void @bitset_union(%struct._bitset_t* %next, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_35))
begin
memory_controller_size_b = bitset_union_memory_controller_size_b;
end
/* nfa_accept_sample: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %j, %struct._bitset_t* %current, %struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_42))
begin
memory_controller_size_b = bitset_next_memory_controller_size_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   call void @bitset_intersect(%struct._bitset_t* %current, %struct._bitset_t* %tmp) nounwind*/
if ((cur_state == LEGUP_function_call_67))
begin
memory_controller_size_b = bitset_intersect_memory_controller_size_b;
end
/* nfa_accept_sample: %nfa_get_finals.exit*/
/*   %84 = call zeroext i1 @bitset_any(%struct._bitset_t* %current) nounwind*/
if ((cur_state == LEGUP_function_call_69))
begin
memory_controller_size_b = bitset_any_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_accept_any_sample
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	arg_sample_buffer,
	arg_sample_buffer_length,
	arg_sample_length,
	arg_indices,
	arg_i_size,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_1_2 = 4'd2;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_3_3 = 4'd3;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_3_4 = 4'd4;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_3_5 = 4'd5;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_7_6 = 4'd6;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_7_8 = 4'd8;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_8_9 = 4'd9;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_8_11 = 4'd11;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_11_12 = 4'd12;
parameter [3:0] LEGUP_F_nfa_accept_any_sample_BB_13_13 = 4'd13;
parameter [3:0] LEGUP_function_call_7 = 4'd7;
parameter [3:0] LEGUP_function_call_10 = 4'd10;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_sample_buffer;
input [31:0] arg_sample_buffer_length;
input [31:0] arg_sample_length;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_indices;
input [31:0] arg_i_size;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [3:0] cur_state;
reg [31:0] nfa_accept_any_sample_1_storemerge;
reg [31:0] nfa_accept_any_sample_1_storemerge_reg;
reg  nfa_accept_any_sample_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_any_sample_3_4;
reg [31:0] nfa_accept_any_sample_3_5;
reg [31:0] nfa_accept_any_sample_3_5_reg;
reg  nfa_accept_any_sample_3_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_any_sample_8_9;
reg  nfa_accept_any_sample_8_10;
reg  nfa_accept_any_sample_8_10_reg;
reg [31:0] nfa_accept_any_sample_11_12;
reg  nfa_accept_any_sample_13_storemerge1;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  nfa_accept_sample_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_arg_nfa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_arg_sample;
reg [31:0] nfa_accept_sample_arg_length;
reg  nfa_accept_sample_memory_controller_waitrequest;
wire  nfa_accept_sample_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_memory_controller_address_a;
wire  nfa_accept_sample_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_out_a;
wire [1:0] nfa_accept_sample_memory_controller_size_a;
wire  nfa_accept_sample_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_memory_controller_address_b;
wire  nfa_accept_sample_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_out_b;
wire [1:0] nfa_accept_sample_memory_controller_size_b;
wire  nfa_accept_sample_finish;
wire  nfa_accept_sample_return_val;
reg [31:0] nfa_accept_any_sample_1_storemerge_phi_temp;
reg  nfa_accept_any_sample_13_storemerge1_phi_temp;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



nfa_accept_sample nfa_accept_sample_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_accept_sample_start),
	.finish (nfa_accept_sample_finish),
	.return_val (nfa_accept_sample_return_val),
	.memory_controller_enable_a (nfa_accept_sample_memory_controller_enable_a),
	.memory_controller_address_a (nfa_accept_sample_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_accept_sample_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_accept_sample_memory_controller_in_a),
	.memory_controller_size_a (nfa_accept_sample_memory_controller_size_a),
	.memory_controller_out_a (nfa_accept_sample_memory_controller_out_a),
	.memory_controller_enable_b (nfa_accept_sample_memory_controller_enable_b),
	.memory_controller_address_b (nfa_accept_sample_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_accept_sample_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_accept_sample_memory_controller_in_b),
	.memory_controller_size_b (nfa_accept_sample_memory_controller_size_b),
	.memory_controller_out_b (nfa_accept_sample_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_accept_sample_memory_controller_waitrequest),
	.arg_nfa (nfa_accept_sample_arg_nfa),
	.arg_sample (nfa_accept_sample_arg_sample),
	.arg_length (nfa_accept_sample_arg_length)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_1_2 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_3_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_1_2 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_13_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_3_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_3_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_3_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_3_6 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_3_6 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_7_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_7_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_8_10_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_13_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_8_10_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_11_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_13_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_any_sample_BB_13_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_any_sample_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_13_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (^reset !== 1'bX && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2))
begin
nfa_accept_any_sample_1_storemerge = nfa_accept_any_sample_1_storemerge_phi_temp;
end
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2))
begin
nfa_accept_any_sample_1_storemerge = nfa_accept_any_sample_1_storemerge_phi_temp;
end
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2)) */
begin
nfa_accept_any_sample_1_storemerge = nfa_accept_any_sample_1_storemerge_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2))
begin
nfa_accept_any_sample_1_storemerge_reg <= nfa_accept_any_sample_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_1_storemerge_reg"); $finish; end
end
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2))
begin
nfa_accept_any_sample_1_storemerge_reg <= nfa_accept_any_sample_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_1_storemerge_reg"); $finish; end
end
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2))
begin
nfa_accept_any_sample_1_storemerge_reg <= nfa_accept_any_sample_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_1_storemerge_reg"); $finish; end
end
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2))
begin
nfa_accept_any_sample_1_storemerge_reg <= nfa_accept_any_sample_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_1_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_any_sample: %1*/
/*   %2 = icmp ult i32 %storemerge, %i_size*/
begin
nfa_accept_any_sample_1_2 = (nfa_accept_any_sample_1_storemerge < arg_i_size);
end
end
always @(*) begin
/* nfa_accept_any_sample: %3*/
/*   %4 = getelementptr inbounds i32* %indices, i32 %storemerge*/
begin
nfa_accept_any_sample_3_4 = (arg_indices + (4 * nfa_accept_any_sample_1_storemerge_reg));
end
end
always @(*) begin
/* nfa_accept_any_sample: %3*/
/*   %5 = load i32* %4, align 4*/
begin
nfa_accept_any_sample_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_5))
begin
nfa_accept_any_sample_3_5_reg <= nfa_accept_any_sample_3_5;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_3_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_any_sample: %3*/
/*   %6 = icmp ult i32 %5, %sample_buffer_length*/
begin
nfa_accept_any_sample_3_6 = (nfa_accept_any_sample_3_5 < arg_sample_buffer_length);
end
end
always @(*) begin
/* nfa_accept_any_sample: %8*/
/*   %9 = getelementptr inbounds i8* %sample_buffer, i32 %5*/
begin
nfa_accept_any_sample_8_9 = (arg_sample_buffer + (1 * nfa_accept_any_sample_3_5_reg));
end
end
always @(*) begin
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
begin
nfa_accept_any_sample_8_10 = nfa_accept_sample_return_val;
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_any_sample_8_10_reg <= nfa_accept_any_sample_8_10;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_8_10_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_any_sample: %11*/
/*   %12 = add i32 %storemerge, 1*/
begin
nfa_accept_any_sample_11_12 = (nfa_accept_any_sample_1_storemerge_reg + 32'd1);
end
end
always @(*) begin
/* nfa_accept_any_sample: %13*/
/*   %storemerge1 = phi i1 [ true, %8 ], [ false, %1 ]*/
begin
nfa_accept_any_sample_13_storemerge1 = nfa_accept_any_sample_13_storemerge1_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6))
begin
__assert_fail_arg_0 <= `TAG_g__str9_a;
if (^reset !== 1'bX && ^(`TAG_g__str9_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6))
begin
__assert_fail_arg_2 <= 32'd257;
if (^reset !== 1'bX && ^(32'd257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_7_6))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_accept_any_sample_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_9))
begin
nfa_accept_sample_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_start"); $finish; end
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_9))
begin
nfa_accept_sample_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_9))
begin
nfa_accept_sample_arg_sample <= nfa_accept_any_sample_8_9;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_sample"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_9))
begin
nfa_accept_sample_arg_length <= arg_sample_length;
if (^reset !== 1'bX && ^(arg_sample_length) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_length"); $finish; end
end
end
always @(*) begin
nfa_accept_sample_memory_controller_waitrequest = 1'd0;
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_accept_sample_memory_controller_out_a = 1'd0;
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_accept_sample_memory_controller_out_b = 1'd0;
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_any_sample_1_storemerge_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_1_storemerge_phi_temp"); $finish; end
end
/* nfa_accept_any_sample: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if (((cur_state == LEGUP_F_nfa_accept_any_sample_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_any_sample_1_storemerge_phi_temp <= nfa_accept_any_sample_11_12;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_1_storemerge_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_any_sample: %13*/
/*   %storemerge1 = phi i1 [ true, %8 ], [ false, %1 ]*/
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_1_2 == 1'd0)))
begin
nfa_accept_any_sample_13_storemerge1_phi_temp <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_13_storemerge1_phi_temp"); $finish; end
end
/* nfa_accept_any_sample: %13*/
/*   %storemerge1 = phi i1 [ true, %8 ], [ false, %1 ]*/
if ((((cur_state == LEGUP_F_nfa_accept_any_sample_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_any_sample_8_10_reg == 1'd1)))
begin
nfa_accept_any_sample_13_storemerge1_phi_temp <= -1'd1;
if (^reset !== 1'bX && ^(-1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_any_sample_13_storemerge1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_accept_any_sample: %13*/
/*   ret i1 %storemerge1*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_13_13))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_accept_any_sample: %13*/
/*   ret i1 %storemerge1*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_13_13))
begin
return_val <= nfa_accept_any_sample_13_storemerge1;
if (^reset !== 1'bX && ^(nfa_accept_any_sample_13_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_a = nfa_accept_sample_memory_controller_enable_a;
end
/* nfa_accept_any_sample: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_3))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_a = nfa_accept_sample_memory_controller_address_a;
end
/* nfa_accept_any_sample: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_3))
begin
memory_controller_address_a = nfa_accept_any_sample_3_4;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_a = nfa_accept_sample_memory_controller_write_enable_a;
end
/* nfa_accept_any_sample: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_3))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_a = nfa_accept_sample_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_a = nfa_accept_sample_memory_controller_size_a;
end
/* nfa_accept_any_sample: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_any_sample_BB_3_3))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_b = nfa_accept_sample_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_b = nfa_accept_sample_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_b = nfa_accept_sample_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_b = nfa_accept_sample_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_accept_any_sample: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 257, i8* getelementptr inbounds ([120 x i8]* @__PRETTY_FUNCTION__.nfa_accept_any_sample, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_accept_any_sample: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_b = nfa_accept_sample_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_accept_all_samples
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	arg_sample_buffer,
	arg_sample_buffer_length,
	arg_sample_length,
	arg_indices,
	arg_i_size,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_1_2 = 4'd2;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_3_3 = 4'd3;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_3_4 = 4'd4;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_3_5 = 4'd5;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_7_6 = 4'd6;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_7_8 = 4'd8;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_8_9 = 4'd9;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_8_11 = 4'd11;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_11_12 = 4'd12;
parameter [3:0] LEGUP_F_nfa_accept_all_samples_BB_13_13 = 4'd13;
parameter [3:0] LEGUP_function_call_7 = 4'd7;
parameter [3:0] LEGUP_function_call_10 = 4'd10;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_sample_buffer;
input [31:0] arg_sample_buffer_length;
input [31:0] arg_sample_length;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_indices;
input [31:0] arg_i_size;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [3:0] cur_state;
reg [31:0] nfa_accept_all_samples_1_storemerge;
reg [31:0] nfa_accept_all_samples_1_storemerge_reg;
reg  nfa_accept_all_samples_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_all_samples_3_4;
reg [31:0] nfa_accept_all_samples_3_5;
reg [31:0] nfa_accept_all_samples_3_5_reg;
reg  nfa_accept_all_samples_3_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_all_samples_8_9;
reg  nfa_accept_all_samples_8_10;
reg  nfa_accept_all_samples_8_10_reg;
reg [31:0] nfa_accept_all_samples_11_12;
reg  nfa_accept_all_samples_13_storemerge1;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  nfa_accept_sample_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_arg_nfa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_arg_sample;
reg [31:0] nfa_accept_sample_arg_length;
reg  nfa_accept_sample_memory_controller_waitrequest;
wire  nfa_accept_sample_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_memory_controller_address_a;
wire  nfa_accept_sample_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_out_a;
wire [1:0] nfa_accept_sample_memory_controller_size_a;
wire  nfa_accept_sample_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_memory_controller_address_b;
wire  nfa_accept_sample_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_out_b;
wire [1:0] nfa_accept_sample_memory_controller_size_b;
wire  nfa_accept_sample_finish;
wire  nfa_accept_sample_return_val;
reg [31:0] nfa_accept_all_samples_1_storemerge_phi_temp;
reg  nfa_accept_all_samples_13_storemerge1_phi_temp;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



nfa_accept_sample nfa_accept_sample_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_accept_sample_start),
	.finish (nfa_accept_sample_finish),
	.return_val (nfa_accept_sample_return_val),
	.memory_controller_enable_a (nfa_accept_sample_memory_controller_enable_a),
	.memory_controller_address_a (nfa_accept_sample_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_accept_sample_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_accept_sample_memory_controller_in_a),
	.memory_controller_size_a (nfa_accept_sample_memory_controller_size_a),
	.memory_controller_out_a (nfa_accept_sample_memory_controller_out_a),
	.memory_controller_enable_b (nfa_accept_sample_memory_controller_enable_b),
	.memory_controller_address_b (nfa_accept_sample_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_accept_sample_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_accept_sample_memory_controller_in_b),
	.memory_controller_size_b (nfa_accept_sample_memory_controller_size_b),
	.memory_controller_out_b (nfa_accept_sample_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_accept_sample_memory_controller_waitrequest),
	.arg_nfa (nfa_accept_sample_arg_nfa),
	.arg_sample (nfa_accept_sample_arg_sample),
	.arg_length (nfa_accept_sample_arg_length)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_1_2 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_3_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_1_2 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_13_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_3_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_3_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_3_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_3_6 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_3_6 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_7_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_7_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_8_10_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_8_10_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_13_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_11_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_11_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_13_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_all_samples_BB_13_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_all_samples_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_13_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (^reset !== 1'bX && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2))
begin
nfa_accept_all_samples_1_storemerge = nfa_accept_all_samples_1_storemerge_phi_temp;
end
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2))
begin
nfa_accept_all_samples_1_storemerge = nfa_accept_all_samples_1_storemerge_phi_temp;
end
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2)) */
begin
nfa_accept_all_samples_1_storemerge = nfa_accept_all_samples_1_storemerge_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2))
begin
nfa_accept_all_samples_1_storemerge_reg <= nfa_accept_all_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_1_storemerge_reg"); $finish; end
end
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2))
begin
nfa_accept_all_samples_1_storemerge_reg <= nfa_accept_all_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_1_storemerge_reg"); $finish; end
end
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2))
begin
nfa_accept_all_samples_1_storemerge_reg <= nfa_accept_all_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_1_storemerge_reg"); $finish; end
end
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2))
begin
nfa_accept_all_samples_1_storemerge_reg <= nfa_accept_all_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_1_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_all_samples: %1*/
/*   %2 = icmp ult i32 %storemerge, %i_size*/
begin
nfa_accept_all_samples_1_2 = (nfa_accept_all_samples_1_storemerge < arg_i_size);
end
end
always @(*) begin
/* nfa_accept_all_samples: %3*/
/*   %4 = getelementptr inbounds i32* %indices, i32 %storemerge*/
begin
nfa_accept_all_samples_3_4 = (arg_indices + (4 * nfa_accept_all_samples_1_storemerge_reg));
end
end
always @(*) begin
/* nfa_accept_all_samples: %3*/
/*   %5 = load i32* %4, align 4*/
begin
nfa_accept_all_samples_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_5))
begin
nfa_accept_all_samples_3_5_reg <= nfa_accept_all_samples_3_5;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_3_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_all_samples: %3*/
/*   %6 = icmp ult i32 %5, %sample_buffer_length*/
begin
nfa_accept_all_samples_3_6 = (nfa_accept_all_samples_3_5 < arg_sample_buffer_length);
end
end
always @(*) begin
/* nfa_accept_all_samples: %8*/
/*   %9 = getelementptr inbounds i8* %sample_buffer, i32 %5*/
begin
nfa_accept_all_samples_8_9 = (arg_sample_buffer + (1 * nfa_accept_all_samples_3_5_reg));
end
end
always @(*) begin
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
begin
nfa_accept_all_samples_8_10 = nfa_accept_sample_return_val;
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_all_samples_8_10_reg <= nfa_accept_all_samples_8_10;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_8_10_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_all_samples: %11*/
/*   %12 = add i32 %storemerge, 1*/
begin
nfa_accept_all_samples_11_12 = (nfa_accept_all_samples_1_storemerge_reg + 32'd1);
end
end
always @(*) begin
/* nfa_accept_all_samples: %13*/
/*   %storemerge1 = phi i1 [ false, %8 ], [ true, %1 ]*/
begin
nfa_accept_all_samples_13_storemerge1 = nfa_accept_all_samples_13_storemerge1_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6))
begin
__assert_fail_arg_0 <= `TAG_g__str9_a;
if (^reset !== 1'bX && ^(`TAG_g__str9_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6))
begin
__assert_fail_arg_2 <= 32'd275;
if (^reset !== 1'bX && ^(32'd275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_7_6))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_accept_all_samples_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_9))
begin
nfa_accept_sample_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_start"); $finish; end
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_9))
begin
nfa_accept_sample_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_9))
begin
nfa_accept_sample_arg_sample <= nfa_accept_all_samples_8_9;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_sample"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_9))
begin
nfa_accept_sample_arg_length <= arg_sample_length;
if (^reset !== 1'bX && ^(arg_sample_length) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_length"); $finish; end
end
end
always @(*) begin
nfa_accept_sample_memory_controller_waitrequest = 1'd0;
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_accept_sample_memory_controller_out_a = 1'd0;
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_accept_sample_memory_controller_out_b = 1'd0;
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_all_samples_1_storemerge_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_1_storemerge_phi_temp"); $finish; end
end
/* nfa_accept_all_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %11 ]*/
if (((cur_state == LEGUP_F_nfa_accept_all_samples_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_all_samples_1_storemerge_phi_temp <= nfa_accept_all_samples_11_12;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_1_storemerge_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_all_samples: %13*/
/*   %storemerge1 = phi i1 [ false, %8 ], [ true, %1 ]*/
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_1_2 == 1'd0)))
begin
nfa_accept_all_samples_13_storemerge1_phi_temp <= -1'd1;
if (^reset !== 1'bX && ^(-1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_13_storemerge1_phi_temp"); $finish; end
end
/* nfa_accept_all_samples: %13*/
/*   %storemerge1 = phi i1 [ false, %8 ], [ true, %1 ]*/
if ((((cur_state == LEGUP_F_nfa_accept_all_samples_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_all_samples_8_10_reg == 1'd0)))
begin
nfa_accept_all_samples_13_storemerge1_phi_temp <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_all_samples_13_storemerge1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_accept_all_samples: %13*/
/*   ret i1 %storemerge1*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_13_13))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_accept_all_samples: %13*/
/*   ret i1 %storemerge1*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_13_13))
begin
return_val <= nfa_accept_all_samples_13_storemerge1;
if (^reset !== 1'bX && ^(nfa_accept_all_samples_13_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_a = nfa_accept_sample_memory_controller_enable_a;
end
/* nfa_accept_all_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_3))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_a = nfa_accept_sample_memory_controller_address_a;
end
/* nfa_accept_all_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_3))
begin
memory_controller_address_a = nfa_accept_all_samples_3_4;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_a = nfa_accept_sample_memory_controller_write_enable_a;
end
/* nfa_accept_all_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_3))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_a = nfa_accept_sample_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_a = nfa_accept_sample_memory_controller_size_a;
end
/* nfa_accept_all_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_all_samples_BB_3_3))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_b = nfa_accept_sample_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_b = nfa_accept_sample_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_b = nfa_accept_sample_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_b = nfa_accept_sample_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_accept_all_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 275, i8* getelementptr inbounds ([121 x i8]* @__PRETTY_FUNCTION__.nfa_accept_all_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_accept_all_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_b = nfa_accept_sample_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_accept_samples
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	arg_nfa,
	arg_sample_buffer,
	arg_sample_buffer_length,
	arg_sample_length,
	arg_indices,
	arg_i_size,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_1_2 = 4'd2;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_3_3 = 4'd3;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_3_4 = 4'd4;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_3_5 = 4'd5;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_7_6 = 4'd6;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_7_8 = 4'd8;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_8_9 = 4'd9;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_8_11 = 4'd11;
parameter [3:0] LEGUP_F_nfa_accept_samples_BB_13_12 = 4'd12;
parameter [3:0] LEGUP_function_call_7 = 4'd7;
parameter [3:0] LEGUP_function_call_10 = 4'd10;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_sample_buffer;
input [31:0] arg_sample_buffer_length;
input [31:0] arg_sample_length;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_indices;
input [31:0] arg_i_size;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [3:0] cur_state;
reg [31:0] nfa_accept_samples_1_c_0;
reg [31:0] nfa_accept_samples_1_c_0_reg;
reg [31:0] nfa_accept_samples_1_storemerge;
reg [31:0] nfa_accept_samples_1_storemerge_reg;
reg  nfa_accept_samples_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_samples_3_4;
reg [31:0] nfa_accept_samples_3_5;
reg [31:0] nfa_accept_samples_3_5_reg;
reg  nfa_accept_samples_3_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_samples_8_9;
reg  nfa_accept_samples_8_10;
reg  nfa_accept_samples_8_10_reg;
reg [31:0] nfa_accept_samples_8_11;
reg [31:0] nfa_accept_samples_8__c_0;
reg [31:0] nfa_accept_samples_8_12;
reg [31:0] nfa_accept_samples_8_12_reg;
reg  __assert_fail_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_1;
reg [31:0] __assert_fail_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_arg_3;
reg  __assert_fail_memory_controller_waitrequest;
wire  __assert_fail_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_a;
wire  __assert_fail_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_a;
wire [1:0] __assert_fail_memory_controller_size_a;
wire  __assert_fail_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __assert_fail_memory_controller_address_b;
wire  __assert_fail_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __assert_fail_memory_controller_out_b;
wire [1:0] __assert_fail_memory_controller_size_b;
wire  __assert_fail_finish;
reg  nfa_accept_sample_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_arg_nfa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_arg_sample;
reg [31:0] nfa_accept_sample_arg_length;
reg  nfa_accept_sample_memory_controller_waitrequest;
wire  nfa_accept_sample_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_memory_controller_address_a;
wire  nfa_accept_sample_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_out_a;
wire [1:0] nfa_accept_sample_memory_controller_size_a;
wire  nfa_accept_sample_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_accept_sample_memory_controller_address_b;
wire  nfa_accept_sample_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_accept_sample_memory_controller_out_b;
wire [1:0] nfa_accept_sample_memory_controller_size_b;
wire  nfa_accept_sample_finish;
wire  nfa_accept_sample_return_val;
reg [31:0] nfa_accept_samples_1_c_0_phi_temp;
reg [31:0] nfa_accept_samples_1_storemerge_phi_temp;


__assert_fail __assert_fail_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__assert_fail_start),
	.finish (__assert_fail_finish),
	.memory_controller_enable_a (__assert_fail_memory_controller_enable_a),
	.memory_controller_address_a (__assert_fail_memory_controller_address_a),
	.memory_controller_write_enable_a (__assert_fail_memory_controller_write_enable_a),
	.memory_controller_in_a (__assert_fail_memory_controller_in_a),
	.memory_controller_size_a (__assert_fail_memory_controller_size_a),
	.memory_controller_out_a (__assert_fail_memory_controller_out_a),
	.memory_controller_enable_b (__assert_fail_memory_controller_enable_b),
	.memory_controller_address_b (__assert_fail_memory_controller_address_b),
	.memory_controller_write_enable_b (__assert_fail_memory_controller_write_enable_b),
	.memory_controller_in_b (__assert_fail_memory_controller_in_b),
	.memory_controller_size_b (__assert_fail_memory_controller_size_b),
	.memory_controller_out_b (__assert_fail_memory_controller_out_b),
	.memory_controller_waitrequest (__assert_fail_memory_controller_waitrequest),
	.arg_0 (__assert_fail_arg_0),
	.arg_1 (__assert_fail_arg_1),
	.arg_2 (__assert_fail_arg_2),
	.arg_3 (__assert_fail_arg_3)
);



nfa_accept_sample nfa_accept_sample_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_accept_sample_start),
	.finish (nfa_accept_sample_finish),
	.return_val (nfa_accept_sample_return_val),
	.memory_controller_enable_a (nfa_accept_sample_memory_controller_enable_a),
	.memory_controller_address_a (nfa_accept_sample_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_accept_sample_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_accept_sample_memory_controller_in_a),
	.memory_controller_size_a (nfa_accept_sample_memory_controller_size_a),
	.memory_controller_out_a (nfa_accept_sample_memory_controller_out_a),
	.memory_controller_enable_b (nfa_accept_sample_memory_controller_enable_b),
	.memory_controller_address_b (nfa_accept_sample_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_accept_sample_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_accept_sample_memory_controller_in_b),
	.memory_controller_size_b (nfa_accept_sample_memory_controller_size_b),
	.memory_controller_out_b (nfa_accept_sample_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_accept_sample_memory_controller_waitrequest),
	.arg_nfa (nfa_accept_sample_arg_nfa),
	.arg_sample (nfa_accept_sample_arg_sample),
	.arg_length (nfa_accept_sample_arg_length)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_samples_1_2 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_3_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_samples_1_2 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_13_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_13_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_3_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_3_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_3_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_3_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_3_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_samples_BB_3_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_samples_3_6 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_accept_samples_BB_3_5) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_samples_3_6 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_7_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_7_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_7_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_7) & (memory_controller_waitrequest == 1'd0)) & (__assert_fail_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_7_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_7_8;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_7_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_8_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (nfa_accept_sample_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_8_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_13_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_accept_samples_BB_13_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_accept_samples_BB_13_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_13_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (^reset !== 1'bX && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_c_0 = nfa_accept_samples_1_c_0_phi_temp;
end
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_c_0 = nfa_accept_samples_1_c_0_phi_temp;
end
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2)) */
begin
nfa_accept_samples_1_c_0 = nfa_accept_samples_1_c_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_c_0_reg <= nfa_accept_samples_1_c_0;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_c_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_c_0_reg"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_c_0_reg <= nfa_accept_samples_1_c_0;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_c_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_c_0_reg"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_c_0_reg <= nfa_accept_samples_1_c_0;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_c_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_c_0_reg"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_c_0_reg <= nfa_accept_samples_1_c_0;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_c_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_c_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_storemerge = nfa_accept_samples_1_storemerge_phi_temp;
end
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
else if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_storemerge = nfa_accept_samples_1_storemerge_phi_temp;
end
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
else /* if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2)) */
begin
nfa_accept_samples_1_storemerge = nfa_accept_samples_1_storemerge_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_storemerge_reg <= nfa_accept_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_storemerge_reg"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_storemerge_reg <= nfa_accept_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_storemerge_reg"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_storemerge_reg <= nfa_accept_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_storemerge_reg"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_1_2))
begin
nfa_accept_samples_1_storemerge_reg <= nfa_accept_samples_1_storemerge;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_samples: %1*/
/*   %2 = icmp ult i32 %storemerge, %i_size*/
begin
nfa_accept_samples_1_2 = (nfa_accept_samples_1_storemerge < arg_i_size);
end
end
always @(*) begin
/* nfa_accept_samples: %3*/
/*   %4 = getelementptr inbounds i32* %indices, i32 %storemerge*/
begin
nfa_accept_samples_3_4 = (arg_indices + (4 * nfa_accept_samples_1_storemerge_reg));
end
end
always @(*) begin
/* nfa_accept_samples: %3*/
/*   %5 = load i32* %4, align 4*/
begin
nfa_accept_samples_3_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_3_5))
begin
nfa_accept_samples_3_5_reg <= nfa_accept_samples_3_5;
if (^reset !== 1'bX && ^(nfa_accept_samples_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_3_5_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_samples: %3*/
/*   %6 = icmp ult i32 %5, %sample_buffer_length*/
begin
nfa_accept_samples_3_6 = (nfa_accept_samples_3_5 < arg_sample_buffer_length);
end
end
always @(*) begin
/* nfa_accept_samples: %8*/
/*   %9 = getelementptr inbounds i8* %sample_buffer, i32 %5*/
begin
nfa_accept_samples_8_9 = (arg_sample_buffer + (1 * nfa_accept_samples_3_5_reg));
end
end
always @(*) begin
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
begin
nfa_accept_samples_8_10 = nfa_accept_sample_return_val;
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_samples_8_10_reg <= nfa_accept_samples_8_10;
if (^reset !== 1'bX && ^(nfa_accept_samples_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_8_10_reg"); $finish; end
end
end
always @(*) begin
/* nfa_accept_samples: %8*/
/*   %11 = zext i1 %10 to i32*/
begin
nfa_accept_samples_8_11 = nfa_accept_samples_8_10_reg;
end
end
always @(*) begin
/* nfa_accept_samples: %8*/
/*   %.c.0 = add nsw i32 %c.0, %11*/
begin
nfa_accept_samples_8__c_0 = (nfa_accept_samples_1_c_0_reg + nfa_accept_samples_8_11);
end
end
always @(*) begin
/* nfa_accept_samples: %8*/
/*   %12 = add i32 %storemerge, 1*/
begin
nfa_accept_samples_8_12 = (nfa_accept_samples_1_storemerge_reg + 32'd1);
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %8*/
/*   %12 = add i32 %storemerge, 1*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9))
begin
nfa_accept_samples_8_12_reg <= nfa_accept_samples_8_12;
if (^reset !== 1'bX && ^(nfa_accept_samples_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_8_12_reg"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6))
begin
__assert_fail_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6))
begin
__assert_fail_arg_0 <= `TAG_g__str9_a;
if (^reset !== 1'bX && ^(`TAG_g__str9_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6))
begin
__assert_fail_arg_1 <= `TAG_g__str1_a;
if (^reset !== 1'bX && ^(`TAG_g__str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6))
begin
__assert_fail_arg_2 <= 32'd294;
if (^reset !== 1'bX && ^(32'd294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_2"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_7_6))
begin
__assert_fail_arg_3 <= `TAG_g___PRETTY_FUNCTION___nfa_accept_samples_a;
if (^reset !== 1'bX && ^(`TAG_g___PRETTY_FUNCTION___nfa_accept_samples_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __assert_fail_arg_3"); $finish; end
end
end
always @(*) begin
__assert_fail_memory_controller_waitrequest = 1'd0;
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
__assert_fail_memory_controller_out_a = 1'd0;
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
__assert_fail_memory_controller_out_b = 1'd0;
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
__assert_fail_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9))
begin
nfa_accept_sample_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_start"); $finish; end
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9))
begin
nfa_accept_sample_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9))
begin
nfa_accept_sample_arg_sample <= nfa_accept_samples_8_9;
if (^reset !== 1'bX && ^(nfa_accept_samples_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_sample"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_8_9))
begin
nfa_accept_sample_arg_length <= arg_sample_length;
if (^reset !== 1'bX && ^(arg_sample_length) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_sample_arg_length"); $finish; end
end
end
always @(*) begin
nfa_accept_sample_memory_controller_waitrequest = 1'd0;
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_accept_sample_memory_controller_out_a = 1'd0;
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_accept_sample_memory_controller_out_b = 1'd0;
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_accept_sample_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_samples_1_c_0_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_c_0_phi_temp"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %c.0 = phi i32 [ 0, %0 ], [ %.c.0, %8 ]*/
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_samples_1_c_0_phi_temp <= nfa_accept_samples_8__c_0;
if (^reset !== 1'bX && ^(nfa_accept_samples_8__c_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_c_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_samples_1_storemerge_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_storemerge_phi_temp"); $finish; end
end
/* nfa_accept_samples: %1*/
/*   %storemerge = phi i32 [ 0, %0 ], [ %12, %8 ]*/
if (((cur_state == LEGUP_F_nfa_accept_samples_BB_8_11) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_accept_samples_1_storemerge_phi_temp <= nfa_accept_samples_8_12_reg;
if (^reset !== 1'bX && ^(nfa_accept_samples_8_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_accept_samples_1_storemerge_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_accept_samples: %13*/
/*   ret i32 %c.0*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_13_12))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* nfa_accept_samples: %13*/
/*   ret i32 %c.0*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_13_12))
begin
return_val <= nfa_accept_samples_1_c_0_reg;
if (^reset !== 1'bX && ^(nfa_accept_samples_1_c_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_a = __assert_fail_memory_controller_enable_a;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_a = nfa_accept_sample_memory_controller_enable_a;
end
/* nfa_accept_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_3_3))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_a = __assert_fail_memory_controller_address_a;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_a = nfa_accept_sample_memory_controller_address_a;
end
/* nfa_accept_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_3_3))
begin
memory_controller_address_a = nfa_accept_samples_3_4;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_a = __assert_fail_memory_controller_write_enable_a;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_a = nfa_accept_sample_memory_controller_write_enable_a;
end
/* nfa_accept_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_3_3))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_a = __assert_fail_memory_controller_in_a;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_a = nfa_accept_sample_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_a = __assert_fail_memory_controller_size_a;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_a = nfa_accept_sample_memory_controller_size_a;
end
/* nfa_accept_samples: %3*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_nfa_accept_samples_BB_3_3))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_enable_b = __assert_fail_memory_controller_enable_b;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_b = nfa_accept_sample_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_address_b = __assert_fail_memory_controller_address_b;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_b = nfa_accept_sample_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_write_enable_b = __assert_fail_memory_controller_write_enable_b;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_b = nfa_accept_sample_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_in_b = __assert_fail_memory_controller_in_b;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_b = nfa_accept_sample_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_accept_samples: %7*/
/*   call void @__assert_fail(i8* getelementptr inbounds ([34 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([115 x i8]* @__PRETTY_FUNCTION__.nfa_accept_samples, i32 0, i32 0)) noreturn nounwind*/
if ((cur_state == LEGUP_function_call_7))
begin
memory_controller_size_b = __assert_fail_memory_controller_size_b;
end
/* nfa_accept_samples: %8*/
/*   %10 = call zeroext i1 @nfa_accept_sample(%struct._nfa_t* %nfa, i8* %9, i32 %sample_length)*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_b = nfa_accept_sample_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module nfa_print
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_nfa,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_nfa_print_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_nfa_print_BB_16_2 = 7'd2;
parameter [6:0] LEGUP_F_nfa_print_BB__preheader2_3 = 7'd3;
parameter [6:0] LEGUP_F_nfa_print_BB_19_4 = 7'd4;
parameter [6:0] LEGUP_F_nfa_print_BB_19_5 = 7'd5;
parameter [6:0] LEGUP_F_nfa_print_BB_19_6 = 7'd6;
parameter [6:0] LEGUP_F_nfa_print_BB_23_7 = 7'd7;
parameter [6:0] LEGUP_F_nfa_print_BB_23_9 = 7'd9;
parameter [6:0] LEGUP_F_nfa_print_BB_23_11 = 7'd11;
parameter [6:0] LEGUP_F_nfa_print_BB_26_12 = 7'd12;
parameter [6:0] LEGUP_F_nfa_print_BB_28_13 = 7'd13;
parameter [6:0] LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14 = 7'd14;
parameter [6:0] LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15 = 7'd15;
parameter [6:0] LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16 = 7'd16;
parameter [6:0] LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18 = 7'd18;
parameter [6:0] LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19 = 7'd19;
parameter [6:0] LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21 = 7'd21;
parameter [6:0] LEGUP_F_nfa_print_BB_36_22 = 7'd22;
parameter [6:0] LEGUP_F_nfa_print_BB_36_23 = 7'd23;
parameter [6:0] LEGUP_F_nfa_print_BB_36_24 = 7'd24;
parameter [6:0] LEGUP_F_nfa_print_BB_40_25 = 7'd25;
parameter [6:0] LEGUP_F_nfa_print_BB_40_26 = 7'd26;
parameter [6:0] LEGUP_F_nfa_print_BB_40_28 = 7'd28;
parameter [6:0] LEGUP_F_nfa_print_BB_40_30 = 7'd30;
parameter [6:0] LEGUP_F_nfa_print_BB_43_31 = 7'd31;
parameter [6:0] LEGUP_F_nfa_print_BB_46_32 = 7'd32;
parameter [6:0] LEGUP_F_nfa_print_BB_46_33 = 7'd33;
parameter [6:0] LEGUP_F_nfa_print_BB_46_34 = 7'd34;
parameter [6:0] LEGUP_F_nfa_print_BB__backedge_35 = 7'd35;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36 = 7'd36;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38 = 7'd38;
parameter [6:0] LEGUP_F_nfa_print_BB__preheader_39 = 7'd39;
parameter [6:0] LEGUP_F_nfa_print_BB_52_40 = 7'd40;
parameter [6:0] LEGUP_F_nfa_print_BB_55_41 = 7'd41;
parameter [6:0] LEGUP_F_nfa_print_BB_55_42 = 7'd42;
parameter [6:0] LEGUP_F_nfa_print_BB_55_43 = 7'd43;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44 = 7'd44;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46 = 7'd46;
parameter [6:0] LEGUP_F_nfa_print_BB_63_47 = 7'd47;
parameter [6:0] LEGUP_F_nfa_print_BB_66_48 = 7'd48;
parameter [6:0] LEGUP_F_nfa_print_BB_66_49 = 7'd49;
parameter [6:0] LEGUP_F_nfa_print_BB_66_50 = 7'd50;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51 = 7'd51;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53 = 7'd53;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55 = 7'd55;
parameter [6:0] LEGUP_F_nfa_print_BB_72_56 = 7'd56;
parameter [6:0] LEGUP_F_nfa_print_BB__preheader1_57 = 7'd57;
parameter [6:0] LEGUP_F_nfa_print_BB_74_58 = 7'd58;
parameter [6:0] LEGUP_F_nfa_print_BB_77_59 = 7'd59;
parameter [6:0] LEGUP_F_nfa_print_BB_77_60 = 7'd60;
parameter [6:0] LEGUP_F_nfa_print_BB_77_61 = 7'd61;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62 = 7'd62;
parameter [6:0] LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64 = 7'd64;
parameter [6:0] LEGUP_F_nfa_print_BB_82_65 = 7'd65;
parameter [6:0] LEGUP_F_nfa_print_BB_84_66 = 7'd66;
parameter [6:0] LEGUP_F_nfa_print_BB_86_67 = 7'd67;
parameter [6:0] LEGUP_F_nfa_print_BB_88_68 = 7'd68;
parameter [6:0] LEGUP_function_call_8 = 7'd8;
parameter [6:0] LEGUP_function_call_10 = 7'd10;
parameter [6:0] LEGUP_function_call_17 = 7'd17;
parameter [6:0] LEGUP_function_call_20 = 7'd20;
parameter [6:0] LEGUP_function_call_27 = 7'd27;
parameter [6:0] LEGUP_function_call_29 = 7'd29;
parameter [6:0] LEGUP_function_call_37 = 7'd37;
parameter [6:0] LEGUP_function_call_45 = 7'd45;
parameter [6:0] LEGUP_function_call_52 = 7'd52;
parameter [6:0] LEGUP_function_call_54 = 7'd54;
parameter [6:0] LEGUP_function_call_63 = 7'd63;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_nfa;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_0_15_reg;
reg [7:0] nfa_print_16_17;
reg [7:0] nfa_print_16_17_reg;
reg  nfa_print_16_18;
reg [7:0] nfa_print_19_has_sucessors_0;
reg [7:0] nfa_print_19_has_sucessors_0_reg;
reg [7:0] nfa_print_19_storemerge1;
reg [7:0] nfa_print_19_storemerge1_reg;
reg [31:0] nfa_print_19_20;
reg [7:0] nfa_print_19_21;
reg  nfa_print_19_22;
reg  nfa_print_23_24;
reg  nfa_print_23_24_reg;
reg [7:0] nfa_print_23_25;
reg [7:0] nfa_print_23_25_reg;
reg [7:0] nfa_print_26_27;
reg [7:0] nfa_print_28_has_sucessors_1;
reg [7:0] nfa_print_28_tmp;
reg  nfa_print_28_29;
reg [31:0] nfa_print_nfa_is_initial_exit_30;
reg [31:0] nfa_print_nfa_is_initial_exit_30_reg;
reg  nfa_print_nfa_is_initial_exit_31;
reg  nfa_print_nfa_is_initial_exit_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_nfa_is_initial_exit_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_nfa_is_initial_exit_32_reg;
reg  nfa_print_nfa_is_initial_exit_33;
reg  nfa_print_nfa_is_initial_exit_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_nfa_is_initial_exit_34;
reg [7:0] nfa_print_36_storemerge2;
reg [7:0] nfa_print_36_storemerge2_reg;
reg [31:0] nfa_print_36_37;
reg [7:0] nfa_print_36_38;
reg  nfa_print_36_39;
reg [31:0] nfa_print_40_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_43_st_i10_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_43_st_i10_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_43_dt_i9_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_43_dt_i9_0_reg;
reg [31:0] nfa_print_43_44;
reg [31:0] nfa_print_43_44_reg;
reg  nfa_print_43_45;
reg [31:0] nfa_print_46_47;
reg [31:0] nfa_print_46_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_46_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_46_48_reg;
reg [7:0] nfa_print_46_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_46_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_46_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print__backedge_st_i10_0_be;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print__backedge_dt_i9_0_be;
reg [31:0] nfa_print__backedge__be;
reg  nfa_print_legup_memcpy_1_exit11_51;
reg  nfa_print_legup_memcpy_1_exit11_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_52_st_i7_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_52_st_i7_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_52_dt_i6_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_52_dt_i6_0_reg;
reg [31:0] nfa_print_52_53;
reg [31:0] nfa_print_52_53_reg;
reg  nfa_print_52_54;
reg [31:0] nfa_print_55_56;
reg [31:0] nfa_print_55_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_55_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_55_57_reg;
reg [7:0] nfa_print_55_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_55_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_55_59_reg;
reg [7:0] nfa_print_legup_memcpy_1_exit8_60;
reg [7:0] nfa_print_legup_memcpy_1_exit8_60_reg;
reg [31:0] nfa_print_legup_memcpy_1_exit8_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_63_st_i4_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_63_st_i4_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_63_dt_i3_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_63_dt_i3_0_reg;
reg [31:0] nfa_print_63_64;
reg [31:0] nfa_print_63_64_reg;
reg  nfa_print_63_65;
reg [31:0] nfa_print_66_67;
reg [31:0] nfa_print_66_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_66_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_66_68_reg;
reg [7:0] nfa_print_66_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_66_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_66_70_reg;
reg  nfa_print_legup_memcpy_1_exit5_71;
reg  nfa_print_legup_memcpy_1_exit5_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_74_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_74_dt_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_74_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_74_st_i_0_reg;
reg [31:0] nfa_print_74_75;
reg [31:0] nfa_print_74_75_reg;
reg  nfa_print_74_76;
reg [31:0] nfa_print_77_78;
reg [31:0] nfa_print_77_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_77_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_77_79_reg;
reg [7:0] nfa_print_77_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_77_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_77_81_reg;
reg [7:0] nfa_print_82_83;
reg [7:0] nfa_print_86_87;
reg  nfa_get_sucessors_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_arg_nfa;
reg [7:0] nfa_print_16_17_phi_temp;
reg [7:0] nfa_get_sucessors_arg_state;
reg [7:0] nfa_print_19_storemerge1_phi_temp;
reg [7:0] nfa_get_sucessors_arg_sym;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_arg_bs;
reg  nfa_get_sucessors_memory_controller_waitrequest;
wire  nfa_get_sucessors_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_memory_controller_address_a;
wire  nfa_get_sucessors_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_out_a;
wire [1:0] nfa_get_sucessors_memory_controller_size_a;
wire  nfa_get_sucessors_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_get_sucessors_memory_controller_address_b;
wire  nfa_get_sucessors_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nfa_get_sucessors_memory_controller_out_b;
wire [1:0] nfa_get_sucessors_memory_controller_size_b;
wire  nfa_get_sucessors_finish;
reg  bitset_any_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_any_arg_0;
reg  bitset_any_memory_controller_waitrequest;
wire  bitset_any_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_any_memory_controller_address_a;
wire  bitset_any_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_out_a;
wire [1:0] bitset_any_memory_controller_size_a;
wire  bitset_any_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_any_memory_controller_address_b;
wire  bitset_any_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_any_memory_controller_out_b;
wire [1:0] bitset_any_memory_controller_size_b;
wire  bitset_any_finish;
wire  bitset_any_return_val;
reg  bitset_contains_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_arg_0;
reg [31:0] bitset_contains_arg_1;
reg  bitset_contains_memory_controller_waitrequest;
wire  bitset_contains_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_a;
wire  bitset_contains_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_a;
wire [1:0] bitset_contains_memory_controller_size_a;
wire  bitset_contains_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_contains_memory_controller_address_b;
wire  bitset_contains_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_contains_memory_controller_out_b;
wire [1:0] bitset_contains_memory_controller_size_b;
wire  bitset_contains_finish;
wire  bitset_contains_return_val;
reg [7:0] nfa_print_36_storemerge2_phi_temp;
reg  bitset_first_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_arg_1;
reg  bitset_first_memory_controller_waitrequest;
wire  bitset_first_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_memory_controller_address_a;
wire  bitset_first_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_out_a;
wire [1:0] bitset_first_memory_controller_size_a;
wire  bitset_first_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_first_memory_controller_address_b;
wire  bitset_first_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_first_memory_controller_out_b;
wire [1:0] bitset_first_memory_controller_size_b;
wire  bitset_first_finish;
reg  bitset_end_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_arg_0;
reg  bitset_end_memory_controller_waitrequest;
wire  bitset_end_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_memory_controller_address_a;
wire  bitset_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_out_a;
wire [1:0] bitset_end_memory_controller_size_a;
wire  bitset_end_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_end_memory_controller_address_b;
wire  bitset_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_end_memory_controller_out_b;
wire [1:0] bitset_end_memory_controller_size_b;
wire  bitset_end_finish;
wire  bitset_end_return_val;
reg  bitset_element_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_arg_0;
reg  bitset_element_memory_controller_waitrequest;
wire  bitset_element_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_memory_controller_address_a;
wire  bitset_element_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_out_a;
wire [1:0] bitset_element_memory_controller_size_a;
wire  bitset_element_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_element_memory_controller_address_b;
wire  bitset_element_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_element_memory_controller_out_b;
wire [1:0] bitset_element_memory_controller_size_b;
wire  bitset_element_finish;
wire [7:0] bitset_element_return_val;
reg  bitset_next_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_arg_2;
reg  bitset_next_memory_controller_waitrequest;
wire  bitset_next_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_memory_controller_address_a;
wire  bitset_next_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_out_a;
wire [1:0] bitset_next_memory_controller_size_a;
wire  bitset_next_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bitset_next_memory_controller_address_b;
wire  bitset_next_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bitset_next_memory_controller_out_b;
wire [1:0] bitset_next_memory_controller_size_b;
wire  bitset_next_finish;
reg [7:0] nfa_print_19_has_sucessors_0_phi_temp;
reg [7:0] nfa_print_28_has_sucessors_1_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_43_st_i10_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_43_dt_i9_0_phi_temp;
reg [31:0] nfa_print_43_44_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print__backedge_st_i10_0_be_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print__backedge_dt_i9_0_be_phi_temp;
reg [31:0] nfa_print__backedge__be_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_52_st_i7_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_52_dt_i6_0_phi_temp;
reg [31:0] nfa_print_52_53_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_63_st_i4_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_63_dt_i3_0_phi_temp;
reg [31:0] nfa_print_63_64_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_74_dt_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nfa_print_74_st_i_0_phi_temp;
reg [31:0] nfa_print_74_75_phi_temp;


nfa_get_sucessors nfa_get_sucessors_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nfa_get_sucessors_start),
	.finish (nfa_get_sucessors_finish),
	.memory_controller_enable_a (nfa_get_sucessors_memory_controller_enable_a),
	.memory_controller_address_a (nfa_get_sucessors_memory_controller_address_a),
	.memory_controller_write_enable_a (nfa_get_sucessors_memory_controller_write_enable_a),
	.memory_controller_in_a (nfa_get_sucessors_memory_controller_in_a),
	.memory_controller_size_a (nfa_get_sucessors_memory_controller_size_a),
	.memory_controller_out_a (nfa_get_sucessors_memory_controller_out_a),
	.memory_controller_enable_b (nfa_get_sucessors_memory_controller_enable_b),
	.memory_controller_address_b (nfa_get_sucessors_memory_controller_address_b),
	.memory_controller_write_enable_b (nfa_get_sucessors_memory_controller_write_enable_b),
	.memory_controller_in_b (nfa_get_sucessors_memory_controller_in_b),
	.memory_controller_size_b (nfa_get_sucessors_memory_controller_size_b),
	.memory_controller_out_b (nfa_get_sucessors_memory_controller_out_b),
	.memory_controller_waitrequest (nfa_get_sucessors_memory_controller_waitrequest),
	.arg_nfa (nfa_get_sucessors_arg_nfa),
	.arg_state (nfa_get_sucessors_arg_state),
	.arg_sym (nfa_get_sucessors_arg_sym),
	.arg_bs (nfa_get_sucessors_arg_bs)
);



bitset_any bitset_any_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_any_start),
	.finish (bitset_any_finish),
	.return_val (bitset_any_return_val),
	.memory_controller_enable_a (bitset_any_memory_controller_enable_a),
	.memory_controller_address_a (bitset_any_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_any_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_any_memory_controller_in_a),
	.memory_controller_size_a (bitset_any_memory_controller_size_a),
	.memory_controller_out_a (bitset_any_memory_controller_out_a),
	.memory_controller_enable_b (bitset_any_memory_controller_enable_b),
	.memory_controller_address_b (bitset_any_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_any_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_any_memory_controller_in_b),
	.memory_controller_size_b (bitset_any_memory_controller_size_b),
	.memory_controller_out_b (bitset_any_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_any_memory_controller_waitrequest),
	.arg_0 (bitset_any_arg_0)
);



bitset_contains bitset_contains_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_contains_start),
	.finish (bitset_contains_finish),
	.return_val (bitset_contains_return_val),
	.memory_controller_enable_a (bitset_contains_memory_controller_enable_a),
	.memory_controller_address_a (bitset_contains_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_contains_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_contains_memory_controller_in_a),
	.memory_controller_size_a (bitset_contains_memory_controller_size_a),
	.memory_controller_out_a (bitset_contains_memory_controller_out_a),
	.memory_controller_enable_b (bitset_contains_memory_controller_enable_b),
	.memory_controller_address_b (bitset_contains_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_contains_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_contains_memory_controller_in_b),
	.memory_controller_size_b (bitset_contains_memory_controller_size_b),
	.memory_controller_out_b (bitset_contains_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_contains_memory_controller_waitrequest),
	.arg_0 (bitset_contains_arg_0),
	.arg_1 (bitset_contains_arg_1)
);



bitset_first bitset_first_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_first_start),
	.finish (bitset_first_finish),
	.memory_controller_enable_a (bitset_first_memory_controller_enable_a),
	.memory_controller_address_a (bitset_first_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_first_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_first_memory_controller_in_a),
	.memory_controller_size_a (bitset_first_memory_controller_size_a),
	.memory_controller_out_a (bitset_first_memory_controller_out_a),
	.memory_controller_enable_b (bitset_first_memory_controller_enable_b),
	.memory_controller_address_b (bitset_first_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_first_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_first_memory_controller_in_b),
	.memory_controller_size_b (bitset_first_memory_controller_size_b),
	.memory_controller_out_b (bitset_first_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_first_memory_controller_waitrequest),
	.arg_0 (bitset_first_arg_0),
	.arg_1 (bitset_first_arg_1)
);



bitset_end bitset_end_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_end_start),
	.finish (bitset_end_finish),
	.return_val (bitset_end_return_val),
	.memory_controller_enable_a (bitset_end_memory_controller_enable_a),
	.memory_controller_address_a (bitset_end_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_end_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_end_memory_controller_in_a),
	.memory_controller_size_a (bitset_end_memory_controller_size_a),
	.memory_controller_out_a (bitset_end_memory_controller_out_a),
	.memory_controller_enable_b (bitset_end_memory_controller_enable_b),
	.memory_controller_address_b (bitset_end_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_end_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_end_memory_controller_in_b),
	.memory_controller_size_b (bitset_end_memory_controller_size_b),
	.memory_controller_out_b (bitset_end_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_end_memory_controller_waitrequest),
	.arg_0 (bitset_end_arg_0)
);



bitset_element bitset_element_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_element_start),
	.finish (bitset_element_finish),
	.return_val (bitset_element_return_val),
	.memory_controller_enable_a (bitset_element_memory_controller_enable_a),
	.memory_controller_address_a (bitset_element_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_element_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_element_memory_controller_in_a),
	.memory_controller_size_a (bitset_element_memory_controller_size_a),
	.memory_controller_out_a (bitset_element_memory_controller_out_a),
	.memory_controller_enable_b (bitset_element_memory_controller_enable_b),
	.memory_controller_address_b (bitset_element_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_element_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_element_memory_controller_in_b),
	.memory_controller_size_b (bitset_element_memory_controller_size_b),
	.memory_controller_out_b (bitset_element_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_element_memory_controller_waitrequest),
	.arg_0 (bitset_element_arg_0)
);



bitset_next bitset_next_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bitset_next_start),
	.finish (bitset_next_finish),
	.memory_controller_enable_a (bitset_next_memory_controller_enable_a),
	.memory_controller_address_a (bitset_next_memory_controller_address_a),
	.memory_controller_write_enable_a (bitset_next_memory_controller_write_enable_a),
	.memory_controller_in_a (bitset_next_memory_controller_in_a),
	.memory_controller_size_a (bitset_next_memory_controller_size_a),
	.memory_controller_out_a (bitset_next_memory_controller_out_a),
	.memory_controller_enable_b (bitset_next_memory_controller_enable_b),
	.memory_controller_address_b (bitset_next_memory_controller_address_b),
	.memory_controller_write_enable_b (bitset_next_memory_controller_write_enable_b),
	.memory_controller_in_b (bitset_next_memory_controller_in_b),
	.memory_controller_size_b (bitset_next_memory_controller_size_b),
	.memory_controller_out_b (bitset_next_memory_controller_out_b),
	.memory_controller_waitrequest (bitset_next_memory_controller_waitrequest),
	.arg_0 (bitset_next_arg_0),
	.arg_1 (bitset_next_arg_1),
	.arg_2 (bitset_next_arg_2)
);



/* Unsynthesizable Statements */
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %35 = call i32 (...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str10, i32 0, i32 0), i32 %30, i8* %32, i8* %34) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21))
begin
$write("%d%s%s", nfa_print_nfa_is_initial_exit_30_reg, nfa_print_nfa_is_initial_exit_32_reg, nfa_print_nfa_is_initial_exit_34);
// to fix quartus warning
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_30_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_32_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_34) === 1'bX) finish <= 0;
end
/* nfa_print: %40*/
/*   %42 = call i32 (...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str14, i32 0, i32 0), i32 %41) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_25))
begin
$write(" |%d>", nfa_print_40_41);
// to fix quartus warning
if (^reset !== 1'bX && ^(nfa_print_40_41) === 1'bX) finish <= 0;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %62 = call i32 (...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str15, i32 0, i32 0), i32 %61) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46))
begin
$write("%d", nfa_print_legup_memcpy_1_exit8_61);
// to fix quartus warning
if (^reset !== 1'bX && ^(nfa_print_legup_memcpy_1_exit8_61) === 1'bX) finish <= 0;
end
/* nfa_print: %72*/
/*   %73 = call i32 (...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str16, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_72_56))
begin
$write(", ");
end
/* nfa_print: %84*/
/*   %85 = call i32 (...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str17, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_84_66))
begin
$write("\n");
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_16_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_16_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_16_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_16_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_16_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_16_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_16_18 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader2_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_16_2) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_16_18 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_88_68;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_88_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__preheader2_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader2_3;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__preheader2_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_19_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_19_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_19_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_5;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_19_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_19_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_6;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_19_6) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_19_22 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_23_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_23_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_19_6) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_19_22 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_28_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_28_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_23_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_23_7;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_23_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_23_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_8;
if (^reset !== 1'bX && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_8;
if (^reset !== 1'bX && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_23_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_23_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_8;
if (^reset !== 1'bX && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_23_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_23_9;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_23_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_23_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (bitset_any_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_23_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_23_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)) & (bitset_any_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_23_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_23_11;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_23_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_23_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_23_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_28_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_28_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_23_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_23_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_26_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_26_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_26_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_26_12;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_26_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_26_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_19_4;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_19_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_28_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_28_13;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_28_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_28_13) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_28_29 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_86_67;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_86_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_28_13) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_28_29 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_17;
if (^reset !== 1'bX && ^(LEGUP_function_call_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_17;
if (^reset !== 1'bX && ^(LEGUP_function_call_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_17) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_17) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_17;
if (^reset !== 1'bX && ^(LEGUP_function_call_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (bitset_contains_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (^reset !== 1'bX && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_36_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_36_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_23;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_36_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_23;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_36_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_24;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_36_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_24;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_36_24) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_36_39 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_25;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_36_24) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_36_39 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_84_66;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_84_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_25;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_26;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_27;
if (^reset !== 1'bX && ^(LEGUP_function_call_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_27;
if (^reset !== 1'bX && ^(LEGUP_function_call_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_27) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_28;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_27) & (memory_controller_waitrequest == 1'd0)) & (nfa_get_sucessors_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_27;
if (^reset !== 1'bX && ^(LEGUP_function_call_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_28;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_29;
if (^reset !== 1'bX && ^(LEGUP_function_call_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_29;
if (^reset !== 1'bX && ^(LEGUP_function_call_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_29) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_30;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_29) & (memory_controller_waitrequest == 1'd0)) & (bitset_first_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_29;
if (^reset !== 1'bX && ^(LEGUP_function_call_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_40_30;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_40_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_40_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_43_31;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_43_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_43_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_43_31;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_43_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_43_31) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_43_45 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_43_31) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_43_45 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_46_32;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_46_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_46_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_46_32;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_46_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_46_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_46_33;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_46_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_46_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_46_33;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_46_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_46_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_46_34;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_46_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_46_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_46_34;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_46_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB__backedge_35;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__backedge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__backedge_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB__backedge_35;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__backedge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__backedge_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_43_31;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_43_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_37;
if (^reset !== 1'bX && ^(LEGUP_function_call_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_37;
if (^reset !== 1'bX && ^(LEGUP_function_call_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_37) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_37) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_37;
if (^reset !== 1'bX && ^(LEGUP_function_call_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_legup_memcpy_1_exit11_51_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_82_65;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_82_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_38) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_legup_memcpy_1_exit11_51_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader_39;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__preheader_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader_39;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__preheader_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_52_40;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_52_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_52_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_52_40;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_52_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_52_40) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_52_54 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_52_40) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_52_54 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_55_41;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_55_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_55_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_55_41;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_55_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_55_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_55_42;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_55_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_55_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_55_42;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_55_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_55_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_55_43;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_55_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_55_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_55_43;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_55_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_55_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_52_40;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_52_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_45;
if (^reset !== 1'bX && ^(LEGUP_function_call_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_45;
if (^reset !== 1'bX && ^(LEGUP_function_call_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_45) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_45) & (memory_controller_waitrequest == 1'd0)) & (bitset_element_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_45;
if (^reset !== 1'bX && ^(LEGUP_function_call_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_63_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_63_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_63_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_63_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_63_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_63_47) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_63_65 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_63_47) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_63_65 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_66_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_66_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_66_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_66_48;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_66_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_66_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_66_49;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_66_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_66_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_66_49;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_66_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_66_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_66_50;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_66_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_66_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_66_50;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_66_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_66_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_63_47;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_63_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_52;
if (^reset !== 1'bX && ^(LEGUP_function_call_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_52;
if (^reset !== 1'bX && ^(LEGUP_function_call_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_52) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_52) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_52;
if (^reset !== 1'bX && ^(LEGUP_function_call_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_54;
if (^reset !== 1'bX && ^(LEGUP_function_call_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_54;
if (^reset !== 1'bX && ^(LEGUP_function_call_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_54) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_54) & (memory_controller_waitrequest == 1'd0)) & (bitset_end_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_54;
if (^reset !== 1'bX && ^(LEGUP_function_call_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_legup_memcpy_1_exit5_71_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader1_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_55) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_legup_memcpy_1_exit5_71_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_72_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_72_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_72_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_72_56;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_72_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_72_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader1_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__preheader1_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB__preheader1_57;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB__preheader1_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_74_58;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_74_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_74_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_74_58;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_74_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_74_58) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_74_76 == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nfa_print_BB_74_58) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_74_76 == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_77_59;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_77_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_77_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_77_59;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_77_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_77_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_77_60;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_77_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_77_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_77_60;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_77_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_77_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_77_61;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_77_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_77_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_77_61;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_77_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_77_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_74_58;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_74_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_63;
if (^reset !== 1'bX && ^(LEGUP_function_call_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_63;
if (^reset !== 1'bX && ^(LEGUP_function_call_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_63) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_63) & (memory_controller_waitrequest == 1'd0)) & (bitset_next_finish == 1'd0)))
begin
cur_state <= LEGUP_function_call_63;
if (^reset !== 1'bX && ^(LEGUP_function_call_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB__backedge_35;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB__backedge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_82_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_82_65;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_82_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_82_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_36_22;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_36_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_84_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_84_66;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_84_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_84_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_86_67;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_86_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_86_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_86_67;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_86_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_86_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nfa_print_BB_16_2;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_16_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_88_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nfa_print_BB_88_68;
if (^reset !== 1'bX && ^(LEGUP_F_nfa_print_BB_88_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nfa_print_BB_88_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (^reset !== 1'bX && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %8 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
begin
nfa_print_0_8 = (arg_nfa + 385584);
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %8 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_8_reg <= nfa_print_0_8;
if (^reset !== 1'bX && ^(nfa_print_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_8_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %9 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
begin
nfa_print_0_9 = arg_nfa;
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %9 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_9_reg <= nfa_print_0_9;
if (^reset !== 1'bX && ^(nfa_print_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_9_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %10 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
begin
nfa_print_0_10 = (arg_nfa + 12);
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %10 = getelementptr inbounds %struct._nfa_t* %nfa, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_10_reg <= nfa_print_0_10;
if (^reset !== 1'bX && ^(nfa_print_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_10_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %11 = getelementptr inbounds %struct._bitset_iterator_t* %3, i32 0, i32 0*/
if (reset) begin nfa_print_0_11 = 0; end
begin
nfa_print_0_11 = `TAG_nfa_print_0_3_a;
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %11 = getelementptr inbounds %struct._bitset_iterator_t* %3, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_11_reg <= nfa_print_0_11;
if (^reset !== 1'bX && ^(nfa_print_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_11_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %12 = getelementptr inbounds %struct._bitset_iterator_t* %qt, i32 0, i32 0*/
if (reset) begin nfa_print_0_12 = 0; end
begin
nfa_print_0_12 = `TAG_nfa_print_0_qt_a;
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %12 = getelementptr inbounds %struct._bitset_iterator_t* %qt, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_12_reg <= nfa_print_0_12;
if (^reset !== 1'bX && ^(nfa_print_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_12_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %13 = getelementptr inbounds %struct._bitset_iterator_t* %4, i32 0, i32 0*/
if (reset) begin nfa_print_0_13 = 0; end
begin
nfa_print_0_13 = `TAG_nfa_print_0_4_a;
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %13 = getelementptr inbounds %struct._bitset_iterator_t* %4, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_13_reg <= nfa_print_0_13;
if (^reset !== 1'bX && ^(nfa_print_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_13_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %14 = getelementptr inbounds %struct._bitset_iterator_t* %6, i32 0, i32 0*/
if (reset) begin nfa_print_0_14 = 0; end
begin
nfa_print_0_14 = `TAG_nfa_print_0_6_a;
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %14 = getelementptr inbounds %struct._bitset_iterator_t* %6, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_14_reg <= nfa_print_0_14;
if (^reset !== 1'bX && ^(nfa_print_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_14_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %0*/
/*   %15 = getelementptr inbounds %struct._bitset_iterator_t* %7, i32 0, i32 0*/
if (reset) begin nfa_print_0_15 = 0; end
begin
nfa_print_0_15 = `TAG_nfa_print_0_7_a;
end
end
always @(posedge clk) begin
/* nfa_print: %0*/
/*   %15 = getelementptr inbounds %struct._bitset_iterator_t* %7, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nfa_print_BB_0_1))
begin
nfa_print_0_15_reg <= nfa_print_0_15;
if (^reset !== 1'bX && ^(nfa_print_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_0_15_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_16_2)) */
begin
nfa_print_16_17 = nfa_print_16_17_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_16_2))
begin
nfa_print_16_17_reg <= nfa_print_16_17;
if (^reset !== 1'bX && ^(nfa_print_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %16*/
/*   %18 = icmp ult i8 %17, 63*/
begin
nfa_print_16_18 = (nfa_print_16_17 < 8'd63);
end
end
always @(*) begin
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_has_sucessors_0 = nfa_print_19_has_sucessors_0_phi_temp;
end
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_19_4)) */
begin
nfa_print_19_has_sucessors_0 = nfa_print_19_has_sucessors_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_has_sucessors_0_reg <= nfa_print_19_has_sucessors_0;
if (^reset !== 1'bX && ^(nfa_print_19_has_sucessors_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_has_sucessors_0_reg"); $finish; end
end
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_has_sucessors_0_reg <= nfa_print_19_has_sucessors_0;
if (^reset !== 1'bX && ^(nfa_print_19_has_sucessors_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_has_sucessors_0_reg"); $finish; end
end
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_has_sucessors_0_reg <= nfa_print_19_has_sucessors_0;
if (^reset !== 1'bX && ^(nfa_print_19_has_sucessors_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_has_sucessors_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1 = nfa_print_19_storemerge1_phi_temp;
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1 = nfa_print_19_storemerge1_phi_temp;
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1 = nfa_print_19_storemerge1_phi_temp;
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_19_4)) */
begin
nfa_print_19_storemerge1 = nfa_print_19_storemerge1_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1_reg <= nfa_print_19_storemerge1;
if (^reset !== 1'bX && ^(nfa_print_19_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_reg"); $finish; end
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1_reg <= nfa_print_19_storemerge1;
if (^reset !== 1'bX && ^(nfa_print_19_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_reg"); $finish; end
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1_reg <= nfa_print_19_storemerge1;
if (^reset !== 1'bX && ^(nfa_print_19_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_reg"); $finish; end
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1_reg <= nfa_print_19_storemerge1;
if (^reset !== 1'bX && ^(nfa_print_19_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_reg"); $finish; end
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
nfa_print_19_storemerge1_reg <= nfa_print_19_storemerge1;
if (^reset !== 1'bX && ^(nfa_print_19_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %19*/
/*   %20 = load i32* %8, align 4*/
begin
nfa_print_19_20 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_print: %19*/
/*   %21 = trunc i32 %20 to i8*/
begin
nfa_print_19_21 = nfa_print_19_20[7:0];
end
end
always @(*) begin
/* nfa_print: %19*/
/*   %22 = icmp ult i8 %storemerge1, %21*/
begin
nfa_print_19_22 = (nfa_print_19_storemerge1_reg < nfa_print_19_21);
end
end
always @(*) begin
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
begin
nfa_print_23_24 = bitset_any_return_val;
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
nfa_print_23_24_reg <= nfa_print_23_24;
if (^reset !== 1'bX && ^(nfa_print_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_23_24_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %23*/
/*   %25 = zext i1 %24 to i8*/
begin
nfa_print_23_25 = nfa_print_23_24_reg;
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   %25 = zext i1 %24 to i8*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_11))
begin
nfa_print_23_25_reg <= nfa_print_23_25;
if (^reset !== 1'bX && ^(nfa_print_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_23_25_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %26*/
/*   %27 = add i8 %storemerge1, 1*/
begin
nfa_print_26_27 = (nfa_print_19_storemerge1_reg + 8'd1);
end
end
always @(*) begin
/* nfa_print: %28*/
/*   %has_sucessors.1 = phi i8 [ %25, %23 ], [ %has_sucessors.0, %19 ]*/
begin
nfa_print_28_has_sucessors_1 = nfa_print_28_has_sucessors_1_phi_temp;
end
end
always @(*) begin
/* nfa_print: %28*/
/*   %tmp = and i8 %has_sucessors.1, 1*/
begin
nfa_print_28_tmp = (nfa_print_28_has_sucessors_1 & 8'd1);
end
end
always @(*) begin
/* nfa_print: %28*/
/*   %29 = icmp eq i8 %tmp, 0*/
begin
nfa_print_28_29 = (nfa_print_28_tmp == 8'd0);
end
end
always @(*) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %30 = zext i8 %17 to i32*/
begin
nfa_print_nfa_is_initial_exit_30 = {nfa_print_16_17_reg};
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %30 = zext i8 %17 to i32*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_14))
begin
nfa_print_nfa_is_initial_exit_30_reg <= nfa_print_nfa_is_initial_exit_30;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_nfa_is_initial_exit_30_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
begin
nfa_print_nfa_is_initial_exit_31 = bitset_contains_return_val;
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
nfa_print_nfa_is_initial_exit_31_reg <= nfa_print_nfa_is_initial_exit_31;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_nfa_is_initial_exit_31_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %32 = select i1 %31, i8* getelementptr inbounds ([2 x i8]* @.str11, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str12, i32 0, i32 0)*/
begin
nfa_print_nfa_is_initial_exit_32 = (nfa_print_nfa_is_initial_exit_31_reg ? `TAG_g__str11_a : `TAG_g__str12_a);
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %32 = select i1 %31, i8* getelementptr inbounds ([2 x i8]* @.str11, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str12, i32 0, i32 0)*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18))
begin
nfa_print_nfa_is_initial_exit_32_reg <= nfa_print_nfa_is_initial_exit_32;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_nfa_is_initial_exit_32_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
begin
nfa_print_nfa_is_initial_exit_33 = bitset_contains_return_val;
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
nfa_print_nfa_is_initial_exit_33_reg <= nfa_print_nfa_is_initial_exit_33;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_nfa_is_initial_exit_33_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %34 = select i1 %33, i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str12, i32 0, i32 0)*/
begin
nfa_print_nfa_is_initial_exit_34 = (nfa_print_nfa_is_initial_exit_33_reg ? `TAG_g__str13_a : `TAG_g__str12_a);
end
end
always @(*) begin
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2 = nfa_print_36_storemerge2_phi_temp;
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2 = nfa_print_36_storemerge2_phi_temp;
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2 = nfa_print_36_storemerge2_phi_temp;
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2 = nfa_print_36_storemerge2_phi_temp;
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_36_22)) */
begin
nfa_print_36_storemerge2 = nfa_print_36_storemerge2_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2_reg <= nfa_print_36_storemerge2;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_reg"); $finish; end
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2_reg <= nfa_print_36_storemerge2;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_reg"); $finish; end
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2_reg <= nfa_print_36_storemerge2;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_reg"); $finish; end
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2_reg <= nfa_print_36_storemerge2;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_reg"); $finish; end
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2_reg <= nfa_print_36_storemerge2;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_reg"); $finish; end
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
nfa_print_36_storemerge2_reg <= nfa_print_36_storemerge2;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %36*/
/*   %37 = load i32* %8, align 4*/
begin
nfa_print_36_37 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* nfa_print: %36*/
/*   %38 = trunc i32 %37 to i8*/
begin
nfa_print_36_38 = nfa_print_36_37[7:0];
end
end
always @(*) begin
/* nfa_print: %36*/
/*   %39 = icmp ult i8 %storemerge2, %38*/
begin
nfa_print_36_39 = (nfa_print_36_storemerge2_reg < nfa_print_36_38);
end
end
always @(*) begin
/* nfa_print: %40*/
/*   %41 = zext i8 %storemerge2 to i32*/
begin
nfa_print_40_41 = {nfa_print_36_storemerge2_reg};
end
end
always @(*) begin
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_st_i10_0 = nfa_print_43_st_i10_0_phi_temp;
end
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_st_i10_0 = nfa_print_43_st_i10_0_phi_temp;
end
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_43_31)) */
begin
nfa_print_43_st_i10_0 = nfa_print_43_st_i10_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_st_i10_0_reg <= nfa_print_43_st_i10_0;
if (^reset !== 1'bX && ^(nfa_print_43_st_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_st_i10_0_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_st_i10_0_reg <= nfa_print_43_st_i10_0;
if (^reset !== 1'bX && ^(nfa_print_43_st_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_st_i10_0_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_st_i10_0_reg <= nfa_print_43_st_i10_0;
if (^reset !== 1'bX && ^(nfa_print_43_st_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_st_i10_0_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_st_i10_0_reg <= nfa_print_43_st_i10_0;
if (^reset !== 1'bX && ^(nfa_print_43_st_i10_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_st_i10_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_dt_i9_0 = nfa_print_43_dt_i9_0_phi_temp;
end
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_dt_i9_0 = nfa_print_43_dt_i9_0_phi_temp;
end
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_43_31)) */
begin
nfa_print_43_dt_i9_0 = nfa_print_43_dt_i9_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_dt_i9_0_reg <= nfa_print_43_dt_i9_0;
if (^reset !== 1'bX && ^(nfa_print_43_dt_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_dt_i9_0_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_dt_i9_0_reg <= nfa_print_43_dt_i9_0;
if (^reset !== 1'bX && ^(nfa_print_43_dt_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_dt_i9_0_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_dt_i9_0_reg <= nfa_print_43_dt_i9_0;
if (^reset !== 1'bX && ^(nfa_print_43_dt_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_dt_i9_0_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_dt_i9_0_reg <= nfa_print_43_dt_i9_0;
if (^reset !== 1'bX && ^(nfa_print_43_dt_i9_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_dt_i9_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_44 = nfa_print_43_44_phi_temp;
end
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_43_31)) */
begin
nfa_print_43_44 = nfa_print_43_44_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_44_reg <= nfa_print_43_44;
if (^reset !== 1'bX && ^(nfa_print_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_44_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_44_reg <= nfa_print_43_44;
if (^reset !== 1'bX && ^(nfa_print_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_44_reg"); $finish; end
end
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_43_31))
begin
nfa_print_43_44_reg <= nfa_print_43_44;
if (^reset !== 1'bX && ^(nfa_print_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_44_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %43*/
/*   %45 = icmp eq i32 %44, 0*/
begin
nfa_print_43_45 = (nfa_print_43_44 == 32'd0);
end
end
always @(*) begin
/* nfa_print: %46*/
/*   %47 = add i32 %44, -1*/
begin
nfa_print_46_47 = (nfa_print_43_44_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_print: %46*/
/*   %47 = add i32 %44, -1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
nfa_print_46_47_reg <= nfa_print_46_47;
if (^reset !== 1'bX && ^(nfa_print_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_46_47_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %46*/
/*   %48 = getelementptr inbounds i8* %st.i10.0, i32 1*/
begin
nfa_print_46_48 = (nfa_print_43_st_i10_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %46*/
/*   %48 = getelementptr inbounds i8* %st.i10.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
nfa_print_46_48_reg <= nfa_print_46_48;
if (^reset !== 1'bX && ^(nfa_print_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_46_48_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %46*/
/*   %49 = load i8* %st.i10.0, align 1*/
begin
nfa_print_46_49 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_print: %46*/
/*   %50 = getelementptr inbounds i8* %dt.i9.0, i32 1*/
begin
nfa_print_46_50 = (nfa_print_43_dt_i9_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %46*/
/*   %50 = getelementptr inbounds i8* %dt.i9.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
nfa_print_46_50_reg <= nfa_print_46_50;
if (^reset !== 1'bX && ^(nfa_print_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_46_50_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %.backedge*/
/*   %st.i10.0.be = phi i8* [ %48, %46 ], [ %12, %legup_memcpy_1.exit ]*/
begin
nfa_print__backedge_st_i10_0_be = nfa_print__backedge_st_i10_0_be_phi_temp;
end
end
always @(*) begin
/* nfa_print: %.backedge*/
/*   %dt.i9.0.be = phi i8* [ %50, %46 ], [ %11, %legup_memcpy_1.exit ]*/
begin
nfa_print__backedge_dt_i9_0_be = nfa_print__backedge_dt_i9_0_be_phi_temp;
end
end
always @(*) begin
/* nfa_print: %.backedge*/
/*   %.be = phi i32 [ %47, %46 ], [ 3, %legup_memcpy_1.exit ]*/
begin
nfa_print__backedge__be = nfa_print__backedge__be_phi_temp;
end
end
always @(*) begin
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
begin
nfa_print_legup_memcpy_1_exit11_51 = bitset_end_return_val;
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
nfa_print_legup_memcpy_1_exit11_51_reg <= nfa_print_legup_memcpy_1_exit11_51;
if (^reset !== 1'bX && ^(nfa_print_legup_memcpy_1_exit11_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_legup_memcpy_1_exit11_51_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_st_i7_0 = nfa_print_52_st_i7_0_phi_temp;
end
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_st_i7_0 = nfa_print_52_st_i7_0_phi_temp;
end
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_52_40)) */
begin
nfa_print_52_st_i7_0 = nfa_print_52_st_i7_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_st_i7_0_reg <= nfa_print_52_st_i7_0;
if (^reset !== 1'bX && ^(nfa_print_52_st_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_st_i7_0_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_st_i7_0_reg <= nfa_print_52_st_i7_0;
if (^reset !== 1'bX && ^(nfa_print_52_st_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_st_i7_0_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_st_i7_0_reg <= nfa_print_52_st_i7_0;
if (^reset !== 1'bX && ^(nfa_print_52_st_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_st_i7_0_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_st_i7_0_reg <= nfa_print_52_st_i7_0;
if (^reset !== 1'bX && ^(nfa_print_52_st_i7_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_st_i7_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_dt_i6_0 = nfa_print_52_dt_i6_0_phi_temp;
end
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_dt_i6_0 = nfa_print_52_dt_i6_0_phi_temp;
end
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_52_40)) */
begin
nfa_print_52_dt_i6_0 = nfa_print_52_dt_i6_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_dt_i6_0_reg <= nfa_print_52_dt_i6_0;
if (^reset !== 1'bX && ^(nfa_print_52_dt_i6_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_dt_i6_0_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_dt_i6_0_reg <= nfa_print_52_dt_i6_0;
if (^reset !== 1'bX && ^(nfa_print_52_dt_i6_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_dt_i6_0_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_dt_i6_0_reg <= nfa_print_52_dt_i6_0;
if (^reset !== 1'bX && ^(nfa_print_52_dt_i6_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_dt_i6_0_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_dt_i6_0_reg <= nfa_print_52_dt_i6_0;
if (^reset !== 1'bX && ^(nfa_print_52_dt_i6_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_dt_i6_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_53 = nfa_print_52_53_phi_temp;
end
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_52_40)) */
begin
nfa_print_52_53 = nfa_print_52_53_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_53_reg <= nfa_print_52_53;
if (^reset !== 1'bX && ^(nfa_print_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_53_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_53_reg <= nfa_print_52_53;
if (^reset !== 1'bX && ^(nfa_print_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_53_reg"); $finish; end
end
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_52_40))
begin
nfa_print_52_53_reg <= nfa_print_52_53;
if (^reset !== 1'bX && ^(nfa_print_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_53_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %52*/
/*   %54 = icmp eq i32 %53, 0*/
begin
nfa_print_52_54 = (nfa_print_52_53 == 32'd0);
end
end
always @(*) begin
/* nfa_print: %55*/
/*   %56 = add i32 %53, -1*/
begin
nfa_print_55_56 = (nfa_print_52_53_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_print: %55*/
/*   %56 = add i32 %53, -1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
nfa_print_55_56_reg <= nfa_print_55_56;
if (^reset !== 1'bX && ^(nfa_print_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_55_56_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %55*/
/*   %57 = getelementptr inbounds i8* %st.i7.0, i32 1*/
begin
nfa_print_55_57 = (nfa_print_52_st_i7_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %55*/
/*   %57 = getelementptr inbounds i8* %st.i7.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
nfa_print_55_57_reg <= nfa_print_55_57;
if (^reset !== 1'bX && ^(nfa_print_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_55_57_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %55*/
/*   %58 = load i8* %st.i7.0, align 1*/
begin
nfa_print_55_58 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_print: %55*/
/*   %59 = getelementptr inbounds i8* %dt.i6.0, i32 1*/
begin
nfa_print_55_59 = (nfa_print_52_dt_i6_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %55*/
/*   %59 = getelementptr inbounds i8* %dt.i6.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
nfa_print_55_59_reg <= nfa_print_55_59;
if (^reset !== 1'bX && ^(nfa_print_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_55_59_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
begin
nfa_print_legup_memcpy_1_exit8_60 = bitset_element_return_val;
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
nfa_print_legup_memcpy_1_exit8_60_reg <= nfa_print_legup_memcpy_1_exit8_60;
if (^reset !== 1'bX && ^(nfa_print_legup_memcpy_1_exit8_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_legup_memcpy_1_exit8_60_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %61 = zext i8 %60 to i32*/
begin
nfa_print_legup_memcpy_1_exit8_61 = {nfa_print_legup_memcpy_1_exit8_60_reg};
end
end
always @(*) begin
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_st_i4_0 = nfa_print_63_st_i4_0_phi_temp;
end
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_st_i4_0 = nfa_print_63_st_i4_0_phi_temp;
end
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_63_47)) */
begin
nfa_print_63_st_i4_0 = nfa_print_63_st_i4_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_st_i4_0_reg <= nfa_print_63_st_i4_0;
if (^reset !== 1'bX && ^(nfa_print_63_st_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_st_i4_0_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_st_i4_0_reg <= nfa_print_63_st_i4_0;
if (^reset !== 1'bX && ^(nfa_print_63_st_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_st_i4_0_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_st_i4_0_reg <= nfa_print_63_st_i4_0;
if (^reset !== 1'bX && ^(nfa_print_63_st_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_st_i4_0_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_st_i4_0_reg <= nfa_print_63_st_i4_0;
if (^reset !== 1'bX && ^(nfa_print_63_st_i4_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_st_i4_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_dt_i3_0 = nfa_print_63_dt_i3_0_phi_temp;
end
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_dt_i3_0 = nfa_print_63_dt_i3_0_phi_temp;
end
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_63_47)) */
begin
nfa_print_63_dt_i3_0 = nfa_print_63_dt_i3_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_dt_i3_0_reg <= nfa_print_63_dt_i3_0;
if (^reset !== 1'bX && ^(nfa_print_63_dt_i3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_dt_i3_0_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_dt_i3_0_reg <= nfa_print_63_dt_i3_0;
if (^reset !== 1'bX && ^(nfa_print_63_dt_i3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_dt_i3_0_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_dt_i3_0_reg <= nfa_print_63_dt_i3_0;
if (^reset !== 1'bX && ^(nfa_print_63_dt_i3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_dt_i3_0_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_dt_i3_0_reg <= nfa_print_63_dt_i3_0;
if (^reset !== 1'bX && ^(nfa_print_63_dt_i3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_dt_i3_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_64 = nfa_print_63_64_phi_temp;
end
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_63_47)) */
begin
nfa_print_63_64 = nfa_print_63_64_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_64_reg <= nfa_print_63_64;
if (^reset !== 1'bX && ^(nfa_print_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_64_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_64_reg <= nfa_print_63_64;
if (^reset !== 1'bX && ^(nfa_print_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_64_reg"); $finish; end
end
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_63_47))
begin
nfa_print_63_64_reg <= nfa_print_63_64;
if (^reset !== 1'bX && ^(nfa_print_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_64_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %63*/
/*   %65 = icmp eq i32 %64, 0*/
begin
nfa_print_63_65 = (nfa_print_63_64 == 32'd0);
end
end
always @(*) begin
/* nfa_print: %66*/
/*   %67 = add i32 %64, -1*/
begin
nfa_print_66_67 = (nfa_print_63_64_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_print: %66*/
/*   %67 = add i32 %64, -1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
nfa_print_66_67_reg <= nfa_print_66_67;
if (^reset !== 1'bX && ^(nfa_print_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_66_67_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %66*/
/*   %68 = getelementptr inbounds i8* %st.i4.0, i32 1*/
begin
nfa_print_66_68 = (nfa_print_63_st_i4_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %66*/
/*   %68 = getelementptr inbounds i8* %st.i4.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
nfa_print_66_68_reg <= nfa_print_66_68;
if (^reset !== 1'bX && ^(nfa_print_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_66_68_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %66*/
/*   %69 = load i8* %st.i4.0, align 1*/
begin
nfa_print_66_69 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_print: %66*/
/*   %70 = getelementptr inbounds i8* %dt.i3.0, i32 1*/
begin
nfa_print_66_70 = (nfa_print_63_dt_i3_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %66*/
/*   %70 = getelementptr inbounds i8* %dt.i3.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
nfa_print_66_70_reg <= nfa_print_66_70;
if (^reset !== 1'bX && ^(nfa_print_66_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_66_70_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
begin
nfa_print_legup_memcpy_1_exit5_71 = bitset_end_return_val;
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
nfa_print_legup_memcpy_1_exit5_71_reg <= nfa_print_legup_memcpy_1_exit5_71;
if (^reset !== 1'bX && ^(nfa_print_legup_memcpy_1_exit5_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_legup_memcpy_1_exit5_71_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_dt_i_0 = nfa_print_74_dt_i_0_phi_temp;
end
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_dt_i_0 = nfa_print_74_dt_i_0_phi_temp;
end
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_74_58)) */
begin
nfa_print_74_dt_i_0 = nfa_print_74_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_dt_i_0_reg <= nfa_print_74_dt_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_dt_i_0_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_dt_i_0_reg <= nfa_print_74_dt_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_dt_i_0_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_dt_i_0_reg <= nfa_print_74_dt_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_dt_i_0_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_dt_i_0_reg <= nfa_print_74_dt_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_st_i_0 = nfa_print_74_st_i_0_phi_temp;
end
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
else if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_st_i_0 = nfa_print_74_st_i_0_phi_temp;
end
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_74_58)) */
begin
nfa_print_74_st_i_0 = nfa_print_74_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_st_i_0_reg <= nfa_print_74_st_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_st_i_0_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_st_i_0_reg <= nfa_print_74_st_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_st_i_0_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_st_i_0_reg <= nfa_print_74_st_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_st_i_0_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_st_i_0_reg <= nfa_print_74_st_i_0;
if (^reset !== 1'bX && ^(nfa_print_74_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_75 = nfa_print_74_75_phi_temp;
end
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
else /* if ((cur_state == LEGUP_F_nfa_print_BB_74_58)) */
begin
nfa_print_74_75 = nfa_print_74_75_phi_temp;
end
end
always @(posedge clk) begin
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_75_reg <= nfa_print_74_75;
if (^reset !== 1'bX && ^(nfa_print_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_75_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_75_reg <= nfa_print_74_75;
if (^reset !== 1'bX && ^(nfa_print_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_75_reg"); $finish; end
end
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
if ((cur_state == LEGUP_F_nfa_print_BB_74_58))
begin
nfa_print_74_75_reg <= nfa_print_74_75;
if (^reset !== 1'bX && ^(nfa_print_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_75_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %74*/
/*   %76 = icmp eq i32 %75, 0*/
begin
nfa_print_74_76 = (nfa_print_74_75 == 32'd0);
end
end
always @(*) begin
/* nfa_print: %77*/
/*   %78 = add i32 %75, -1*/
begin
nfa_print_77_78 = (nfa_print_74_75_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nfa_print: %77*/
/*   %78 = add i32 %75, -1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
nfa_print_77_78_reg <= nfa_print_77_78;
if (^reset !== 1'bX && ^(nfa_print_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_77_78_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %77*/
/*   %79 = getelementptr inbounds i8* %st.i.0, i32 1*/
begin
nfa_print_77_79 = (nfa_print_74_st_i_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %77*/
/*   %79 = getelementptr inbounds i8* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
nfa_print_77_79_reg <= nfa_print_77_79;
if (^reset !== 1'bX && ^(nfa_print_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_77_79_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %77*/
/*   %80 = load i8* %st.i.0, align 1*/
begin
nfa_print_77_80 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* nfa_print: %77*/
/*   %81 = getelementptr inbounds i8* %dt.i.0, i32 1*/
begin
nfa_print_77_81 = (nfa_print_74_dt_i_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* nfa_print: %77*/
/*   %81 = getelementptr inbounds i8* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
nfa_print_77_81_reg <= nfa_print_77_81;
if (^reset !== 1'bX && ^(nfa_print_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_77_81_reg"); $finish; end
end
end
always @(*) begin
/* nfa_print: %82*/
/*   %83 = add i8 %storemerge2, 1*/
begin
nfa_print_82_83 = (nfa_print_36_storemerge2_reg + 8'd1);
end
end
always @(*) begin
/* nfa_print: %86*/
/*   %87 = add i8 %17, 1*/
begin
nfa_print_86_87 = (nfa_print_16_17_reg + 8'd1);
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_7))
begin
nfa_get_sucessors_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
nfa_get_sucessors_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_26))
begin
nfa_get_sucessors_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
nfa_get_sucessors_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_7))
begin
nfa_get_sucessors_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_nfa"); $finish; end
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_26))
begin
nfa_get_sucessors_arg_nfa <= arg_nfa;
if (^reset !== 1'bX && ^(arg_nfa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_nfa"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_16_17_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_phi_temp"); $finish; end
end
/* nfa_print: %16*/
/*   %17 = phi i8 [ 0, %0 ], [ %87, %86 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_86_67) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_16_17_phi_temp <= nfa_print_86_87;
if (^reset !== 1'bX && ^(nfa_print_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_16_17_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_7))
begin
nfa_get_sucessors_arg_state <= nfa_print_16_17_reg;
if (^reset !== 1'bX && ^(nfa_print_16_17_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_state"); $finish; end
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_26))
begin
nfa_get_sucessors_arg_state <= nfa_print_16_17_reg;
if (^reset !== 1'bX && ^(nfa_print_16_17_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_state"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader2_3) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_19_storemerge1_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_phi_temp"); $finish; end
end
/* nfa_print: %19*/
/*   %storemerge1 = phi i8 [ %27, %26 ], [ 0, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_26_12) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_19_storemerge1_phi_temp <= nfa_print_26_27;
if (^reset !== 1'bX && ^(nfa_print_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_storemerge1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_7))
begin
nfa_get_sucessors_arg_sym <= nfa_print_19_storemerge1_reg;
if (^reset !== 1'bX && ^(nfa_print_19_storemerge1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_sym"); $finish; end
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_26))
begin
nfa_get_sucessors_arg_sym <= nfa_print_36_storemerge2_reg;
if (^reset !== 1'bX && ^(nfa_print_36_storemerge2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_sym"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_7))
begin
nfa_get_sucessors_arg_bs <= `TAG_nfa_print_0_suc_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_suc_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_bs"); $finish; end
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_26))
begin
nfa_get_sucessors_arg_bs <= `TAG_nfa_print_0_suc2_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_suc2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_get_sucessors_arg_bs"); $finish; end
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_waitrequest = 1'd0;
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
nfa_get_sucessors_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
nfa_get_sucessors_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_out_a = 1'd0;
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
nfa_get_sucessors_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
nfa_get_sucessors_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
nfa_get_sucessors_memory_controller_out_b = 1'd0;
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
nfa_get_sucessors_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
nfa_get_sucessors_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_9))
begin
bitset_any_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_any_start"); $finish; end
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_any_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_any_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_23_9))
begin
bitset_any_arg_0 <= `TAG_nfa_print_0_suc_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_suc_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_any_arg_0"); $finish; end
end
end
always @(*) begin
bitset_any_memory_controller_waitrequest = 1'd0;
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_any_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_any_memory_controller_out_a = 1'd0;
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_any_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_any_memory_controller_out_b = 1'd0;
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
bitset_any_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16))
begin
bitset_contains_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_contains_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19))
begin
bitset_contains_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_contains_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16))
begin
bitset_contains_arg_0 <= nfa_print_0_9_reg;
if (^reset !== 1'bX && ^(nfa_print_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_0"); $finish; end
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19))
begin
bitset_contains_arg_0 <= nfa_print_0_10_reg;
if (^reset !== 1'bX && ^(nfa_print_0_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_16))
begin
bitset_contains_arg_1 <= nfa_print_nfa_is_initial_exit_30_reg;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_1"); $finish; end
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_19))
begin
bitset_contains_arg_1 <= nfa_print_nfa_is_initial_exit_30_reg;
if (^reset !== 1'bX && ^(nfa_print_nfa_is_initial_exit_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_contains_arg_1"); $finish; end
end
end
always @(*) begin
bitset_contains_memory_controller_waitrequest = 1'd0;
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_contains_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_contains_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_contains_memory_controller_out_a = 1'd0;
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_contains_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_contains_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_contains_memory_controller_out_b = 1'd0;
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
bitset_contains_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
bitset_contains_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_21) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_36_storemerge2_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_phi_temp"); $finish; end
end
/* nfa_print: %36*/
/*   %storemerge2 = phi i8 [ 0, %nfa_is_initial.exit ], [ %83, %82 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_82_65) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_36_storemerge2_phi_temp <= nfa_print_82_83;
if (^reset !== 1'bX && ^(nfa_print_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_36_storemerge2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_28))
begin
bitset_first_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
bitset_first_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_28))
begin
bitset_first_arg_0 <= `TAG_nfa_print_0_qt_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_qt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_40_28))
begin
bitset_first_arg_1 <= `TAG_nfa_print_0_suc2_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_suc2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_first_arg_1"); $finish; end
end
end
always @(*) begin
bitset_first_memory_controller_waitrequest = 1'd0;
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
bitset_first_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_first_memory_controller_out_a = 1'd0;
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
bitset_first_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_first_memory_controller_out_b = 1'd0;
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
bitset_first_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36))
begin
bitset_end_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
bitset_end_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53))
begin
bitset_end_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
bitset_end_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit11_36))
begin
bitset_end_arg_0 <= `TAG_nfa_print_0_3_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_3_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_arg_0"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_53))
begin
bitset_end_arg_0 <= `TAG_nfa_print_0_5_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_end_arg_0"); $finish; end
end
end
always @(*) begin
bitset_end_memory_controller_waitrequest = 1'd0;
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
bitset_end_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
bitset_end_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_end_memory_controller_out_a = 1'd0;
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
bitset_end_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
bitset_end_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_end_memory_controller_out_b = 1'd0;
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
bitset_end_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
bitset_end_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44))
begin
bitset_element_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
bitset_element_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_44))
begin
bitset_element_arg_0 <= `TAG_nfa_print_0_4_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_4_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_element_arg_0"); $finish; end
end
end
always @(*) begin
bitset_element_memory_controller_waitrequest = 1'd0;
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
bitset_element_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_element_memory_controller_out_a = 1'd0;
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
bitset_element_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_element_memory_controller_out_b = 1'd0;
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
bitset_element_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51))
begin
bitset_next_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
bitset_next_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62))
begin
bitset_next_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
bitset_next_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_start"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51))
begin
bitset_next_arg_0 <= `TAG_nfa_print_0_5_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_0"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62))
begin
bitset_next_arg_0 <= `TAG_nfa_print_0_qt_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_qt_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_0"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51))
begin
bitset_next_arg_1 <= `TAG_nfa_print_0_suc2_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_suc2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_1"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62))
begin
bitset_next_arg_1 <= `TAG_nfa_print_0_suc2_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_suc2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_1"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit5_51))
begin
bitset_next_arg_2 <= `TAG_nfa_print_0_6_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_6_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_2"); $finish; end
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_62))
begin
bitset_next_arg_2 <= `TAG_nfa_print_0_7_a;
if (^reset !== 1'bX && ^(`TAG_nfa_print_0_7_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bitset_next_arg_2"); $finish; end
end
end
always @(*) begin
bitset_next_memory_controller_waitrequest = 1'd0;
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
bitset_next_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
bitset_next_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
bitset_next_memory_controller_out_a = 1'd0;
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
bitset_next_memory_controller_out_a = memory_controller_out_a;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
bitset_next_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
bitset_next_memory_controller_out_b = 1'd0;
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
bitset_next_memory_controller_out_b = memory_controller_out_b;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
bitset_next_memory_controller_out_b = memory_controller_out_b;
end
end
always @(posedge clk) begin
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader2_3) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_19_has_sucessors_0_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_has_sucessors_0_phi_temp"); $finish; end
end
/* nfa_print: %19*/
/*   %has_sucessors.0 = phi i8 [ %25, %26 ], [ 0, %.preheader2 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_26_12) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_19_has_sucessors_0_phi_temp <= nfa_print_23_25_reg;
if (^reset !== 1'bX && ^(nfa_print_23_25_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_19_has_sucessors_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %28*/
/*   %has_sucessors.1 = phi i8 [ %25, %23 ], [ %has_sucessors.0, %19 ]*/
if ((((cur_state == LEGUP_F_nfa_print_BB_19_6) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_19_22 == 1'd0)))
begin
nfa_print_28_has_sucessors_1_phi_temp <= nfa_print_19_has_sucessors_0_reg;
if (^reset !== 1'bX && ^(nfa_print_19_has_sucessors_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_28_has_sucessors_1_phi_temp"); $finish; end
end
/* nfa_print: %28*/
/*   %has_sucessors.1 = phi i8 [ %25, %23 ], [ %has_sucessors.0, %19 ]*/
if ((((cur_state == LEGUP_F_nfa_print_BB_23_11) & (memory_controller_waitrequest == 1'd0)) & (nfa_print_23_24_reg == 1'd1)))
begin
nfa_print_28_has_sucessors_1_phi_temp <= nfa_print_23_25;
if (^reset !== 1'bX && ^(nfa_print_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_28_has_sucessors_1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_40_30) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_43_st_i10_0_phi_temp <= nfa_print_0_12_reg;
if (^reset !== 1'bX && ^(nfa_print_0_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_st_i10_0_phi_temp"); $finish; end
end
/* nfa_print: %43*/
/*   %st.i10.0 = phi i8* [ %12, %40 ], [ %st.i10.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__backedge_35) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_43_st_i10_0_phi_temp <= nfa_print__backedge_st_i10_0_be;
if (^reset !== 1'bX && ^(nfa_print__backedge_st_i10_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_st_i10_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_40_30) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_43_dt_i9_0_phi_temp <= nfa_print_0_11_reg;
if (^reset !== 1'bX && ^(nfa_print_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_dt_i9_0_phi_temp"); $finish; end
end
/* nfa_print: %43*/
/*   %dt.i9.0 = phi i8* [ %11, %40 ], [ %dt.i9.0.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__backedge_35) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_43_dt_i9_0_phi_temp <= nfa_print__backedge_dt_i9_0_be;
if (^reset !== 1'bX && ^(nfa_print__backedge_dt_i9_0_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_dt_i9_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_40_30) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_43_44_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_44_phi_temp"); $finish; end
end
/* nfa_print: %43*/
/*   %44 = phi i32 [ 3, %40 ], [ %.be, %.backedge ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__backedge_35) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_43_44_phi_temp <= nfa_print__backedge__be;
if (^reset !== 1'bX && ^(nfa_print__backedge__be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_43_44_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %.backedge*/
/*   %st.i10.0.be = phi i8* [ %48, %46 ], [ %12, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print__backedge_st_i10_0_be_phi_temp <= nfa_print_46_48_reg;
if (^reset !== 1'bX && ^(nfa_print_46_48_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print__backedge_st_i10_0_be_phi_temp"); $finish; end
end
/* nfa_print: %.backedge*/
/*   %st.i10.0.be = phi i8* [ %48, %46 ], [ %12, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print__backedge_st_i10_0_be_phi_temp <= nfa_print_0_12_reg;
if (^reset !== 1'bX && ^(nfa_print_0_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print__backedge_st_i10_0_be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %.backedge*/
/*   %dt.i9.0.be = phi i8* [ %50, %46 ], [ %11, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print__backedge_dt_i9_0_be_phi_temp <= nfa_print_46_50_reg;
if (^reset !== 1'bX && ^(nfa_print_46_50_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print__backedge_dt_i9_0_be_phi_temp"); $finish; end
end
/* nfa_print: %.backedge*/
/*   %dt.i9.0.be = phi i8* [ %50, %46 ], [ %11, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print__backedge_dt_i9_0_be_phi_temp <= nfa_print_0_11_reg;
if (^reset !== 1'bX && ^(nfa_print_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print__backedge_dt_i9_0_be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %.backedge*/
/*   %.be = phi i32 [ %47, %46 ], [ 3, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print__backedge__be_phi_temp <= nfa_print_46_47_reg;
if (^reset !== 1'bX && ^(nfa_print_46_47_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print__backedge__be_phi_temp"); $finish; end
end
/* nfa_print: %.backedge*/
/*   %.be = phi i32 [ %47, %46 ], [ 3, %legup_memcpy_1.exit ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit_64) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print__backedge__be_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print__backedge__be_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader_39) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_52_st_i7_0_phi_temp <= nfa_print_0_12_reg;
if (^reset !== 1'bX && ^(nfa_print_0_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_st_i7_0_phi_temp"); $finish; end
end
/* nfa_print: %52*/
/*   %st.i7.0 = phi i8* [ %57, %55 ], [ %12, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_55_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_52_st_i7_0_phi_temp <= nfa_print_55_57_reg;
if (^reset !== 1'bX && ^(nfa_print_55_57_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_st_i7_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader_39) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_52_dt_i6_0_phi_temp <= nfa_print_0_13_reg;
if (^reset !== 1'bX && ^(nfa_print_0_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_dt_i6_0_phi_temp"); $finish; end
end
/* nfa_print: %52*/
/*   %dt.i6.0 = phi i8* [ %59, %55 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_55_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_52_dt_i6_0_phi_temp <= nfa_print_55_59_reg;
if (^reset !== 1'bX && ^(nfa_print_55_59_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_dt_i6_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader_39) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_52_53_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_53_phi_temp"); $finish; end
end
/* nfa_print: %52*/
/*   %53 = phi i32 [ %56, %55 ], [ 3, %.preheader ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_55_43) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_52_53_phi_temp <= nfa_print_55_56_reg;
if (^reset !== 1'bX && ^(nfa_print_55_56_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_52_53_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_63_st_i4_0_phi_temp <= nfa_print_0_12_reg;
if (^reset !== 1'bX && ^(nfa_print_0_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_st_i4_0_phi_temp"); $finish; end
end
/* nfa_print: %63*/
/*   %st.i4.0 = phi i8* [ %12, %legup_memcpy_1.exit8 ], [ %68, %66 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_66_50) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_63_st_i4_0_phi_temp <= nfa_print_66_68_reg;
if (^reset !== 1'bX && ^(nfa_print_66_68_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_st_i4_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_63_dt_i3_0_phi_temp <= nfa_print_0_14_reg;
if (^reset !== 1'bX && ^(nfa_print_0_14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_dt_i3_0_phi_temp"); $finish; end
end
/* nfa_print: %63*/
/*   %dt.i3.0 = phi i8* [ %14, %legup_memcpy_1.exit8 ], [ %70, %66 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_66_50) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_63_dt_i3_0_phi_temp <= nfa_print_66_70_reg;
if (^reset !== 1'bX && ^(nfa_print_66_70_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_dt_i3_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_legup_memcpy_1_exit8_46) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_63_64_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_64_phi_temp"); $finish; end
end
/* nfa_print: %63*/
/*   %64 = phi i32 [ 3, %legup_memcpy_1.exit8 ], [ %67, %66 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_66_50) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_63_64_phi_temp <= nfa_print_66_67_reg;
if (^reset !== 1'bX && ^(nfa_print_66_67_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_63_64_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader1_57) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_74_dt_i_0_phi_temp <= nfa_print_0_15_reg;
if (^reset !== 1'bX && ^(nfa_print_0_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_dt_i_0_phi_temp"); $finish; end
end
/* nfa_print: %74*/
/*   %dt.i.0 = phi i8* [ %81, %77 ], [ %15, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_77_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_74_dt_i_0_phi_temp <= nfa_print_77_81_reg;
if (^reset !== 1'bX && ^(nfa_print_77_81_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader1_57) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_74_st_i_0_phi_temp <= nfa_print_0_12_reg;
if (^reset !== 1'bX && ^(nfa_print_0_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_st_i_0_phi_temp"); $finish; end
end
/* nfa_print: %74*/
/*   %st.i.0 = phi i8* [ %79, %77 ], [ %12, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_77_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_74_st_i_0_phi_temp <= nfa_print_77_79_reg;
if (^reset !== 1'bX && ^(nfa_print_77_79_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB__preheader1_57) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_74_75_phi_temp <= 32'd3;
if (^reset !== 1'bX && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_75_phi_temp"); $finish; end
end
/* nfa_print: %74*/
/*   %75 = phi i32 [ %78, %77 ], [ 3, %.preheader1 ]*/
if (((cur_state == LEGUP_F_nfa_print_BB_77_61) & (memory_controller_waitrequest == 1'd0)))
begin
nfa_print_74_75_phi_temp <= nfa_print_77_78_reg;
if (^reset !== 1'bX && ^(nfa_print_77_78_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nfa_print_74_75_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nfa_print: %88*/
/*   ret void*/
if ((cur_state == LEGUP_F_nfa_print_BB_88_68))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_enable_a = nfa_get_sucessors_memory_controller_enable_a;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_a = bitset_any_memory_controller_enable_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_enable_a = bitset_contains_memory_controller_enable_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_a = bitset_contains_memory_controller_enable_a;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_enable_a = nfa_get_sucessors_memory_controller_enable_a;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_enable_a = bitset_first_memory_controller_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_enable_a = bitset_end_memory_controller_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_enable_a = bitset_element_memory_controller_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_enable_a = bitset_next_memory_controller_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_enable_a = bitset_end_memory_controller_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_enable_a = bitset_next_memory_controller_enable_a;
end
/* nfa_print: %19*/
/*   %20 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %36*/
/*   %37 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %46*/
/*   %49 = load i8* %st.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %46*/
/*   store i8 %49, i8* %dt.i9.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_34))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %55*/
/*   %58 = load i8* %st.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %55*/
/*   store i8 %58, i8* %dt.i6.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_43))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %66*/
/*   %69 = load i8* %st.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %66*/
/*   store i8 %69, i8* %dt.i3.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_50))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %77*/
/*   %80 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
memory_controller_enable_a = 1'd1;
end
/* nfa_print: %77*/
/*   store i8 %80, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_61))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_address_a = nfa_get_sucessors_memory_controller_address_a;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_a = bitset_any_memory_controller_address_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_address_a = bitset_contains_memory_controller_address_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_a = bitset_contains_memory_controller_address_a;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_address_a = nfa_get_sucessors_memory_controller_address_a;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_address_a = bitset_first_memory_controller_address_a;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_address_a = bitset_end_memory_controller_address_a;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_address_a = bitset_element_memory_controller_address_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_address_a = bitset_next_memory_controller_address_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_address_a = bitset_end_memory_controller_address_a;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_address_a = bitset_next_memory_controller_address_a;
end
/* nfa_print: %19*/
/*   %20 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
memory_controller_address_a = nfa_print_0_8_reg;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15))
begin
memory_controller_address_a = `TAG_nfa_print_0_1_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18))
begin
memory_controller_address_a = `TAG_nfa_print_0_2_a;
end
/* nfa_print: %36*/
/*   %37 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
memory_controller_address_a = nfa_print_0_8_reg;
end
/* nfa_print: %46*/
/*   %49 = load i8* %st.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
memory_controller_address_a = nfa_print_43_st_i10_0_reg;
end
/* nfa_print: %46*/
/*   store i8 %49, i8* %dt.i9.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_34))
begin
memory_controller_address_a = nfa_print_43_dt_i9_0_reg;
end
/* nfa_print: %55*/
/*   %58 = load i8* %st.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
memory_controller_address_a = nfa_print_52_st_i7_0_reg;
end
/* nfa_print: %55*/
/*   store i8 %58, i8* %dt.i6.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_43))
begin
memory_controller_address_a = nfa_print_52_dt_i6_0_reg;
end
/* nfa_print: %66*/
/*   %69 = load i8* %st.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
memory_controller_address_a = nfa_print_63_st_i4_0_reg;
end
/* nfa_print: %66*/
/*   store i8 %69, i8* %dt.i3.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_50))
begin
memory_controller_address_a = nfa_print_63_dt_i3_0_reg;
end
/* nfa_print: %77*/
/*   %80 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
memory_controller_address_a = nfa_print_74_st_i_0_reg;
end
/* nfa_print: %77*/
/*   store i8 %80, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_61))
begin
memory_controller_address_a = nfa_print_74_dt_i_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_write_enable_a = nfa_get_sucessors_memory_controller_write_enable_a;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_a = bitset_any_memory_controller_write_enable_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_write_enable_a = bitset_contains_memory_controller_write_enable_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_a = bitset_contains_memory_controller_write_enable_a;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_write_enable_a = nfa_get_sucessors_memory_controller_write_enable_a;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_write_enable_a = bitset_first_memory_controller_write_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_write_enable_a = bitset_end_memory_controller_write_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_write_enable_a = bitset_element_memory_controller_write_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_write_enable_a = bitset_next_memory_controller_write_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_write_enable_a = bitset_end_memory_controller_write_enable_a;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_write_enable_a = bitset_next_memory_controller_write_enable_a;
end
/* nfa_print: %19*/
/*   %20 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_print: %36*/
/*   %37 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %46*/
/*   %49 = load i8* %st.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %46*/
/*   store i8 %49, i8* %dt.i9.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_34))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_print: %55*/
/*   %58 = load i8* %st.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %55*/
/*   store i8 %58, i8* %dt.i6.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_43))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_print: %66*/
/*   %69 = load i8* %st.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %66*/
/*   store i8 %69, i8* %dt.i3.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_50))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nfa_print: %77*/
/*   %80 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nfa_print: %77*/
/*   store i8 %80, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_61))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_in_a = nfa_get_sucessors_memory_controller_in_a;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_a = bitset_any_memory_controller_in_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_in_a = bitset_contains_memory_controller_in_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_a = bitset_contains_memory_controller_in_a;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_in_a = nfa_get_sucessors_memory_controller_in_a;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_in_a = bitset_first_memory_controller_in_a;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_in_a = bitset_end_memory_controller_in_a;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_in_a = bitset_element_memory_controller_in_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_in_a = bitset_next_memory_controller_in_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_in_a = bitset_end_memory_controller_in_a;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_in_a = bitset_next_memory_controller_in_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15))
begin
memory_controller_in_a = {nfa_print_16_17_reg};
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18))
begin
memory_controller_in_a = {nfa_print_16_17_reg};
end
/* nfa_print: %46*/
/*   store i8 %49, i8* %dt.i9.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_34))
begin
memory_controller_in_a = {nfa_print_46_49};
end
/* nfa_print: %55*/
/*   store i8 %58, i8* %dt.i6.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_43))
begin
memory_controller_in_a = {nfa_print_55_58};
end
/* nfa_print: %66*/
/*   store i8 %69, i8* %dt.i3.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_50))
begin
memory_controller_in_a = {nfa_print_66_69};
end
/* nfa_print: %77*/
/*   store i8 %80, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_61))
begin
memory_controller_in_a = {nfa_print_77_80};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_size_a = nfa_get_sucessors_memory_controller_size_a;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_a = bitset_any_memory_controller_size_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_size_a = bitset_contains_memory_controller_size_a;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_a = bitset_contains_memory_controller_size_a;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_size_a = nfa_get_sucessors_memory_controller_size_a;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_size_a = bitset_first_memory_controller_size_a;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_size_a = bitset_end_memory_controller_size_a;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_size_a = bitset_element_memory_controller_size_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_size_a = bitset_next_memory_controller_size_a;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_size_a = bitset_end_memory_controller_size_a;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_size_a = bitset_next_memory_controller_size_a;
end
/* nfa_print: %19*/
/*   %20 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_19_4))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %1, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_15))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   store i8 %17, i8* %2, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_nfa_is_initial_exit_18))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %36*/
/*   %37 = load i32* %8, align 4*/
if ((cur_state == LEGUP_F_nfa_print_BB_36_22))
begin
memory_controller_size_a = 2'd2;
end
/* nfa_print: %46*/
/*   %49 = load i8* %st.i10.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_32))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %46*/
/*   store i8 %49, i8* %dt.i9.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_46_34))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %55*/
/*   %58 = load i8* %st.i7.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_41))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %55*/
/*   store i8 %58, i8* %dt.i6.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_55_43))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %66*/
/*   %69 = load i8* %st.i4.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_48))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %66*/
/*   store i8 %69, i8* %dt.i3.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_66_50))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %77*/
/*   %80 = load i8* %st.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_59))
begin
memory_controller_size_a = 2'd0;
end
/* nfa_print: %77*/
/*   store i8 %80, i8* %dt.i.0, align 1*/
if ((cur_state == LEGUP_F_nfa_print_BB_77_61))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_enable_b = nfa_get_sucessors_memory_controller_enable_b;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_enable_b = bitset_any_memory_controller_enable_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_enable_b = bitset_contains_memory_controller_enable_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_enable_b = bitset_contains_memory_controller_enable_b;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_enable_b = nfa_get_sucessors_memory_controller_enable_b;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_enable_b = bitset_first_memory_controller_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_enable_b = bitset_end_memory_controller_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_enable_b = bitset_element_memory_controller_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_enable_b = bitset_next_memory_controller_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_enable_b = bitset_end_memory_controller_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_enable_b = bitset_next_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_address_b = nfa_get_sucessors_memory_controller_address_b;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_address_b = bitset_any_memory_controller_address_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_address_b = bitset_contains_memory_controller_address_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_address_b = bitset_contains_memory_controller_address_b;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_address_b = nfa_get_sucessors_memory_controller_address_b;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_address_b = bitset_first_memory_controller_address_b;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_address_b = bitset_end_memory_controller_address_b;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_address_b = bitset_element_memory_controller_address_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_address_b = bitset_next_memory_controller_address_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_address_b = bitset_end_memory_controller_address_b;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_address_b = bitset_next_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_write_enable_b = nfa_get_sucessors_memory_controller_write_enable_b;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_write_enable_b = bitset_any_memory_controller_write_enable_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_write_enable_b = bitset_contains_memory_controller_write_enable_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_write_enable_b = bitset_contains_memory_controller_write_enable_b;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_write_enable_b = nfa_get_sucessors_memory_controller_write_enable_b;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_write_enable_b = bitset_first_memory_controller_write_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_write_enable_b = bitset_end_memory_controller_write_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_write_enable_b = bitset_element_memory_controller_write_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_write_enable_b = bitset_next_memory_controller_write_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_write_enable_b = bitset_end_memory_controller_write_enable_b;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_write_enable_b = bitset_next_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_in_b = nfa_get_sucessors_memory_controller_in_b;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_in_b = bitset_any_memory_controller_in_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_in_b = bitset_contains_memory_controller_in_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_in_b = bitset_contains_memory_controller_in_b;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_in_b = nfa_get_sucessors_memory_controller_in_b;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_in_b = bitset_first_memory_controller_in_b;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_in_b = bitset_end_memory_controller_in_b;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_in_b = bitset_element_memory_controller_in_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_in_b = bitset_next_memory_controller_in_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_in_b = bitset_end_memory_controller_in_b;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_in_b = bitset_next_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* nfa_print: %23*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge1, %struct._bitset_t* %suc)*/
if ((cur_state == LEGUP_function_call_8))
begin
memory_controller_size_b = nfa_get_sucessors_memory_controller_size_b;
end
/* nfa_print: %23*/
/*   %24 = call zeroext i1 @bitset_any(%struct._bitset_t* %suc) nounwind*/
if ((cur_state == LEGUP_function_call_10))
begin
memory_controller_size_b = bitset_any_memory_controller_size_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %31 = call zeroext i1 @bitset_contains(%struct._bitset_t* %9, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_17))
begin
memory_controller_size_b = bitset_contains_memory_controller_size_b;
end
/* nfa_print: %nfa_is_initial.exit*/
/*   %33 = call zeroext i1 @bitset_contains(%struct._bitset_t* %10, i32 %30) nounwind*/
if ((cur_state == LEGUP_function_call_20))
begin
memory_controller_size_b = bitset_contains_memory_controller_size_b;
end
/* nfa_print: %40*/
/*   call void @nfa_get_sucessors(%struct._nfa_t* %nfa, i8 zeroext %17, i8 zeroext %storemerge2, %struct._bitset_t* %suc2)*/
if ((cur_state == LEGUP_function_call_27))
begin
memory_controller_size_b = nfa_get_sucessors_memory_controller_size_b;
end
/* nfa_print: %40*/
/*   call void @bitset_first(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2) nounwind*/
if ((cur_state == LEGUP_function_call_29))
begin
memory_controller_size_b = bitset_first_memory_controller_size_b;
end
/* nfa_print: %legup_memcpy_1.exit11*/
/*   %51 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %3) nounwind*/
if ((cur_state == LEGUP_function_call_37))
begin
memory_controller_size_b = bitset_end_memory_controller_size_b;
end
/* nfa_print: %legup_memcpy_1.exit8*/
/*   %60 = call zeroext i8 @bitset_element(%struct._bitset_iterator_t* byval %4) nounwind*/
if ((cur_state == LEGUP_function_call_45))
begin
memory_controller_size_b = bitset_element_memory_controller_size_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %5, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %6) nounwind*/
if ((cur_state == LEGUP_function_call_52))
begin
memory_controller_size_b = bitset_next_memory_controller_size_b;
end
/* nfa_print: %legup_memcpy_1.exit5*/
/*   %71 = call zeroext i1 @bitset_end(%struct._bitset_iterator_t* byval %5) nounwind*/
if ((cur_state == LEGUP_function_call_54))
begin
memory_controller_size_b = bitset_end_memory_controller_size_b;
end
/* nfa_print: %legup_memcpy_1.exit*/
/*   call void @bitset_next(%struct._bitset_iterator_t* sret %qt, %struct._bitset_t* %suc2, %struct._bitset_iterator_t* byval %7) nounwind*/
if ((cur_state == LEGUP_function_call_63))
begin
memory_controller_size_b = bitset_next_memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_d,
	arg_s,
	arg_n,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_legup_memcpy_1_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_legup_memcpy_1_BB_1_2 = 3'd2;
parameter [2:0] LEGUP_F_legup_memcpy_1_BB_4_3 = 3'd3;
parameter [2:0] LEGUP_F_legup_memcpy_1_BB_4_4 = 3'd4;
parameter [2:0] LEGUP_F_legup_memcpy_1_BB_4_5 = 3'd5;
parameter [2:0] LEGUP_F_legup_memcpy_1_BB_9_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_1_st_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_1_st_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_1_dt_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_1_dt_0_reg;
reg [31:0] legup_memcpy_1_1_2;
reg [31:0] legup_memcpy_1_1_2_reg;
reg  legup_memcpy_1_1_3;
reg [31:0] legup_memcpy_1_4_5;
reg [31:0] legup_memcpy_1_4_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_4_6_reg;
reg [7:0] legup_memcpy_1_4_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_4_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_4_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_1_st_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_1_dt_0_phi_temp;
reg [31:0] legup_memcpy_1_1_2_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (legup_memcpy_1_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_9_6;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_9_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (legup_memcpy_1_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_9_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_1_BB_9_6;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_1_BB_9_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_9_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_st_0 = legup_memcpy_1_1_st_0_phi_temp;
end
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_st_0 = legup_memcpy_1_1_st_0_phi_temp;
end
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2)) */
begin
legup_memcpy_1_1_st_0 = legup_memcpy_1_1_st_0_phi_temp;
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_st_0_reg <= legup_memcpy_1_1_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_st_0_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_st_0_reg <= legup_memcpy_1_1_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_st_0_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_st_0_reg <= legup_memcpy_1_1_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_st_0_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_st_0_reg <= legup_memcpy_1_1_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_st_0_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_dt_0 = legup_memcpy_1_1_dt_0_phi_temp;
end
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
else if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_dt_0 = legup_memcpy_1_1_dt_0_phi_temp;
end
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
else /* if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2)) */
begin
legup_memcpy_1_1_dt_0 = legup_memcpy_1_1_dt_0_phi_temp;
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_dt_0_reg <= legup_memcpy_1_1_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_dt_0_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_dt_0_reg <= legup_memcpy_1_1_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_dt_0_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_dt_0_reg <= legup_memcpy_1_1_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_dt_0_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_dt_0_reg <= legup_memcpy_1_1_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_dt_0_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_2 = legup_memcpy_1_1_2_phi_temp;
end
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2)) */
begin
legup_memcpy_1_1_2 = legup_memcpy_1_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_2_reg <= legup_memcpy_1_1_2;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_2_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_2_reg <= legup_memcpy_1_1_2;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_2_reg"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_1_2))
begin
legup_memcpy_1_1_2_reg <= legup_memcpy_1_1_2;
if (^reset !== 1'bX && ^(legup_memcpy_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_2_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_1: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
legup_memcpy_1_1_3 = (legup_memcpy_1_1_2 == 32'd0);
end
end
always @(*) begin
/* legup_memcpy_1: %4*/
/*   %5 = add i32 %2, -1*/
begin
legup_memcpy_1_4_5 = (legup_memcpy_1_1_2_reg + -32'd1);
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %4*/
/*   %5 = add i32 %2, -1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
legup_memcpy_1_4_5_reg <= legup_memcpy_1_4_5;
if (^reset !== 1'bX && ^(legup_memcpy_1_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_4_5_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_1: %4*/
/*   %6 = getelementptr inbounds i8* %st.0, i32 1*/
begin
legup_memcpy_1_4_6 = (legup_memcpy_1_1_st_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %4*/
/*   %6 = getelementptr inbounds i8* %st.0, i32 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
legup_memcpy_1_4_6_reg <= legup_memcpy_1_4_6;
if (^reset !== 1'bX && ^(legup_memcpy_1_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_4_6_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_1: %4*/
/*   %7 = load i8* %st.0, align 1*/
begin
legup_memcpy_1_4_7 = memory_controller_out_a[7:0];
end
end
always @(*) begin
/* legup_memcpy_1: %4*/
/*   %8 = getelementptr inbounds i8* %dt.0, i32 1*/
begin
legup_memcpy_1_4_8 = (legup_memcpy_1_1_dt_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %4*/
/*   %8 = getelementptr inbounds i8* %dt.0, i32 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
legup_memcpy_1_4_8_reg <= legup_memcpy_1_4_8;
if (^reset !== 1'bX && ^(legup_memcpy_1_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_4_8_reg"); $finish; end
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_1_1_st_0_phi_temp <= arg_s;
if (^reset !== 1'bX && ^(arg_s) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_st_0_phi_temp"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %st.0 = phi i8* [ %s, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_1_1_st_0_phi_temp <= legup_memcpy_1_4_6_reg;
if (^reset !== 1'bX && ^(legup_memcpy_1_4_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_st_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_1_1_dt_0_phi_temp <= arg_d;
if (^reset !== 1'bX && ^(arg_d) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_dt_0_phi_temp"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %dt.0 = phi i8* [ %d, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_1_1_dt_0_phi_temp <= legup_memcpy_1_4_8_reg;
if (^reset !== 1'bX && ^(legup_memcpy_1_4_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_dt_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_1_1_2_phi_temp <= arg_n;
if (^reset !== 1'bX && ^(arg_n) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_2_phi_temp"); $finish; end
end
/* legup_memcpy_1: %1*/
/*   %2 = phi i32 [ %n, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_1_1_2_phi_temp <= legup_memcpy_1_4_5_reg;
if (^reset !== 1'bX && ^(legup_memcpy_1_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* legup_memcpy_1: %9*/
/*   ret void*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_9_6))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* legup_memcpy_1: %4*/
/*   %7 = load i8* %st.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
memory_controller_enable_a = 1'd1;
end
/* legup_memcpy_1: %4*/
/*   store i8 %7, i8* %dt.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* legup_memcpy_1: %4*/
/*   %7 = load i8* %st.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
memory_controller_address_a = legup_memcpy_1_1_st_0_reg;
end
/* legup_memcpy_1: %4*/
/*   store i8 %7, i8* %dt.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5))
begin
memory_controller_address_a = legup_memcpy_1_1_dt_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* legup_memcpy_1: %4*/
/*   %7 = load i8* %st.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* legup_memcpy_1: %4*/
/*   store i8 %7, i8* %dt.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* legup_memcpy_1: %4*/
/*   store i8 %7, i8* %dt.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5))
begin
memory_controller_in_a = {legup_memcpy_1_4_7};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* legup_memcpy_1: %4*/
/*   %7 = load i8* %st.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_3))
begin
memory_controller_size_a = 2'd0;
end
/* legup_memcpy_1: %4*/
/*   store i8 %7, i8* %dt.0, align 1*/
if ((cur_state == LEGUP_F_legup_memcpy_1_BB_4_5))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	arg_d,
	arg_s,
	arg_n,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_legup_memcpy_4_BB_0_1 = 3'd1;
parameter [2:0] LEGUP_F_legup_memcpy_4_BB_2_2 = 3'd2;
parameter [2:0] LEGUP_F_legup_memcpy_4_BB_5_3 = 3'd3;
parameter [2:0] LEGUP_F_legup_memcpy_4_BB_5_4 = 3'd4;
parameter [2:0] LEGUP_F_legup_memcpy_4_BB_5_5 = 3'd5;
parameter [2:0] LEGUP_F_legup_memcpy_4_BB_10_6 = 3'd6;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [2:0] cur_state;
reg [31:0] legup_memcpy_4_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_2_st_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_2_st_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_2_dt_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_2_dt_0_reg;
reg [31:0] legup_memcpy_4_2_3;
reg [31:0] legup_memcpy_4_2_3_reg;
reg  legup_memcpy_4_2_4;
reg [31:0] legup_memcpy_4_5_6;
reg [31:0] legup_memcpy_4_5_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_5_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_5_7_reg;
reg [31:0] legup_memcpy_4_5_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_5_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_5_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_2_st_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_2_dt_0_phi_temp;
reg [31:0] legup_memcpy_4_2_3_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (legup_memcpy_4_2_4 == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_10_6;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2) & (memory_controller_waitrequest == 1'd0)) & (legup_memcpy_4_2_4 == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_5_3;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_5_3;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_5_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_5_4;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_5_4;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_5_5;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_5_5;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_2_2;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_10_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_memcpy_4_BB_10_6;
if (^reset !== 1'bX && ^(LEGUP_F_legup_memcpy_4_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_10_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 3'd0;
if (^reset !== 1'bX && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_4: %0*/
/*   %1 = lshr i32 %n, 2*/
begin
legup_memcpy_4_0_1 = (arg_n >>> (32'd2 % 32));
end
end
always @(*) begin
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_st_0 = legup_memcpy_4_2_st_0_phi_temp;
end
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
else if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_st_0 = legup_memcpy_4_2_st_0_phi_temp;
end
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
else /* if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2)) */
begin
legup_memcpy_4_2_st_0 = legup_memcpy_4_2_st_0_phi_temp;
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_st_0_reg <= legup_memcpy_4_2_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_st_0_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_st_0_reg <= legup_memcpy_4_2_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_st_0_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_st_0_reg <= legup_memcpy_4_2_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_st_0_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_st_0_reg <= legup_memcpy_4_2_st_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_st_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_st_0_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_dt_0 = legup_memcpy_4_2_dt_0_phi_temp;
end
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
else if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_dt_0 = legup_memcpy_4_2_dt_0_phi_temp;
end
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
else /* if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2)) */
begin
legup_memcpy_4_2_dt_0 = legup_memcpy_4_2_dt_0_phi_temp;
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_dt_0_reg <= legup_memcpy_4_2_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_dt_0_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_dt_0_reg <= legup_memcpy_4_2_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_dt_0_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_dt_0_reg <= legup_memcpy_4_2_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_dt_0_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_dt_0_reg <= legup_memcpy_4_2_dt_0;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_dt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_dt_0_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_3 = legup_memcpy_4_2_3_phi_temp;
end
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
else /* if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2)) */
begin
legup_memcpy_4_2_3 = legup_memcpy_4_2_3_phi_temp;
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_3_reg <= legup_memcpy_4_2_3;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_3_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_3_reg <= legup_memcpy_4_2_3;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_3_reg"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_2_2))
begin
legup_memcpy_4_2_3_reg <= legup_memcpy_4_2_3;
if (^reset !== 1'bX && ^(legup_memcpy_4_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_3_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_4: %2*/
/*   %4 = icmp eq i32 %3, 0*/
begin
legup_memcpy_4_2_4 = (legup_memcpy_4_2_3 == 32'd0);
end
end
always @(*) begin
/* legup_memcpy_4: %5*/
/*   %6 = add i32 %3, -1*/
begin
legup_memcpy_4_5_6 = (legup_memcpy_4_2_3_reg + -32'd1);
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %5*/
/*   %6 = add i32 %3, -1*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
legup_memcpy_4_5_6_reg <= legup_memcpy_4_5_6;
if (^reset !== 1'bX && ^(legup_memcpy_4_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_5_6_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_4: %5*/
/*   %7 = getelementptr inbounds i32* %st.0, i32 1*/
begin
legup_memcpy_4_5_7 = (legup_memcpy_4_2_st_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %5*/
/*   %7 = getelementptr inbounds i32* %st.0, i32 1*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
legup_memcpy_4_5_7_reg <= legup_memcpy_4_5_7;
if (^reset !== 1'bX && ^(legup_memcpy_4_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_5_7_reg"); $finish; end
end
end
always @(*) begin
/* legup_memcpy_4: %5*/
/*   %8 = load i32* %st.0, align 4*/
begin
legup_memcpy_4_5_8 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* legup_memcpy_4: %5*/
/*   %9 = getelementptr inbounds i32* %dt.0, i32 1*/
begin
legup_memcpy_4_5_9 = (legup_memcpy_4_2_dt_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %5*/
/*   %9 = getelementptr inbounds i32* %dt.0, i32 1*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
legup_memcpy_4_5_9_reg <= legup_memcpy_4_5_9;
if (^reset !== 1'bX && ^(legup_memcpy_4_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_5_9_reg"); $finish; end
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_4_2_st_0_phi_temp <= arg_s;
if (^reset !== 1'bX && ^(arg_s) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_st_0_phi_temp"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %st.0 = phi i32* [ %s, %0 ], [ %7, %5 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_4_2_st_0_phi_temp <= legup_memcpy_4_5_7_reg;
if (^reset !== 1'bX && ^(legup_memcpy_4_5_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_st_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_4_2_dt_0_phi_temp <= arg_d;
if (^reset !== 1'bX && ^(arg_d) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_dt_0_phi_temp"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %dt.0 = phi i32* [ %d, %0 ], [ %9, %5 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_4_2_dt_0_phi_temp <= legup_memcpy_4_5_9_reg;
if (^reset !== 1'bX && ^(legup_memcpy_4_5_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_dt_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_4_2_3_phi_temp <= legup_memcpy_4_0_1;
if (^reset !== 1'bX && ^(legup_memcpy_4_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_3_phi_temp"); $finish; end
end
/* legup_memcpy_4: %2*/
/*   %3 = phi i32 [ %1, %0 ], [ %6, %5 ]*/
if (((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_memcpy_4_2_3_phi_temp <= legup_memcpy_4_5_6_reg;
if (^reset !== 1'bX && ^(legup_memcpy_4_5_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_2_3_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* legup_memcpy_4: %10*/
/*   ret void*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_10_6))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* legup_memcpy_4: %5*/
/*   %8 = load i32* %st.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
memory_controller_enable_a = 1'd1;
end
/* legup_memcpy_4: %5*/
/*   store i32 %8, i32* %dt.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* legup_memcpy_4: %5*/
/*   %8 = load i32* %st.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
memory_controller_address_a = legup_memcpy_4_2_st_0_reg;
end
/* legup_memcpy_4: %5*/
/*   store i32 %8, i32* %dt.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5))
begin
memory_controller_address_a = legup_memcpy_4_2_dt_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* legup_memcpy_4: %5*/
/*   %8 = load i32* %st.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* legup_memcpy_4: %5*/
/*   store i32 %8, i32* %dt.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* legup_memcpy_4: %5*/
/*   store i32 %8, i32* %dt.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5))
begin
memory_controller_in_a = {legup_memcpy_4_5_8};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* legup_memcpy_4: %5*/
/*   %8 = load i32* %st.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_3))
begin
memory_controller_size_a = 2'd2;
end
/* legup_memcpy_4: %5*/
/*   store i32 %8, i32* %dt.0, align 4*/
if ((cur_state == LEGUP_F_legup_memcpy_4_BB_5_5))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	q_a,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b)
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [1:0] KEY;
    input [15:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire  clk;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));
    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));
    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));
    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));
    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));
    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));
    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));
    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
